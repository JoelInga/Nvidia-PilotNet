{"networkName": "NVIDIA", "networkID": 129, "networkMeta": {"openStatistics": false, "openTest": false, "hideModel": false, "hideStatistics": false, "hideTest": false, "zoom": 0.9, "zoomSnapshot": "0.51", "usingWeights": false, "netMode": "edit", "coreStatus": {"Status": "Finished", "Iterations": 2, "Epoch": 0, "Progress": 0.015748031496062992, "CPU": 16.5, "GPU": "", "Memory": 73.7, "Training_Duration": 140.88825511932373}, "chartsRequest": {"timerID": 831, "waitGlobalEvent": false, "doRequest": 139, "showCharts": 119}}, "networkElementList": {"1605069346760": {"layerId": "1605069346760", "copyId": null, "copyContainerElement": null, "layerName": "Local_1", "layerType": "Data", "layerSettings": {"accessProperties": {"Columns": [], "Sources": [{"path": "c:/users/arunesh/anaconda3/envs/env7/lib/site-packages/perceptilabs/tutorial_data/NVIDIA_X.npy", "type": "file"}], "Partition_list": [[70, 20, 10]], "Shuffle_data": true}, "lazy": false}, "layerSettingsTabName": "Computer", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 18, "left": 36}, "tutorialId": "", "OutputDim": "66x200x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DataData", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16050693467600": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069435590", "dst_var": "input"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "Data", "testInfoIsInput": true, "accessProperties": {"Columns": [], "Dataset_size": 3000, "Category": "Local", "Type": "Data", "Sources": [], "PathFake": [], "Partition_list": [], "Shuffle_data": true}}}, "1605069435590": {"layerId": "1605069435590", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_1", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 24, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_1(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_1'        \n        self._patch_size = 5\n        self._feature_maps = 24\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 20, "left": 200}, "tutorialId": "", "OutputDim": "31x98x24", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694355910": {"name": "input", "reference_var_id": "16050693467600", "reference_layer_id": "1605069346760", "isDefault": true}}, "outputs": {"16050694355910": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069440499", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069346760", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069440499": {"layerId": "1605069440499", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_2", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 48, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_2(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_2'        \n        self._patch_size = 5\n        self._feature_maps = 36\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 20, "left": 360}, "tutorialId": "", "OutputDim": "14x47x36", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694405000": {"name": "input", "reference_var_id": "16050694355910", "reference_layer_id": "1605069435590", "isDefault": true}}, "outputs": {"16050694405000": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069445064", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069435590", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "W", "b"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069445064": {"layerId": "1605069445064", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_3", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 96, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_3(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_3'        \n        self._patch_size = 5\n        self._feature_maps = 48\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 20, "left": 520}, "tutorialId": "", "OutputDim": "5x22x48", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694450640": {"name": "input", "reference_var_id": "16050694405000", "reference_layer_id": "1605069440499", "isDefault": true}}, "outputs": {"16050694450640": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069449651", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069440499", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069449651": {"layerId": "1605069449651", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_4", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 3, "Feature_maps": 192, "Stride": 1, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_4(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_4'        \n        self._patch_size = 3\n        self._feature_maps = 64\n        self._padding = 'VALID'\n        self._stride = 1\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 20, "left": 680}, "tutorialId": "", "OutputDim": "3x20x64", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694496510": {"name": "input", "reference_var_id": "16050694450640", "reference_layer_id": "1605069445064", "isDefault": true}}, "outputs": {"16050694496510": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069465134", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069445064", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069465134": {"layerId": "1605069465134", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_5", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 3, "Feature_maps": 384, "Stride": 1, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_5(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_5'        \n        self._patch_size = 3\n        self._feature_maps = 64\n        self._padding = 'VALID'\n        self._stride = 1\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 20, "left": 840}, "tutorialId": "", "OutputDim": "1x18x64", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694651340": {"name": "input", "reference_var_id": "16050694496510", "reference_layer_id": "1605069449651", "isDefault": true}}, "outputs": {"16050694651340": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069479697", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069449651", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069479697": {"layerId": "1605069479697", "copyId": null, "copyContainerElement": null, "layerName": "Dense_1", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 100, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_1(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_1'\n        self._n_neurons = 100\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 220, "left": 280}, "tutorialId": "", "OutputDim": "100", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050694796970": {"name": "input", "reference_var_id": "16050694651340", "reference_layer_id": "1605069465134", "isDefault": true}}, "outputs": {"16050694796980": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069496107", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069465134", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069496107": {"layerId": "1605069496107", "copyId": null, "copyContainerElement": null, "layerName": "Dense_2", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 50, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_2(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_2'\n        self._n_neurons = 50\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 220, "left": 440}, "tutorialId": "", "OutputDim": "50", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050694961070": {"name": "input", "reference_var_id": "16050694796980", "reference_layer_id": "1605069479697", "isDefault": true}}, "outputs": {"16050694961070": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069502129", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069479697", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "initial", "W", "b", "flat_node"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069502129": {"layerId": "1605069502129", "copyId": null, "copyContainerElement": null, "layerName": "Dense_3", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 10, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_3(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_3'\n        self._n_neurons = 10\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 220, "left": 600}, "tutorialId": "", "OutputDim": "10", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050695021290": {"name": "input", "reference_var_id": "16050694961070", "reference_layer_id": "1605069496107", "isDefault": true}}, "outputs": {"16050695021300": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069507514", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069496107", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "initial", "W", "b", "flat_node"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069507514": {"layerId": "1605069507514", "copyId": null, "copyContainerElement": null, "layerName": "Dense_4", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 1, "Activation_function": "None", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 220, "left": 760}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16050695075140": {"name": "input", "reference_var_id": "16050695021300", "reference_layer_id": "1605069502129", "isDefault": true}}, "outputs": {"16050695075140": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069713570", "dst_var": "predictions"}], "backward_connections": [{"src_id": "1605069502129", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}}, "1605069713570": {"layerId": "1605069713570", "copyId": null, "copyContainerElement": null, "layerName": "Regression_1", "layerType": "Training", "layerSettings": {"Learning_rate": 0.001, "Decay_rate": 0.96, "Decay_steps": 100000, "Momentum": 0.9, "Beta_2": 0.999, "Beta_1": 0.9, "Optimizer": "ADAM", "Epochs": 20, "Batch_size": 100, "Labels": "1605069721330", "Class_weights": 1, "Use_CPU": true}, "layerSettingsTabName": "Settings", "layerCode": "################################################### Main #####################################################\n \n\n\n                    \nclass TrainRegression_Regression_1(RegressionLayer):\n    def __init__(self):\n        \n                            \n        \n        self._n_epochs = 10\n        self._batch_size = 100\n\n        self._stopped = False\n        self._paused = False\n        self._headless = False\n        self._status = 'created'\n        \n        self._loss_training = 0.0\n        self._loss_validation = 0.0\n        self._loss_testing = 0.0\n\n        self._squared_error_training = 0.0\n        self._squared_error_validation = 0.0\n        self._squared_error_testing = 0.0\n\n        self._squared_variance_training = 0.0\n        self._squared_variance_validation = 0.0\n        self._squared_variance_testing = 0.0\n\n        self._r_squared_training = 0.0\n        self._r_squared_validation = 0.0               \n        self._r_squared_testing = 0.0\n\n\n        self._variables = {}\n        self._layer_outputs = {}\n        self._layer_weights = {}\n        self._layer_biases = {}        \n        self._layer_gradients = {}\n\n        self._training_iteration = 0\n        self._validation_iteration = 0\n        self._testing_iteration = 0\n\n        self._trn_sz_tot = 0\n        self._val_sz_tot = 0\n        self._tst_sz_tot = 0\n\n        self._checkpoint = None\n            \n    def init_layer(self, graph:Graph, mode = 'initializing'):\n        \"\"\"This is the function that makes the training layer runnable. We take all variable initializations for tensors and initializers and wrap them in dictionaries\n        to be called in run().\n        \"\"\"\n        self._mode = mode\n        self._status = 'initializing'\n\n        output_layer_id = \"DeepLearningFC_Dense_4\"\n        target_layer_id = \"DataData_Local_2\"\n\n        input_data_nodes = graph.get_direct_data_nodes(output_layer_id)\n        label_data_nodes = graph.get_direct_data_nodes(target_layer_id)\n\n        assert len(input_data_nodes) == 1\n        assert len(label_data_nodes) == 1\n        input_data_node = input_data_nodes[0]\n        label_data_node = label_data_nodes[0]\n\n        self._trn_sz_tot = input_data_node.layer.size_training\n        self._val_sz_tot = input_data_node.layer.size_validation\n        self._tst_sz_tot = input_data_node.layer.size_testing\n\n        input_sample = input_data_node.layer_instance.sample\n        label_sample = label_data_node.layer_instance.sample\n\n\n        # Make training set\n        dataset_trn = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_training,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_training,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n\n        # Make validation set\n        dataset_val = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_validation,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_validation,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n\n        # Make testing set\n        dataset_tst = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_testing,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_testing,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n        \n        self._export_data_gen = input_data_node.layer_instance.make_generator_training()\n\n        dataset_trn = dataset_trn.batch(self._batch_size)\n        dataset_val = dataset_val.batch(self._batch_size)\n        dataset_tst = dataset_tst.batch(1)                \n\n        # Make initializers\n        with tf.variable_scope('TrainRegression_Regression_1/train', reuse=tf.AUTO_REUSE):\n            is_training = tf.get_variable(name=\"is_train\", dtype=tf.bool, initializer=False)\n        \n        iterator = tf.data.Iterator.from_structure(dataset_trn.output_types, dataset_trn.output_shapes)\n\n        trn_init = iterator.make_initializer(dataset_trn)\n        trn_init = tf.group([trn_init, is_training.assign(True if self._batch_size > 1 else False)])\n        \n        val_init = iterator.make_initializer(dataset_val)\n        val_init = tf.group([val_init, is_training.assign(False)])\n\n        tst_init = iterator.make_initializer(dataset_tst)        \n        tst_init = tf.group([tst_init, is_training.assign(False)])\n\n        input_tensor, label_tensor = iterator.get_next()\n\n        # Build the TensorFlow graph\n\n        def build_graph(input_tensor, label_tensor):\n            layer_output_tensors = {\n                input_data_node.layer_id: input_tensor,\n                label_data_node.layer_id: label_tensor\n            }\n\n            for dst_node in graph.inner_nodes:\n                inputs = {\n                    dst_var: layer_output_tensors[src_node.layer_id][src_var]\n                    for src_node, src_var, dst_var in graph.get_input_connections(dst_node)\n                }\n                y = dst_node.layer_instance(\n                    inputs,\n                    is_training=is_training\n                )\n                layer_output_tensors[dst_node.layer_id] = y\n\n            return layer_output_tensors\n\n        layer_output_tensors = build_graph(input_tensor, label_tensor)\n\n        output_tensor = None\n        target_tensor = None\n\n        for src_node, src_var, dst_var in graph.get_input_connections(graph.active_training_node):\n            if dst_var == 'predictions':\n                output_tensor = layer_output_tensors[output_layer_id][src_var]\n                output_var_name = src_var\n            if dst_var == 'labels':\n                target_tensor = layer_output_tensors[target_layer_id][src_var]\n        # ----\n        update_ops = tf.compat.v1.get_collection(tf.GraphKeys.UPDATE_OPS)\n\n        # Create an exportable version of the TensorFlow graph\n        \n        self._input_tensor_export = {\n            key: tf.placeholder(shape=shape, dtype=type_)\n            for (key, shape), (_, type_) in zip(dataset_trn.output_shapes[0].items(), dataset_trn.output_types[0].items())            \n        }\n\n        self._output_tensor_export = build_graph(\n            self._input_tensor_export,\n            {                                                                                                                                                                       \n                key: tf.placeholder(shape=shape, dtype=type_)\n                for (key, shape), (_, type_) in zip(dataset_trn.output_shapes[1].items(), dataset_trn.output_types[1].items())\n            }             \n        )[output_layer_id]\n\n        # Calculate loss and other important metrics for RegressionLayer\n        # Mean estimation for entire dataset included here\n        #loss_tensor = (tf.reduce_mean(tf.abs(output_tensor - target_tensor)))\n        #loss_tensor = (tf.keras.losses.MSE(target_tensor, output_tensor))\n        loss_tensor = (tf.reduce_mean(tf.keras.losses.MSE(target_tensor, output_tensor)))\n        \n        reg_error_tensor = tf.reduce_sum((output_tensor - target_tensor)) \n        squared_error_tensor = (tf.reduce_sum(tf.square(output_tensor - target_tensor)))\n\n        y_bar_numerator = tf.constant(0.0)\n        y_bar_numerator += tf.reduce_sum(target_tensor)\n\n        y_bar_denominator = tf.constant(0.0)\n        y_bar_denominator += self._batch_size\n\n        y_bar_tensor = y_bar_numerator / y_bar_denominator\n\n\n\n        squared_variance_tensor = tf.reduce_sum(tf.square(target_tensor - y_bar_tensor))\n        r_squared_tensor = 1 - (tf.truediv(squared_variance_tensor,squared_error_tensor))\n\n        global_step = None\n\n        optimizer = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999)\n\n        layer_weight_tensors = {}\n        layer_bias_tensors = {}        \n        layer_gradient_tensors = {}\n        for node in graph.inner_nodes:\n            if not isinstance(node.layer, Tf1xLayer): # In case of pure custom layers...\n                continue\n            \n            layer_weight_tensors[node.layer_id] = node.layer.weights\n            layer_bias_tensors[node.layer_id] = node.layer.biases            \n            \n            if len(node.layer.trainable_variables) > 0:\n                gradients = {}\n                for name, tensor in node.layer.trainable_variables.items():\n                    grad_tensor = tf.gradients(loss_tensor, tensor)\n                    if any(x is None for x in grad_tensor):\n                        grad_tensor = tf.constant(0)\n                    gradients[name] = grad_tensor\n                layer_gradient_tensors[node.layer_id] = gradients\n                # self._internal_layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize\n                # self._layer_gradients = self._internal_layer_gradients.copy()\n\n        # trainable_vars = tf.trainable_variables()\n        # grads = tf.gradients(loss_tensor, trainable_vars)\n        # update_weights = optimizer.apply_gradients(zip(grads, trainable_vars), global_step=global_step)        \n        \n        update_weights = optimizer.minimize(loss_tensor, global_step=global_step)\n        update_weights = tf.group([update_weights, update_ops])\n                \n        sess = None\n         \n        config = tf.ConfigProto(device_count={\"GPU\": 0})\n        sess = tf.Session(config=config)\n     \n        self._sess = sess\n\n        trackable_variables = {}\n        trackable_variables.update({x.name: x for x in tf.trainable_variables() if isinstance(x, Trackable)})\n        trackable_variables.update({k: v for k, v in locals().items() if isinstance(v, Trackable) and not isinstance(v, tf.python.data.ops.iterator_ops.Iterator)})\n        self._checkpoint = tf.train.Checkpoint(**trackable_variables)\n        \n        sess.run(tf.global_variables_initializer())\n        \n        checkpoint_directory = 'C:/Users/ARUNESH/Documents/Perceptilabs/Default/NVIDIA/checkpoint'\n        use_checkpoint = False\n        if use_checkpoint:\n            path = tf.train.latest_checkpoint(checkpoint_directory)\n            if path is not None:\n                status = self._checkpoint.restore(path)\n                status.run_restore_ops(session=self._sess)\n            elif path is None and self._mode == 'testing':\n                log.error('There are no saved checkpoint files for this model.')\n                self._sess.close()\n\n\n        self._trn_init = trn_init\n        self._val_init = val_init\n        self._tst_init = tst_init\n\n        self._weights = update_weights\n        self._loss = loss_tensor\n        self._squared_err = squared_error_tensor\n        self._squared_var = squared_variance_tensor\n        self._r_sq = r_squared_tensor\n        self._layer_output = layer_output_tensors\n        self._layer_weight = layer_weight_tensors\n        self._layer_bias = layer_bias_tensors\n        self._layer_gradient = layer_gradient_tensors\n\n\n        \n    def train(self, graph:Graph):\n        \"\"\"Training is done when this function is called. Once the training ends, checkpoint files are saved.\n        \"\"\"\n    \n        \n        \n        sess = self._sess                 \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n        self._checkpoint_save_path = 'C:/Users/ARUNESH/Documents/Perceptilabs/Default/NVIDIA/checkpoint'\n\n        def train_step(sess):\n            if not self._headless:\n                _, self._loss_training, self._squared_error_training, \\\n                    self._squared_variance_training, self._r_squared_training,\\\n                    self._layer_outputs, self._layer_weights, self._layer_biases, \\\n                    self._layer_gradients \\\n                    = sess.run([\n                        self._weights, self._loss, self._squared_err,\n                        self._squared_var, self._r_sq, \n                        self._layer_output, self._layer_weight, self._layer_bias, self._layer_gradient\n                    ])\n            else:\n                _, self._loss_training, self._squared_error_training, \\\n                    self._squared_variance_training, self._r_squared_training \\\n                    = sess.run([\n                        self._weights, self._loss, self._squared_err,\n                        self._squared_var, self._r_sq \n                    ])\n    \n        def validation_step(sess):\n            if not self._headless:\n                self._loss_validation, self._squared_error_validation, \\\n                    self._squared_variance_validation, self._r_squared_validation, \\\n                    self._layer_outputs, self._layer_weights, self._layer_biases, \\\n                    self._layer_gradients \\\n                    = sess.run([\n                        self._loss, self._squared_err,\n                        self._squared_var, self._r_sq, \n                        self._layer_output, self._layer_weight, self._layer_bias, self._layer_gradient\n                    ])\n            else:\n                self._loss_validation, self._squared_error_validation, \\\n                    self._squared_variance_validation, self._r_squared_validation \\\n                    = sess.run([\n                        self._loss, self._squared_err,\n                        self._squared_var, self._r_sq \n                    ])\n\n        \n        log.info(\"Entering training loop\")\n\n        # Training loop\n        self._epoch = 0\n        while self._epoch < self._n_epochs and not self._stopped:\n            t0 = time.perf_counter()\n            self._training_iteration = 0\n            self._validation_iteration = 0\n            self._status = 'training'\n            sess.run(self._trn_init)            \n            try:\n                while not self._stopped:\n                    train_step(sess)\n                    yield YieldLevel.SNAPSHOT\n                    self._training_iteration += 1\n            except tf.errors.OutOfRangeError:\n                pass\n\n            self._status = 'validation'\n            sess.run(self._val_init)            \n            try:\n                while not self._stopped:\n                    validation_step(sess)\n                    yield YieldLevel.SNAPSHOT                    \n                    self._validation_iteration += 1\n            except tf.errors.OutOfRangeError:\n                pass\n            log.info(\n                f\"Finished epoch {self._epoch+1}/{self._n_epochs} - \"\n                f\"loss training, validation: {self.loss_training:.6f}, {self.loss_validation:.6f} - \"\n                \n            )\n            log.info(f\"Epoch duration: {round(time.perf_counter() - t0, 3)} s\")            \n            \n            self._epoch += 1\n\n\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}            \n        self._status = 'finished'\n        yield YieldLevel.SNAPSHOT\n        self.on_export(self._checkpoint_save_path, 'checkpoint')   \n        sess.close()\n\n \n\n    def test(self, graph:Graph):\n        \"\"\"Testing is done when this function is called. \n        \"\"\"\n\n                  \n        sess = self._sess\n        self._epoch = 0\n\n        def test_step(sess):\n            self._loss_testing, self._squared_error_testing, \\\n                self._squared_variance_testing, self._r_squared_testing, \\\n                self._layer_outputs, self._layer_weights, self._layer_gradients \\\n                = sess.run([\n                    self._loss, self._squared_err,\n                    self._squared_var, self._r_sq,\n                    self._layer_output, self._layer_weight, self._layer_gradient\n                ])\n        \n        # Test loop\n        log.info(\"Entering testing loop\")\n        self._status = 'testing'\n\n        self._testing_iteration = 0\n        sess.run(self._tst_init)                                \n        while not self._stopped:\n            try:\n                test_step(sess)\n                yield YieldLevel.SNAPSHOT\n                self._testing_iteration += 1\n            except tf.errors.OutOfRangeError:\n                self._testing_iteration = 0\n                sess.run(self._tst_init)\n                test_step(sess)   \n                yield YieldLevel.SNAPSHOT\n        \n        self._status = 'finished'\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n        yield YieldLevel.SNAPSHOT\n        sess.close()\n\n \n\n    def run(self, graph: Graph, mode = 'initializing'):\n        \"\"\"Called as the main entry point for training. Responsible for training the model.\n\n        Args:\n            graph: A PerceptiLabs Graph object containing references to all layers objects included in the model produced by this training layer.\n        \"\"\"  \n        self.init_layer(graph, mode)\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)} \n        \n        if mode == 'training':\n            yield from self.train(graph)\n        elif mode == 'testing':\n            yield from self.test(graph)\n\n\n    def on_export(self, path: str, mode: str) -> None:\n        \"\"\"Called when the export button is clicked in the frontend.\n        It is up to the implementing layer to save the model to disk.\n        \n        Args:\n            path: the directory where the exported model will be stored.\n            mode: how to export the model. Made available to frontend via 'export_modes' property.\"\"\"\n\n        log.debug(f\"Export called. Project path = {path}, mode = {mode}\")\n        \n        if mode in ['TFModel', 'TFLite', 'TFQuantized']:\n            pb_path = os.path.join(path, '1')\n            if os.path.exists(pb_path):\n                shutil.rmtree(pb_path)\n            \n            time.sleep(.0000000000000001) #Force your computer to do a clock cycle to avoid Windows permission exception\n\n            os.makedirs(pb_path, exist_ok=True)\n        \n        # Export non-compressed model\n        if mode in ['TFModel']:\n            tf.compat.v1.saved_model.simple_save(self._sess, pb_path, inputs=self._input_tensor_export, outputs=self._output_tensor_export)\n\n        # Export compressed model\n        if mode in ['TFLite']:\n            frozen_path = os.path.join(pb_path, 'frozen_model.pb')\n            converter = tf.lite.TFLiteConverter.from_session(self._sess, list(self._input_tensor_export.values()), list(self._output_tensor_export.values()))\n            converter.post_training_quantize = True\n            tflite_model = converter.convert()\n            with open(frozen_path, \"wb\") as f:\n                f.write(tflite_model)\n        \n        if mode in ['TFQuantized']:\n            def representative_dataset_gen():\n                for i in range(10):\n                    data = list(next(self._export_data_gen).values())\n                    image = np.expand_dims(data[-1], axis=0)\n                    yield [image]\n\n            tflite_path = os.path.join(pb_path, 'tflite_model.tflite')\n            converter = tf.lite.TFLiteConverter.from_session(self._sess, [self._input_tensor_export['output']], [self._output_tensor_export['output']])\n            converter.optimizations = [tf.lite.Optimize.DEFAULT]\n            converter.representative_dataset = representative_dataset_gen\n            converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8, tf.lite.OpsSet.TFLITE_BUILTINS, tf.lite.OpsSet.SELECT_TF_OPS]\n            converter.inference_input_type = tf.uint8\n            converter.inference_output_type = tf.uint8\n            tflite_model = converter.convert()\n            with open(tflite_path, \"wb\") as f:\n                f.write(tflite_model)\n            \n\n        # Export checkpoint\n        if mode in ['checkpoint']:\n            os.makedirs(path, exist_ok=True)\n            for fname in os.listdir(path):\n                if fname.endswith('.json'):\n                    pass\n                else:\n                    os.remove(os.path.join(path,fname))\n            self._checkpoint.save(file_prefix=os.path.join(path, 'model.ckpt'), session=self._sess)\n                \n    def on_stop(self) -> None:\n        \"\"\"Called when the save model button is clicked in the frontend. \n        It is up to the implementing layer to save the model to disk.\"\"\"\n        self.on_export(self._checkpoint_save_path, 'checkpoint')   \n        self._stopped = True\n\n    def on_headless_activate(self) -> None:\n        \"\"\"\"Called when the statistics shown in statistics window are not needed.\n        Purose is to speed up the iteration speed significantly.\"\"\"\n        self._headless = True\n\n        self._layer_outputs = {} \n        self._layer_weights = {}\n        self._layer_biases = {}\n        self._layer_gradients = {}\n\n    def on_headless_deactivate(self) -> None:\n        \"\"\"\"Called when the statistics shown in statistics window are needed.\n        May slow down the iteration speed of the training.\"\"\"\n        import time\n        log.info(f\"Set to headless_off at time {time.time()}\")\n        self._headless = False\n\n    @property\n    def export_modes(self) -> List[str]:\n        \"\"\"Returns the possible modes of exporting a model.\"\"\"        \n        return [\n            'TFModel',\n            'TFLite'\n            'TFQuantized',\n            'checkpoint'            \n        ]\n        \n    @property\n    def is_paused(self) -> None:\n        \"\"\"Returns true when the training is paused.\"\"\"        \n        return self._paused\n\n    @property\n    def batch_size(self):\n        \"\"\" Size of the current training batch \"\"\"        \n        return self._batch_size\n\n    @property\n    def status(self):\n        \"\"\"Called when the pause button is clicked in the frontend. It is up to the implementing layer to pause its execution.\"\"\"        \n        return self._status\n    \n    @property\n    def epoch(self):\n        \"\"\"The current epoch\"\"\"        \n        return self._epoch\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()        \n\n    @property\n    def sample(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"Returns a single data sample\"\"\"        \n        return {'output': np.array(self._loss_training)}\n\n    @property\n    def columns(self) -> List[str]: \n        \"\"\"Column names. Corresponds to each column in a sample \"\"\"\n        return []\n\n    @property\n    def size_training(self) -> int:\n        \"\"\"Returns the size of the training dataset\"\"\"                                    \n        return self._trn_sz_tot\n\n    @property\n    def size_validation(self) -> int:\n        \"\"\"Returns the size of the validation dataset\"\"\"                                            \n        return self._val_sz_tot\n\n    @property\n    def size_testing(self) -> int:\n        \"\"\"Returns the size of the testing dataset\"\"\"\n        return self._tst_sz_tot\n\n    def make_generator_training(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of training data. In the case of a training layer, this typically yields the model output.\"\"\"        \n        yield from []\n        \n    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of validation data. In the case of a training layer, this typically yields the model output.\"\"\"                \n        yield from []\n        \n    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of testing data. In the case of a training layer, this typically yields the model output.\"\"\"                        \n        yield from []\n\n    @property\n    def loss_training(self) -> float:\n        \"\"\"Returns the current loss of the training phase\"\"\"                \n        return self._loss_training\n\n    @property\n    def loss_validation(self) -> float:\n        \"\"\"Returns the current loss of the validation phase\"\"\"                        \n        return self._loss_validation        \n\n    @property\n    def loss_testing(self) -> float:\n        \"\"\"Returns the current loss of the testing phase\"\"\"                \n        return self._loss_testing\n\n    @property\n    def squared_error_training(self) -> float:\n        \"\"\"Returns the current squared error of the training phase\"\"\"\n        return self._squared_error_training\n    \n    @property\n    def squared_error_testing(self) -> float:\n        \"\"\"Returns the current squared error of the testing phase\"\"\"\n        return self._squared_error_testing\n    \n    @property\n    def squared_error_validation(self) -> float:\n        \"\"\"Returns the current squared error of the validation phase\"\"\"\n        return self._squared_error_validation\n\n    @property\n    def squared_variance_training(self) -> float:\n        \"\"\"Returns the current squared variance of the training phase\"\"\"\n        return self._squared_variance_training\n\n    @property\n    def squared_variance_testing(self) -> float:\n        \"\"\"Returns the current squared variance of the testing phase\"\"\"\n        return self._squared_variance_testing\n\n    @property\n    def squared_variance_validation(self) -> float:\n        \"\"\"Returns the current squared variance of the validation phase\"\"\"\n        return self._squared_variance_validation\n\n    @property\n    def r_squared_training(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the training phase\n        \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n\n        \"\"\"\n        return self._r_squared_training\n\n    @property\n    def r_squared_testing(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the testing phase \n        \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n        \n        \"\"\"\n        return self._r_squared_testing\n\n    @property\n    def r_squared_validation(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the validation phase\n    \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n\n        \"\"\"\n\n        return self._r_squared_validation\n\n    @property\n    def layer_weights(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The weight values of each layer in the input Graph during the training.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_weights\n\n    @property\n    def layer_biases(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The bias values of each layer in the input Graph during the training.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_biases\n    \n    @property\n    def layer_gradients(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The gradients with respect to the loss of all trainable variables of each layer in the input Graph.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain gradient name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_gradients\n    \n    @property\n    def layer_outputs(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The output values of each layer in the input Graph during the training (e.g., tf.Tensors evaluated for each iteration)\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain variable name and value pairs. The values must be picklable.\n        \"\"\"\n        return self._layer_outputs\n\n    @property\n    def training_iteration(self) -> int:\n        \"\"\"The current training iteration\"\"\"\n        return self._training_iteration\n\n    @property\n    def validation_iteration(self) -> int:\n        \"\"\"The current validation iteration\"\"\"        \n        return self._validation_iteration\n\n    @property\n    def testing_iteration(self) -> int:\n        \"\"\"The current testing iteration\"\"\"                \n        return self._testing_iteration\n    \n    @property\n    def progress(self) -> float:\n        \"\"\"A number indicating the overall progress of the training\n        \n        Returns:\n            A floating point number between 0 and 1\n        \"\"\"        \n        n_iterations_per_epoch = np.ceil(self.size_training / self.batch_size) + \\\n                                 np.ceil(self.size_validation / self.batch_size)\n        n_iterations_total = self._n_epochs * n_iterations_per_epoch\n\n        iteration = self.epoch * n_iterations_per_epoch + \\\n                    self.training_iteration + self.validation_iteration\n        \n        progress = min(iteration/(n_iterations_total - 1), 1.0) \n        return progress", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 380, "left": 1040}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "TrainRegression", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050697135710": {"name": "predictions", "reference_var_id": "16050695075140", "reference_layer_id": "1605069507514", "isDefault": true}, "16050697135711": {"name": "labels", "reference_var_id": "16050697213300", "reference_layer_id": "1605069721330", "isDefault": true}}, "outputs": {}, "forward_connections": [], "backward_connections": [{"src_id": "1605069507514", "src_var": "output", "dst_var": "predictions"}, {"src_id": "1605069721330", "src_var": "output", "dst_var": "labels"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Labels": "", "Epochs": "10", "N_class": "1", "Loss": "Regression", "Class_weights": "1", "Learning_rate": "0.001", "Optimizer": "ADAM", "Beta_1": "0.9", "Beta_2": "0.999", "Momentum": "0.9", "Decay_steps": "100000", "Decay_rate": "0.96", "Batch_size": 8, "Training_iters": "20000"}, "isSettingsLocked": true, "visited": false}, "1605069721330": {"layerId": "1605069721330", "copyId": null, "copyContainerElement": null, "layerName": "Local_2", "layerType": "Data", "layerSettings": {"accessProperties": {"Columns": [], "Sources": [{"path": "c:/users/arunesh/anaconda3/envs/env7/lib/site-packages/perceptilabs/tutorial_data/NVIDIA_Y.npy", "type": "file"}], "Partition_list": [[70, 20, 10]], "Shuffle_data": true}, "lazy": false}, "layerSettingsTabName": "Computer", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 400, "left": 40}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DataData", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16050697213300": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069713570", "dst_var": "labels"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "Data", "testInfoIsInput": true, "accessProperties": {"Columns": [], "Dataset_size": 3000, "Category": "Local", "Type": "Data", "Sources": [], "PathFake": [], "Partition_list": [], "Shuffle_data": true}}}}, "networkRootFolder": "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA", "apiMeta": {"model_id": 129, "project": 1, "name": "NVIDIA", "created": "2020-11-11T04:30:41.428596Z", "updated": "2020-11-20T08:48:06.590Z", "saved_by": "", "location": "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA", "saved_version_location": ""}, "networkSnapshots": [{"1605069346760": {"layerId": "1605069346760", "copyId": null, "copyContainerElement": null, "layerName": "Local_1", "layerType": "Data", "layerSettings": {"accessProperties": {"Columns": [], "Sources": [{"path": "c:/users/arunesh/anaconda3/envs/env7/lib/site-packages/perceptilabs/tutorial_data/NVIDIA_X.npy", "type": "file"}], "Partition_list": [[70, 20, 10]], "Shuffle_data": true}, "lazy": false}, "layerSettingsTabName": "Computer", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": true, "position": {"top": 10.2, "left": 20.4}, "tutorialId": "", "OutputDim": "66x200x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 39600, "series": [{"type": "rgba", "x_data": null, "data": [201, 203, 221, 255, 201, 203, 221, 255, 199, 203, 221, 255, 209, 203, 221, 255, 237, 203, 219, 255, 246, 203, 219, 255, 231, 203, 221, 255, 237, 203, 219, 255, 244, 203, 219, 255, 245, 201, 219, 255, 251, 197, 219, 255, 254, 197, 217, 255, 251, 197, 219, 255, 242, 197, 221, 255, 229, 197, 221, 255, 218, 199, 221, 255, 218, 199, 221, 255, 220, 201, 221, 255, 223, 201, 221, 255, 229, 203, 219, 255, 231, 203, 216, 255, 230, 203, 214, 255, 220, 203, 214, 255, 212, 203, 214, 255, 212, 203, 214, 255, 213, 203, 214, 255, 218, 203, 214, 255, 223, 203, 214, 255, 219, 203, 214, 255, 210, 203, 216, 255, 204, 201, 219, 255, 206, 199, 221, 255, 219, 199, 221, 255, 230, 199, 221, 255, 228, 199, 221, 255, 216, 199, 221, 255, 207, 199, 221, 255, 203, 199, 221, 255, 206, 199, 221, 255, 209, 199, 221, 255, 212, 195, 219, 255, 208, 197, 219, 255, 207, 197, 219, 255, 226, 199, 217, 255, 249, 201, 216, 255, 251, 201, 216, 255, 251, 205, 216, 255, 249, 205, 214, 255, 240, 205, 213, 255, 231, 205, 213, 255, 219, 203, 214, 255, 215, 203, 216, 255, 217, 203, 216, 255, 208, 203, 216, 255, 200, 205, 216, 255, 197, 205, 216, 255, 196, 207, 216, 255, 198, 207, 216, 255, 190, 207, 216, 255, 185, 207, 216, 255, 178, 207, 214, 255, 181, 208, 216, 255, 192, 210, 217, 255, 197, 210, 221, 255, 122, 210, 221, 255, 121, 208, 221, 255, 198, 207, 221, 255, 204, 205, 217, 255, 192, 203, 216, 255, 180, 201, 214, 255, 177, 203, 216, 255, 179, 203, 216, 255, 183, 201, 216, 255, 190, 201, 216, 255, 212, 201, 216, 255, 226, 199, 216, 255, 237, 199, 216, 255, 247, 197, 216, 255, 251, 199, 216, 255, 248, 199, 216, 255, 241, 201, 214, 255, 223, 201, 214, 255, 208, 201, 214, 255, 199, 203, 214, 255, 195, 203, 214, 255, 182, 205, 214, 255, 178, 207, 214, 255, 184, 207, 214, 255, 198, 207, 214, 255, 208, 207, 214, 255, 217, 207, 213, 255, 229, 203, 213, 255, 222, 199, 214, 255, 213, 199, 216, 255, 209, 205, 216, 255, 190, 212, 217, 255, 95, 220, 217, 255, 132, 212, 217, 255, 210, 205, 219, 255, 220, 197, 219, 255, 214, 184, 224, 255, 195, 182, 226, 255, 173, 184, 227, 255, 162, 188, 229, 255, 157, 190, 229, 255, 157, 192, 227, 255, 148, 195, 224, 255, 137, 197, 221, 255, 129, 199, 219, 255, 117, 199, 217, 255, 98, 197, 219, 255, 90, 199, 219, 255, 80, 201, 217, 255, 56, 207, 216, 255, 59, 208, 214, 255, 58, 207, 216, 255, 58, 205, 217, 255, 53, 199, 219, 255, 73, 195, 222, 255, 104, 190, 226, 255, 111, 188, 230, 255, 112, 188, 232, 255, 112, 188, 232, 255, 112, 188, 232, 255, 114, 188, 232, 255, 111, 188, 232, 255, 100, 188, 232, 255, 100, 188, 232, 255, 96, 190, 232, 255, 94, 186, 234, 255, 99, 181, 235, 255, 114, 179, 237, 255, 125, 181, 237, 255, 124, 182, 237, 255, 116, 184, 237, 255, 110, 184, 237, 255, 104, 186, 237, 255, 101, 186, 237, 255, 99, 188, 237, 255, 93, 190, 235, 255, 92, 199, 235, 255, 88, 205, 235, 255, 83, 207, 234, 255, 78, 210, 232, 255, 73, 212, 230, 255, 69, 214, 230, 255, 65, 214, 229, 255, 62, 212, 227, 255, 65, 210, 227, 255, 68, 207, 227, 255, 68, 205, 227, 255, 70, 203, 227, 255, 75, 201, 227, 255, 77, 199, 229, 255, 83, 197, 230, 255, 89, 195, 232, 255, 93, 194, 232, 255, 98, 192, 234, 255, 105, 192, 237, 255, 110, 190, 235, 255, 110, 192, 232, 255, 104, 197, 229, 255, 85, 203, 226, 255, 63, 205, 222, 255, 68, 199, 219, 255, 66, 195, 219, 255, 63, 192, 221, 255, 70, 194, 222, 255, 72, 199, 226, 255, 67, 205, 227, 255, 65, 207, 227, 255, 63, 207, 227, 255, 62, 205, 229, 255, 65, 203, 229, 255, 69, 201, 229, 255, 74, 201, 229, 255, 83, 197, 230, 255, 94, 197, 232, 255, 102, 195, 232, 255, 118, 194, 232, 255, 140, 194, 230, 255, 170, 194, 229, 255, 196, 194, 227, 255, 216, 195, 227, 255, 225, 197, 224, 255, 225, 199, 222, 255, 223, 203, 219, 255, 214, 205, 217, 255, 214, 205, 216, 255, 214, 208, 213, 255, 207, 210, 208, 255, 200, 214, 209, 255, 178, 214, 213, 255, 122, 214, 216, 255, 162, 210, 219, 255, 182, 207, 219, 255, 183, 203, 219, 255, 188, 197, 217, 255, 192, 192, 217, 255, 193, 190, 216, 255, 205, 203, 221, 255, 204, 203, 221, 255, 198, 203, 221, 255, 203, 203, 221, 255, 222, 203, 221, 255, 232, 203, 221, 255, 223, 203, 221, 255, 223, 203, 221, 255, 228, 203, 219, 255, 230, 201, 221, 255, 238, 195, 221, 255, 243, 195, 219, 255, 240, 195, 219, 255, 230, 195, 221, 255, 218, 197, 221, 255, 210, 197, 221, 255, 207, 199, 221, 255, 205, 199, 221, 255, 207, 201, 221, 255, 213, 201, 219, 255, 219, 203, 216, 255, 220, 203, 214, 255, 216, 203, 214, 255, 211, 203, 214, 255, 211, 203, 214, 255, 213, 203, 214, 255, 218, 203, 214, 255, 225, 203, 214, 255, 229, 203, 214, 255, 228, 203, 216, 255, 225, 201, 219, 255, 227, 199, 219, 255, 236, 199, 219, 255, 242, 199, 219, 255, 240, 199, 219, 255, 228, 199, 219, 255, 216, 199, 221, 255, 204, 199, 221, 255, 199, 199, 221, 255, 201, 199, 221, 255, 205, 197, 221, 255, 203, 195, 219, 255, 202, 197, 219, 255, 217, 199, 217, 255, 232, 201, 216, 255, 235, 201, 216, 255, 229, 205, 216, 255, 232, 205, 213, 255, 231, 205, 211, 255, 230, 205, 211, 255, 228, 203, 214, 255, 222, 203, 216, 255, 224, 203, 216, 255, 211, 203, 216, 255, 197, 205, 216, 255, 196, 205, 216, 255, 198, 207, 216, 255, 190, 207, 216, 255, 177, 207, 216, 255, 169, 207, 216, 255, 168, 208, 214, 255, 181, 208, 216, 255, 185, 210, 217, 255, 193, 212, 219, 255, 120, 212, 221, 255, 119, 210, 221, 255, 196, 207, 219, 255, 192, 205, 217, 255, 182, 203, 216, 255, 172, 201, 214, 255, 174, 203, 216, 255, 180, 203, 216, 255, 183, 201, 216, 255, 187, 201, 216, 255, 196, 201, 216, 255, 208, 199, 216, 255, 216, 199, 216, 255, 229, 197, 216, 255, 238, 197, 216, 255, 236, 199, 216, 255, 230, 201, 214, 255, 219, 201, 214, 255, 208, 201, 214, 255, 200, 203, 214, 255, 195, 205, 214, 255, 183, 205, 214, 255, 179, 207, 214, 255, 177, 207, 214, 255, 186, 207, 214, 255, 195, 208, 213, 255, 202, 207, 211, 255, 209, 203, 213, 255, 207, 201, 213, 255, 201, 201, 213, 255, 197, 207, 214, 255, 178, 214, 216, 255, 91, 218, 216, 255, 130, 214, 217, 255, 204, 207, 217, 255, 208, 197, 219, 255, 195, 184, 222, 255, 177, 182, 226, 255, 164, 184, 227, 255, 156, 186, 229, 255, 154, 190, 229, 255, 151, 192, 229, 255, 123, 195, 226, 255, 111, 197, 224, 255, 113, 199, 221, 255, 95, 199, 219, 255, 76, 199, 219, 255, 77, 201, 219, 255, 79, 203, 217, 255, 54, 207, 216, 255, 54, 208, 214, 255, 53, 208, 214, 255, 54, 205, 217, 255, 55, 199, 219, 255, 85, 194, 222, 255, 114, 190, 226, 255, 119, 184, 232, 255, 119, 182, 234, 255, 120, 182, 234, 255, 121, 184, 234, 255, 121, 186, 234, 255, 119, 186, 234, 255, 115, 190, 234, 255, 110, 190, 234, 255, 104, 192, 234, 255, 103, 192, 234, 255, 103, 184, 235, 255, 110, 182, 235, 255, 115, 184, 235, 255, 117, 184, 235, 255, 115, 186, 234, 255, 111, 188, 232, 255, 108, 190, 232, 255, 102, 190, 232, 255, 100, 192, 232, 255, 96, 194, 232, 255, 94, 197, 235, 255, 89, 199, 234, 255, 84, 203, 234, 255, 80, 205, 232, 255, 75, 208, 230, 255, 73, 210, 229, 255, 70, 208, 227, 255, 69, 208, 226, 255, 70, 207, 226, 255, 73, 205, 226, 255, 74, 207, 222, 255, 74, 208, 222, 255, 76, 205, 224, 255, 76, 205, 226, 255, 80, 203, 227, 255, 85, 201, 229, 255, 86, 199, 229, 255, 88, 197, 230, 255, 92, 195, 232, 255, 94, 194, 232, 255, 95, 194, 230, 255, 94, 199, 229, 255, 84, 205, 226, 255, 74, 207, 221, 255, 72, 203, 217, 255, 67, 197, 217, 255, 68, 194, 219, 255, 70, 195, 221, 255, 70, 201, 222, 255, 68, 207, 224, 255, 67, 212, 222, 255, 66, 212, 224, 255, 66, 210, 224, 255, 67, 208, 224, 255, 69, 207, 226, 255, 73, 203, 227, 255, 75, 201, 227, 255, 80, 199, 229, 255, 86, 197, 230, 255, 97, 197, 230, 255, 115, 192, 230, 255, 139, 192, 230, 255, 163, 194, 229, 255, 187, 195, 227, 255, 210, 197, 224, 255, 224, 199, 222, 255, 227, 203, 219, 255, 217, 203, 217, 255, 214, 205, 217, 255, 213, 207, 214, 255, 207, 210, 209, 255, 203, 210, 209, 255, 179, 210, 213, 255, 134, 210, 216, 255, 172, 208, 219, 255, 186, 205, 219, 255, 189, 199, 219, 255, 195, 192, 219, 255, 200, 186, 217, 255, 200, 184, 217, 255, 214, 199, 222, 255, 207, 199, 222, 255, 195, 199, 222, 255, 193, 199, 222, 255, 200, 199, 224, 255, 209, 199, 224, 255, 206, 199, 224, 255, 204, 199, 224, 255, 210, 199, 224, 255, 213, 199, 222, 255, 215, 195, 221, 255, 220, 195, 219, 255, 219, 195, 221, 255, 210, 195, 221, 255, 202, 195, 222, 255, 198, 197, 222, 255, 197, 197, 222, 255, 192, 199, 222, 255, 189, 199, 221, 255, 194, 201, 219, 255, 202, 203, 214, 255, 210, 203, 214, 255, 216, 203, 214, 255, 218, 203, 214, 255, 216, 203, 214, 255, 218, 203, 214, 255, 222, 203, 214, 255, 233, 203, 214, 255, 244, 203, 214, 255, 249, 203, 214, 255, 249, 201, 216, 255, 248, 199, 216, 255, 248, 201, 217, 255, 249, 201, 216, 255, 248, 199, 217, 255, 244, 201, 217, 255, 235, 199, 219, 255, 218, 199, 219, 255, 205, 199, 219, 255, 202, 199, 219, 255, 204, 195, 219, 255, 199, 195, 217, 255, 197, 197, 217, 255, 209, 199, 216, 255, 210, 201, 214, 255, 199, 203, 214, 255, 163, 205, 213, 255, 176, 205, 211, 255, 207, 205, 209, 255, 213, 205, 211, 255, 215, 205, 214, 255, 192, 205, 216, 255, 212, 205, 216, 255, 206, 205, 216, 255, 163, 205, 216, 255, 160, 207, 216, 255, 181, 207, 216, 255, 152, 207, 216, 255, 121, 207, 216, 255, 114, 207, 214, 255, 138, 208, 213, 255, 167, 210, 214, 255, 138, 212, 216, 255, 141, 212, 217, 255, 97, 212, 219, 255, 115, 210, 219, 255, 172, 208, 217, 255, 136, 207, 217, 255, 128, 203, 214, 255, 123, 201, 214, 255, 128, 203, 214, 255, 142, 203, 214, 255, 171, 203, 214, 255, 160, 201, 214, 255, 135, 201, 216, 255, 154, 201, 216, 255, 179, 201, 216, 255, 195, 199, 216, 255, 211, 199, 216, 255, 178, 199, 216, 255, 156, 201, 213, 255, 162, 201, 213, 255, 198, 203, 213, 255, 207, 203, 213, 255, 197, 205, 213, 255, 168, 207, 213, 255, 136, 207, 213, 255, 127, 208, 213, 255, 129, 210, 213, 255, 135, 208, 211, 255, 139, 208, 211, 255, 136, 205, 211, 255, 139, 203, 211, 255, 137, 203, 211, 255, 134, 207, 214, 255, 122, 214, 214, 255, 70, 218, 216, 255, 97, 214, 216, 255, 139, 207, 216, 255, 139, 201, 217, 255, 127, 192, 222, 255, 120, 190, 222, 255, 116, 190, 226, 255, 113, 190, 227, 255, 113, 194, 227, 255, 109, 195, 229, 255, 76, 197, 227, 255, 68, 199, 224, 255, 77, 199, 222, 255, 61, 199, 221, 255, 50, 201, 221, 255, 58, 203, 219, 255, 71, 205, 219, 255, 57, 205, 217, 255, 56, 207, 216, 255, 57, 207, 216, 255, 53, 205, 217, 255, 59, 199, 219, 255, 108, 192, 221, 255, 130, 186, 226, 255, 132, 179, 232, 255, 132, 179, 234, 255, 132, 179, 234, 255, 132, 181, 234, 255, 132, 184, 234, 255, 131, 186, 234, 255, 131, 190, 234, 255, 125, 194, 234, 255, 120, 195, 234, 255, 120, 195, 234, 255, 117, 188, 232, 255, 116, 188, 230, 255, 116, 188, 230, 255, 118, 190, 230, 255, 120, 190, 229, 255, 120, 194, 229, 255, 122, 195, 229, 255, 113, 195, 229, 255, 110, 197, 229, 255, 107, 195, 229, 255, 102, 192, 234, 255, 98, 192, 234, 255, 95, 195, 232, 255, 93, 199, 230, 255, 91, 203, 229, 255, 90, 203, 229, 255, 90, 203, 227, 255, 89, 201, 226, 255, 88, 199, 226, 255, 89, 199, 224, 255, 90, 208, 221, 255, 88, 210, 221, 255, 86, 210, 221, 255, 83, 208, 222, 255, 85, 207, 224, 255, 86, 205, 224, 255, 86, 203, 226, 255, 86, 201, 226, 255, 86, 201, 227, 255, 86, 199, 229, 255, 88, 197, 230, 255, 89, 199, 229, 255, 88, 205, 226, 255, 90, 207, 221, 255, 86, 203, 217, 255, 82, 199, 217, 255, 83, 195, 217, 255, 81, 195, 219, 255, 70, 201, 221, 255, 75, 207, 221, 255, 79, 214, 221, 255, 77, 214, 221, 255, 76, 212, 221, 255, 77, 212, 221, 255, 79, 208, 224, 255, 78, 207, 224, 255, 75, 203, 226, 255, 75, 203, 227, 255, 75, 199, 229, 255, 81, 197, 229, 255, 91, 192, 232, 255, 104, 192, 232, 255, 119, 192, 230, 255, 133, 194, 229, 255, 160, 195, 226, 255, 190, 199, 224, 255, 209, 201, 221, 255, 207, 203, 219, 255, 205, 203, 219, 255, 204, 205, 216, 255, 200, 205, 209, 255, 200, 205, 211, 255, 161, 207, 213, 255, 139, 205, 217, 255, 184, 201, 219, 255, 199, 195, 221, 255, 202, 190, 221, 255, 206, 182, 221, 255, 212, 179, 221, 255, 212, 175, 219, 255, 221, 194, 224, 255, 209, 195, 224, 255, 196, 197, 224, 255, 194, 197, 226, 255, 198, 199, 227, 255, 201, 199, 227, 255, 198, 199, 227, 255, 196, 199, 229, 255, 202, 197, 229, 255, 204, 199, 226, 255, 202, 201, 216, 255, 203, 201, 214, 255, 200, 201, 216, 255, 196, 199, 217, 255, 196, 199, 219, 255, 200, 199, 219, 255, 204, 199, 219, 255, 201, 201, 217, 255, 199, 203, 216, 255, 199, 203, 216, 255, 203, 203, 214, 255, 214, 203, 214, 255, 223, 203, 214, 255, 228, 203, 214, 255, 227, 203, 214, 255, 227, 203, 214, 255, 232, 203, 214, 255, 244, 203, 214, 255, 251, 203, 214, 255, 252, 203, 214, 255, 250, 201, 214, 255, 247, 201, 214, 255, 239, 201, 214, 255, 235, 203, 214, 255, 224, 203, 214, 255, 223, 203, 214, 255, 230, 201, 216, 255, 223, 199, 216, 255, 219, 195, 216, 255, 216, 195, 216, 255, 215, 195, 216, 255, 204, 197, 214, 255, 189, 201, 213, 255, 192, 205, 211, 255, 164, 207, 209, 255, 131, 208, 209, 255, 88, 207, 208, 255, 100, 207, 208, 255, 134, 205, 208, 255, 138, 205, 209, 255, 138, 208, 213, 255, 115, 210, 213, 255, 145, 208, 213, 255, 161, 208, 213, 255, 101, 208, 213, 255, 93, 208, 213, 255, 116, 208, 213, 255, 90, 207, 213, 255, 61, 207, 213, 255, 59, 208, 211, 255, 101, 212, 208, 255, 125, 214, 206, 255, 77, 214, 209, 255, 73, 214, 211, 255, 63, 214, 211, 255, 96, 212, 213, 255, 117, 210, 213, 255, 71, 208, 213, 255, 66, 207, 213, 255, 66, 205, 211, 255, 68, 201, 208, 255, 82, 203, 208, 255, 117, 203, 209, 255, 99, 205, 209, 255, 71, 205, 213, 255, 87, 205, 214, 255, 116, 205, 216, 255, 134, 205, 217, 255, 168, 203, 217, 255, 96, 205, 217, 255, 66, 207, 217, 255, 77, 207, 217, 255, 159, 205, 217, 255, 206, 205, 217, 255, 163, 207, 216, 255, 108, 208, 214, 255, 71, 208, 214, 255, 66, 212, 214, 255, 63, 214, 213, 255, 66, 212, 214, 255, 68, 208, 214, 255, 61, 205, 214, 255, 65, 205, 214, 255, 66, 205, 214, 255, 61, 207, 216, 255, 58, 210, 216, 255, 46, 212, 216, 255, 65, 210, 216, 255, 74, 207, 216, 255, 75, 203, 217, 255, 72, 201, 219, 255, 74, 199, 219, 255, 73, 199, 221, 255, 71, 197, 222, 255, 68, 201, 222, 255, 59, 199, 224, 255, 46, 201, 222, 255, 48, 203, 221, 255, 59, 203, 221, 255, 57, 203, 221, 255, 56, 201, 222, 255, 68, 201, 222, 255, 96, 195, 222, 255, 100, 195, 222, 255, 100, 197, 221, 255, 100, 195, 221, 255, 85, 197, 221, 255, 85, 197, 222, 255, 132, 188, 224, 255, 152, 186, 226, 255, 156, 184, 229, 255, 155, 182, 229, 255, 154, 182, 230, 255, 153, 186, 230, 255, 151, 186, 230, 255, 150, 190, 230, 255, 147, 192, 230, 255, 146, 194, 230, 255, 145, 195, 230, 255, 145, 197, 230, 255, 143, 192, 229, 255, 144, 192, 227, 255, 144, 194, 227, 255, 144, 194, 229, 255, 145, 194, 227, 255, 148, 195, 227, 255, 154, 197, 227, 255, 144, 199, 227, 255, 141, 199, 226, 255, 141, 197, 227, 255, 138, 192, 230, 255, 136, 190, 230, 255, 134, 194, 229, 255, 133, 194, 229, 255, 133, 197, 227, 255, 132, 197, 227, 255, 132, 195, 227, 255, 132, 194, 227, 255, 128, 194, 226, 255, 126, 194, 224, 255, 126, 201, 222, 255, 126, 203, 222, 255, 124, 201, 222, 255, 121, 201, 222, 255, 120, 201, 222, 255, 119, 199, 222, 255, 120, 199, 222, 255, 119, 197, 222, 255, 118, 197, 224, 255, 118, 197, 226, 255, 118, 194, 230, 255, 119, 195, 230, 255, 118, 199, 229, 255, 122, 199, 227, 255, 121, 197, 226, 255, 117, 194, 226, 255, 115, 192, 226, 255, 115, 192, 227, 255, 102, 194, 229, 255, 108, 197, 229, 255, 113, 201, 227, 255, 111, 201, 227, 255, 110, 199, 227, 255, 110, 199, 226, 255, 110, 197, 227, 255, 108, 195, 227, 255, 105, 194, 227, 255, 97, 195, 227, 255, 97, 194, 227, 255, 103, 192, 229, 255, 105, 190, 230, 255, 111, 188, 232, 255, 117, 190, 230, 255, 116, 190, 229, 255, 120, 192, 227, 255, 142, 194, 227, 255, 167, 195, 224, 255, 180, 197, 224, 255, 196, 197, 222, 255, 195, 197, 221, 255, 190, 195, 216, 255, 196, 194, 216, 255, 140, 195, 219, 255, 133, 194, 221, 255, 197, 188, 224, 255, 211, 184, 226, 255, 211, 179, 227, 255, 211, 173, 227, 255, 213, 169, 229, 255, 213, 168, 229, 255, 212, 192, 221, 255, 207, 194, 222, 255, 203, 195, 222, 255, 204, 197, 224, 255, 208, 201, 226, 255, 209, 201, 226, 255, 206, 201, 227, 255, 202, 201, 229, 255, 200, 197, 229, 255, 198, 199, 226, 255, 193, 207, 211, 255, 190, 207, 209, 255, 186, 205, 211, 255, 185, 203, 214, 255, 192, 201, 217, 255, 198, 201, 217, 255, 205, 201, 216, 255, 212, 203, 214, 255, 214, 205, 213, 255, 215, 205, 211, 255, 218, 203, 213, 255, 226, 203, 213, 255, 230, 203, 213, 255, 232, 201, 214, 255, 233, 201, 216, 255, 237, 201, 216, 255, 241, 201, 216, 255, 250, 199, 216, 255, 253, 199, 216, 255, 252, 199, 216, 255, 247, 199, 213, 255, 242, 201, 211, 255, 229, 203, 211, 255, 203, 205, 211, 255, 157, 205, 211, 255, 154, 205, 211, 255, 187, 205, 211, 255, 198, 199, 211, 255, 206, 197, 211, 255, 215, 195, 211, 255, 217, 195, 211, 255, 202, 199, 211, 255, 152, 205, 209, 255, 122, 208, 206, 255, 93, 212, 204, 255, 67, 214, 204, 255, 54, 212, 206, 255, 53, 210, 208, 255, 62, 205, 209, 255, 62, 205, 209, 255, 61, 210, 213, 255, 60, 212, 213, 255, 75, 212, 211, 255, 92, 212, 211, 255, 59, 210, 213, 255, 53, 208, 213, 255, 58, 207, 213, 255, 51, 207, 211, 255, 44, 207, 211, 255, 44, 208, 209, 255, 69, 214, 204, 255, 77, 214, 203, 255, 53, 214, 204, 255, 50, 212, 206, 255, 47, 212, 208, 255, 65, 210, 209, 255, 60, 212, 208, 255, 42, 210, 209, 255, 43, 208, 211, 255, 44, 208, 209, 255, 47, 205, 204, 255, 51, 207, 204, 255, 60, 207, 206, 255, 53, 208, 209, 255, 48, 210, 213, 255, 56, 208, 216, 255, 59, 208, 216, 255, 80, 205, 219, 255, 131, 201, 221, 255, 73, 203, 221, 255, 56, 207, 222, 255, 56, 207, 222, 255, 128, 201, 222, 255, 186, 201, 222, 255, 118, 205, 219, 255, 60, 208, 217, 255, 49, 208, 216, 255, 42, 212, 216, 255, 40, 216, 214, 255, 51, 216, 216, 255, 58, 208, 217, 255, 55, 205, 219, 255, 41, 208, 217, 255, 39, 207, 217, 255, 40, 208, 217, 255, 51, 210, 217, 255, 66, 207, 217, 255, 102, 203, 219, 255, 107, 199, 219, 255, 109, 199, 219, 255, 111, 199, 217, 255, 117, 197, 221, 255, 111, 199, 219, 255, 108, 199, 219, 255, 108, 203, 219, 255, 81, 205, 219, 255, 71, 205, 219, 255, 79, 208, 217, 255, 108, 208, 217, 255, 121, 207, 219, 255, 122, 197, 224, 255, 130, 194, 224, 255, 158, 190, 226, 255, 162, 188, 226, 255, 162, 188, 227, 255, 160, 188, 226, 255, 148, 192, 224, 255, 143, 192, 224, 255, 166, 186, 226, 255, 192, 188, 224, 255, 207, 194, 222, 255, 206, 194, 222, 255, 205, 194, 222, 255, 204, 194, 222, 255, 203, 194, 222, 255, 200, 195, 224, 255, 199, 195, 224, 255, 199, 195, 224, 255, 200, 197, 224, 255, 200, 197, 224, 255, 200, 197, 226, 255, 200, 199, 224, 255, 195, 197, 226, 255, 188, 197, 227, 255, 189, 199, 226, 255, 189, 199, 227, 255, 192, 201, 227, 255, 189, 201, 226, 255, 189, 201, 224, 255, 188, 199, 226, 255, 188, 195, 227, 255, 188, 195, 227, 255, 186, 195, 226, 255, 185, 195, 227, 255, 185, 195, 226, 255, 185, 197, 226, 255, 183, 195, 226, 255, 184, 194, 226, 255, 179, 194, 226, 255, 180, 195, 222, 255, 179, 197, 226, 255, 179, 195, 227, 255, 178, 197, 226, 255, 177, 195, 226, 255, 176, 195, 226, 255, 175, 197, 226, 255, 174, 197, 224, 255, 174, 197, 224, 255, 176, 197, 224, 255, 179, 197, 224, 255, 180, 195, 230, 255, 182, 195, 232, 255, 184, 197, 232, 255, 187, 195, 230, 255, 186, 195, 232, 255, 177, 194, 232, 255, 168, 194, 235, 255, 173, 192, 237, 255, 173, 192, 237, 255, 173, 190, 237, 255, 176, 186, 237, 255, 175, 184, 235, 255, 174, 184, 235, 255, 174, 184, 234, 255, 173, 184, 234, 255, 170, 184, 232, 255, 163, 186, 230, 255, 119, 192, 227, 255, 131, 188, 227, 255, 146, 186, 227, 255, 137, 188, 229, 255, 150, 188, 229, 255, 142, 188, 229, 255, 129, 188, 229, 255, 115, 190, 229, 255, 129, 190, 229, 255, 158, 192, 227, 255, 172, 192, 227, 255, 195, 192, 227, 255, 184, 194, 226, 255, 181, 197, 224, 255, 198, 197, 222, 255, 151, 197, 224, 255, 151, 194, 226, 255, 207, 188, 229, 255, 214, 184, 230, 255, 213, 181, 234, 255, 210, 179, 235, 255, 208, 175, 237, 255, 207, 175, 237, 255, 200, 197, 213, 255, 202, 199, 213, 255, 204, 203, 214, 255, 205, 205, 216, 255, 205, 207, 216, 255, 205, 207, 217, 255, 206, 207, 217, 255, 204, 207, 219, 255, 197, 203, 221, 255, 190, 203, 217, 255, 185, 203, 214, 255, 185, 201, 214, 255, 181, 199, 216, 255, 180, 197, 217, 255, 185, 197, 219, 255, 187, 197, 221, 255, 192, 197, 219, 255, 207, 201, 216, 255, 215, 203, 213, 255, 225, 203, 213, 255, 229, 199, 214, 255, 235, 199, 216, 255, 240, 199, 216, 255, 237, 197, 216, 255, 239, 197, 217, 255, 244, 195, 219, 255, 246, 195, 219, 255, 251, 195, 221, 255, 252, 195, 221, 255, 250, 195, 219, 255, 246, 195, 216, 255, 243, 197, 214, 255, 222, 201, 214, 255, 141, 203, 214, 255, 82, 207, 214, 255, 82, 207, 214, 255, 108, 207, 214, 255, 134, 205, 214, 255, 143, 201, 214, 255, 178, 199, 214, 255, 189, 195, 214, 255, 159, 197, 214, 255, 92, 203, 211, 255, 62, 207, 208, 255, 57, 212, 208, 255, 51, 212, 208, 255, 49, 210, 208, 255, 44, 208, 211, 255, 42, 207, 213, 255, 50, 205, 214, 255, 44, 208, 214, 255, 47, 210, 214, 255, 49, 210, 214, 255, 53, 208, 214, 255, 47, 207, 216, 255, 45, 207, 214, 255, 45, 207, 214, 255, 41, 207, 214, 255, 47, 205, 214, 255, 47, 205, 213, 255, 45, 210, 209, 255, 50, 210, 209, 255, 47, 208, 209, 255, 45, 207, 211, 255, 43, 207, 213, 255, 44, 207, 213, 255, 51, 208, 214, 255, 58, 208, 214, 255, 61, 207, 216, 255, 61, 210, 214, 255, 54, 212, 211, 255, 41, 214, 211, 255, 42, 214, 213, 255, 41, 210, 214, 255, 40, 210, 217, 255, 67, 207, 219, 255, 75, 205, 221, 255, 95, 195, 224, 255, 142, 186, 226, 255, 122, 186, 226, 255, 117, 192, 226, 255, 116, 194, 224, 255, 144, 190, 224, 255, 172, 190, 224, 255, 128, 194, 219, 255, 87, 199, 217, 255, 77, 201, 217, 255, 57, 207, 216, 255, 58, 208, 214, 255, 91, 208, 216, 255, 116, 205, 219, 255, 103, 203, 221, 255, 63, 208, 219, 255, 53, 210, 219, 255, 63, 210, 219, 255, 109, 208, 219, 255, 140, 203, 219, 255, 169, 197, 219, 255, 175, 194, 221, 255, 175, 194, 221, 255, 175, 194, 221, 255, 180, 194, 221, 255, 174, 195, 219, 255, 173, 197, 219, 255, 188, 201, 219, 255, 178, 207, 217, 255, 172, 207, 217, 255, 176, 208, 217, 255, 200, 210, 216, 255, 211, 208, 217, 255, 210, 197, 222, 255, 212, 195, 222, 255, 218, 195, 222, 255, 217, 195, 224, 255, 217, 194, 224, 255, 214, 194, 224, 255, 214, 195, 222, 255, 210, 195, 222, 255, 204, 195, 224, 255, 217, 197, 221, 255, 230, 201, 219, 255, 231, 203, 219, 255, 230, 203, 219, 255, 230, 203, 219, 255, 229, 203, 219, 255, 229, 201, 221, 255, 228, 201, 221, 255, 228, 201, 221, 255, 228, 201, 221, 255, 227, 201, 221, 255, 227, 203, 224, 255, 225, 205, 224, 255, 209, 205, 224, 255, 192, 203, 226, 255, 189, 205, 226, 255, 190, 205, 226, 255, 189, 205, 226, 255, 189, 207, 224, 255, 188, 207, 224, 255, 187, 205, 226, 255, 188, 201, 227, 255, 190, 201, 226, 255, 187, 201, 226, 255, 189, 201, 227, 255, 186, 203, 224, 255, 187, 203, 224, 255, 187, 203, 224, 255, 186, 203, 224, 255, 185, 203, 222, 255, 188, 205, 222, 255, 197, 205, 227, 255, 199, 205, 230, 255, 192, 205, 229, 255, 187, 203, 230, 255, 187, 203, 230, 255, 185, 203, 230, 255, 180, 201, 229, 255, 184, 201, 229, 255, 189, 201, 229, 255, 197, 201, 229, 255, 204, 201, 230, 255, 208, 201, 230, 255, 214, 201, 232, 255, 218, 201, 230, 255, 216, 201, 230, 255, 208, 199, 232, 255, 198, 199, 237, 255, 202, 197, 239, 255, 204, 197, 239, 255, 207, 194, 239, 255, 209, 182, 240, 255, 209, 181, 242, 255, 209, 181, 240, 255, 208, 181, 239, 255, 208, 181, 237, 255, 206, 181, 235, 255, 186, 186, 232, 255, 110, 197, 229, 255, 126, 192, 229, 255, 128, 192, 227, 255, 103, 197, 227, 255, 147, 194, 227, 255, 115, 194, 229, 255, 98, 192, 229, 255, 85, 194, 229, 255, 115, 194, 229, 255, 162, 194, 229, 255, 169, 194, 229, 255, 184, 194, 229, 255, 179, 197, 229, 255, 179, 210, 226, 255, 190, 214, 226, 255, 171, 212, 227, 255, 172, 208, 229, 255, 199, 207, 230, 255, 199, 203, 234, 255, 198, 201, 235, 255, 196, 197, 239, 255, 194, 195, 239, 255, 193, 195, 240, 255, 208, 203, 206, 255, 205, 205, 206, 255, 199, 207, 206, 255, 195, 208, 206, 255, 193, 210, 208, 255, 190, 212, 208, 255, 192, 210, 209, 255, 193, 208, 209, 255, 188, 207, 209, 255, 185, 205, 213, 255, 186, 195, 221, 255, 187, 192, 222, 255, 186, 192, 224, 255, 184, 190, 226, 255, 186, 190, 226, 255, 187, 192, 224, 255, 194, 194, 221, 255, 186, 195, 217, 255, 180, 199, 216, 255, 197, 199, 214, 255, 224, 195, 214, 255, 233, 194, 216, 255, 242, 194, 216, 255, 246, 194, 217, 255, 246, 194, 217, 255, 242, 192, 221, 255, 233, 188, 222, 255, 231, 188, 224, 255, 230, 188, 224, 255, 226, 186, 224, 255, 224, 188, 219, 255, 222, 190, 219, 255, 199, 195, 217, 255, 88, 203, 217, 255, 50, 205, 217, 255, 51, 205, 219, 255, 53, 207, 219, 255, 67, 207, 219, 255, 73, 207, 217, 255, 136, 203, 217, 255, 165, 194, 221, 255, 101, 197, 219, 255, 53, 203, 216, 255, 49, 205, 214, 255, 50, 208, 213, 255, 46, 208, 213, 255, 45, 208, 214, 255, 44, 207, 216, 255, 47, 207, 217, 255, 86, 201, 219, 255, 61, 205, 217, 255, 46, 207, 217, 255, 53, 205, 219, 255, 41, 207, 217, 255, 41, 207, 217, 255, 42, 207, 217, 255, 57, 208, 217, 255, 66, 201, 219, 255, 81, 199, 219, 255, 79, 199, 219, 255, 44, 205, 216, 255, 54, 205, 217, 255, 45, 205, 217, 255, 52, 201, 219, 255, 40, 205, 219, 255, 50, 205, 221, 255, 105, 199, 224, 255, 125, 195, 226, 255, 127, 195, 226, 255, 126, 199, 226, 255, 100, 207, 221, 255, 65, 212, 221, 255, 65, 212, 222, 255, 66, 207, 222, 255, 61, 207, 224, 255, 100, 199, 227, 255, 134, 192, 227, 255, 143, 182, 229, 255, 166, 173, 232, 255, 160, 173, 230, 255, 160, 179, 226, 255, 161, 181, 224, 255, 161, 177, 224, 255, 164, 177, 222, 255, 153, 179, 221, 255, 138, 184, 219, 255, 130, 186, 217, 255, 121, 192, 217, 255, 136, 195, 216, 255, 163, 195, 216, 255, 180, 197, 221, 255, 168, 201, 221, 255, 142, 205, 219, 255, 134, 207, 221, 255, 143, 207, 219, 255, 187, 205, 219, 255, 221, 205, 217, 255, 225, 201, 219, 255, 228, 197, 219, 255, 226, 197, 219, 255, 225, 199, 219, 255, 226, 199, 219, 255, 225, 199, 219, 255, 225, 203, 217, 255, 238, 203, 217, 255, 247, 207, 217, 255, 246, 208, 216, 255, 247, 210, 216, 255, 249, 210, 216, 255, 250, 210, 216, 255, 246, 207, 217, 255, 236, 205, 221, 255, 230, 205, 219, 255, 233, 205, 219, 255, 231, 203, 221, 255, 229, 203, 221, 255, 228, 203, 221, 255, 223, 203, 221, 255, 196, 203, 222, 255, 188, 205, 221, 255, 190, 208, 217, 255, 190, 210, 217, 255, 189, 210, 217, 255, 189, 212, 217, 255, 189, 210, 217, 255, 189, 208, 219, 255, 190, 208, 219, 255, 190, 208, 219, 255, 190, 208, 219, 255, 189, 208, 221, 255, 188, 212, 222, 255, 188, 212, 224, 255, 177, 212, 224, 255, 166, 212, 224, 255, 165, 212, 224, 255, 164, 210, 224, 255, 165, 210, 224, 255, 166, 210, 224, 255, 164, 210, 224, 255, 163, 208, 226, 255, 165, 208, 227, 255, 164, 208, 227, 255, 162, 208, 226, 255, 167, 208, 226, 255, 178, 210, 222, 255, 176, 212, 222, 255, 158, 212, 221, 255, 150, 214, 219, 255, 166, 214, 217, 255, 179, 214, 219, 255, 194, 210, 227, 255, 198, 210, 232, 255, 177, 208, 232, 255, 164, 207, 234, 255, 162, 205, 235, 255, 159, 203, 237, 255, 156, 199, 237, 255, 166, 199, 237, 255, 169, 195, 237, 255, 172, 195, 237, 255, 174, 195, 232, 255, 174, 195, 232, 255, 176, 195, 232, 255, 176, 194, 232, 255, 173, 194, 232, 255, 171, 194, 234, 255, 167, 192, 237, 255, 166, 190, 239, 255, 165, 190, 239, 255, 173, 188, 240, 255, 176, 179, 244, 255, 176, 179, 245, 255, 176, 179, 244, 255, 176, 179, 242, 255, 176, 181, 240, 255, 175, 181, 237, 255, 161, 184, 235, 255, 121, 190, 232, 255, 116, 190, 232, 255, 87, 197, 229, 255, 72, 201, 229, 255, 116, 197, 229, 255, 71, 199, 229, 255, 55, 197, 230, 255, 51, 201, 229, 255, 83, 201, 230, 255, 102, 199, 230, 255, 104, 197, 230, 255, 125, 197, 230, 255, 133, 199, 230, 255, 146, 212, 229, 255, 146, 214, 227, 255, 144, 212, 229, 255, 150, 210, 232, 255, 155, 208, 234, 255, 156, 207, 235, 255, 156, 203, 239, 255, 155, 201, 240, 255, 155, 201, 240, 255, 154, 201, 242, 255, 208, 199, 209, 255, 199, 201, 209, 255, 187, 203, 209, 255, 180, 205, 209, 255, 178, 205, 209, 255, 179, 207, 209, 255, 180, 205, 209, 255, 182, 203, 211, 255, 182, 203, 211, 255, 181, 199, 214, 255, 184, 188, 227, 255, 189, 186, 230, 255, 192, 184, 232, 255, 187, 184, 232, 255, 183, 184, 230, 255, 185, 188, 227, 255, 182, 192, 224, 255, 131, 194, 219, 255, 96, 199, 216, 255, 112, 199, 214, 255, 164, 195, 214, 255, 180, 194, 216, 255, 194, 194, 216, 255, 218, 194, 217, 255, 225, 190, 221, 255, 211, 188, 222, 255, 190, 184, 226, 255, 184, 184, 226, 255, 182, 182, 229, 255, 179, 181, 227, 255, 180, 181, 226, 255, 180, 184, 224, 255, 161, 190, 222, 255, 71, 203, 221, 255, 56, 201, 222, 255, 46, 207, 222, 255, 39, 210, 222, 255, 38, 208, 222, 255, 43, 208, 222, 255, 117, 205, 224, 255, 158, 192, 226, 255, 77, 199, 224, 255, 42, 207, 221, 255, 57, 203, 221, 255, 50, 205, 219, 255, 53, 207, 219, 255, 40, 210, 219, 255, 43, 207, 222, 255, 78, 199, 224, 255, 138, 194, 227, 255, 110, 197, 226, 255, 86, 201, 224, 255, 95, 197, 224, 255, 70, 203, 222, 255, 69, 201, 222, 255, 74, 201, 222, 255, 116, 197, 224, 255, 137, 190, 224, 255, 144, 188, 226, 255, 134, 190, 226, 255, 85, 199, 226, 255, 100, 197, 227, 255, 84, 201, 227, 255, 101, 195, 229, 255, 73, 201, 229, 255, 95, 195, 230, 255, 156, 184, 234, 255, 167, 182, 234, 255, 165, 182, 235, 255, 164, 182, 234, 255, 148, 188, 232, 255, 132, 194, 230, 255, 131, 194, 232, 255, 130, 194, 232, 255, 131, 195, 232, 255, 145, 192, 234, 255, 164, 186, 235, 255, 162, 182, 235, 255, 164, 181, 235, 255, 160, 179, 234, 255, 164, 179, 226, 255, 164, 177, 224, 255, 178, 177, 222, 255, 182, 177, 222, 255, 181, 177, 221, 255, 180, 177, 219, 255, 177, 182, 219, 255, 188, 184, 217, 255, 220, 188, 217, 255, 229, 190, 219, 255, 230, 197, 219, 255, 229, 201, 219, 255, 228, 203, 217, 255, 226, 205, 219, 255, 228, 207, 217, 255, 240, 207, 217, 255, 253, 208, 217, 255, 253, 205, 217, 255, 254, 205, 217, 255, 250, 203, 217, 255, 236, 205, 217, 255, 231, 205, 217, 255, 229, 205, 217, 255, 230, 207, 217, 255, 228, 208, 217, 255, 229, 210, 217, 255, 230, 208, 216, 255, 228, 210, 216, 255, 230, 210, 216, 255, 228, 212, 216, 255, 223, 214, 217, 255, 200, 212, 221, 255, 188, 212, 221, 255, 187, 214, 219, 255, 185, 214, 219, 255, 185, 214, 219, 255, 183, 212, 221, 255, 180, 212, 221, 255, 165, 212, 221, 255, 161, 214, 221, 255, 159, 216, 219, 255, 160, 218, 217, 255, 159, 218, 217, 255, 159, 218, 217, 255, 159, 218, 217, 255, 159, 218, 217, 255, 160, 218, 217, 255, 160, 218, 217, 255, 160, 218, 217, 255, 159, 218, 219, 255, 158, 220, 221, 255, 160, 220, 221, 255, 159, 220, 221, 255, 159, 218, 221, 255, 161, 216, 221, 255, 160, 216, 221, 255, 158, 214, 221, 255, 163, 214, 221, 255, 163, 212, 221, 255, 159, 212, 222, 255, 170, 214, 226, 255, 181, 216, 226, 255, 179, 218, 224, 255, 187, 220, 222, 255, 196, 221, 219, 255, 182, 221, 216, 255, 132, 223, 216, 255, 119, 225, 214, 255, 172, 227, 213, 255, 188, 225, 214, 255, 175, 212, 226, 255, 176, 207, 230, 255, 171, 203, 230, 255, 160, 201, 235, 255, 155, 195, 239, 255, 151, 194, 239, 255, 155, 188, 242, 255, 172, 184, 244, 255, 172, 182, 247, 255, 166, 181, 244, 255, 162, 181, 235, 255, 158, 181, 234, 255, 155, 181, 234, 255, 154, 181, 235, 255, 150, 179, 235, 255, 147, 177, 237, 255, 147, 177, 239, 255, 145, 175, 239, 255, 142, 175, 239, 255, 148, 175, 240, 255, 150, 175, 248, 255, 150, 177, 250, 255, 150, 177, 248, 255, 150, 179, 247, 255, 151, 179, 244, 255, 150, 181, 242, 255, 145, 181, 239, 255, 142, 181, 237, 255, 133, 184, 235, 255, 118, 190, 234, 255, 116, 194, 232, 255, 126, 195, 232, 255, 92, 199, 232, 255, 66, 199, 232, 255, 74, 199, 232, 255, 99, 199, 232, 255, 81, 201, 232, 255, 68, 201, 232, 255, 70, 201, 232, 255, 87, 197, 232, 255, 116, 195, 232, 255, 103, 197, 230, 255, 99, 197, 232, 255, 128, 192, 235, 255, 132, 190, 237, 255, 136, 188, 239, 255, 136, 186, 240, 255, 137, 184, 242, 255, 137, 184, 244, 255, 138, 184, 244, 255, 180, 186, 224, 255, 175, 188, 224, 255, 169, 190, 224, 255, 167, 192, 224, 255, 166, 194, 222, 255, 169, 194, 222, 255, 172, 192, 222, 255, 174, 190, 222, 255, 172, 190, 222, 255, 170, 188, 224, 255, 172, 181, 234, 255, 174, 181, 237, 255, 175, 181, 237, 255, 173, 181, 235, 255, 171, 182, 232, 255, 167, 186, 227, 255, 130, 192, 222, 255, 74, 195, 217, 255, 55, 199, 213, 255, 60, 201, 209, 255, 80, 197, 213, 255, 84, 197, 213, 255, 95, 197, 214, 255, 130, 194, 217, 255, 144, 192, 221, 255, 140, 190, 222, 255, 150, 186, 226, 255, 156, 184, 227, 255, 156, 182, 229, 255, 157, 182, 229, 255, 157, 179, 229, 255, 162, 181, 229, 255, 150, 184, 229, 255, 94, 195, 227, 255, 100, 195, 227, 255, 83, 203, 227, 255, 71, 208, 227, 255, 73, 205, 227, 255, 76, 205, 229, 255, 127, 197, 229, 255, 156, 184, 232, 255, 101, 194, 230, 255, 82, 199, 229, 255, 104, 194, 227, 255, 91, 199, 226, 255, 101, 199, 226, 255, 75, 199, 227, 255, 81, 199, 229, 255, 124, 190, 232, 255, 160, 186, 232, 255, 152, 182, 230, 255, 146, 184, 230, 255, 147, 184, 230, 255, 139, 186, 229, 255, 139, 186, 229, 255, 141, 186, 229, 255, 161, 182, 230, 255, 170, 179, 230, 255, 168, 179, 230, 255, 163, 181, 230, 255, 146, 184, 234, 255, 155, 182, 234, 255, 150, 186, 235, 255, 155, 181, 235, 255, 140, 184, 235, 255, 151, 181, 237, 255, 164, 177, 239, 255, 163, 177, 239, 255, 162, 177, 239, 255, 162, 175, 239, 255, 161, 171, 237, 255, 162, 173, 237, 255, 163, 177, 237, 255, 163, 182, 237, 255, 165, 186, 237, 255, 163, 188, 237, 255, 169, 192, 234, 255, 189, 194, 232, 255, 188, 195, 234, 255, 186, 194, 232, 255, 190, 190, 226, 255, 197, 186, 222, 255, 226, 188, 221, 255, 230, 186, 221, 255, 230, 186, 219, 255, 230, 186, 219, 255, 227, 192, 219, 255, 232, 192, 217, 255, 248, 195, 217, 255, 252, 197, 217, 255, 252, 199, 217, 255, 250, 201, 217, 255, 251, 205, 217, 255, 250, 207, 217, 255, 251, 208, 217, 255, 241, 208, 217, 255, 226, 210, 217, 255, 224, 208, 217, 255, 226, 208, 217, 255, 216, 207, 217, 255, 190, 208, 219, 255, 184, 210, 219, 255, 181, 210, 219, 255, 182, 210, 219, 255, 184, 210, 217, 255, 184, 212, 217, 255, 185, 210, 216, 255, 185, 212, 216, 255, 187, 212, 216, 255, 185, 214, 216, 255, 182, 218, 217, 255, 171, 220, 219, 255, 166, 220, 219, 255, 160, 220, 219, 255, 160, 220, 219, 255, 162, 220, 219, 255, 160, 220, 219, 255, 158, 220, 219, 255, 158, 220, 219, 255, 158, 220, 219, 255, 156, 221, 216, 255, 157, 221, 216, 255, 158, 221, 216, 255, 158, 221, 216, 255, 159, 221, 216, 255, 158, 221, 216, 255, 158, 221, 216, 255, 158, 221, 216, 255, 158, 221, 216, 255, 158, 221, 216, 255, 158, 223, 219, 255, 157, 223, 219, 255, 157, 223, 219, 255, 158, 221, 219, 255, 158, 220, 219, 255, 160, 220, 219, 255, 157, 218, 219, 255, 157, 216, 219, 255, 160, 214, 219, 255, 172, 216, 221, 255, 194, 218, 224, 255, 216, 221, 224, 255, 214, 221, 221, 255, 208, 223, 219, 255, 170, 227, 216, 255, 144, 229, 213, 255, 115, 231, 211, 255, 103, 235, 208, 255, 141, 236, 204, 255, 157, 231, 208, 255, 150, 210, 219, 255, 151, 203, 224, 255, 166, 199, 227, 255, 166, 194, 232, 255, 158, 188, 235, 255, 155, 182, 239, 255, 156, 177, 244, 255, 163, 173, 247, 255, 160, 169, 250, 255, 155, 169, 247, 255, 155, 173, 239, 255, 153, 175, 237, 255, 152, 175, 239, 255, 153, 173, 239, 255, 152, 173, 239, 255, 150, 171, 240, 255, 146, 171, 240, 255, 147, 171, 242, 255, 147, 171, 242, 255, 145, 171, 244, 255, 145, 173, 252, 255, 146, 175, 253, 255, 145, 177, 252, 255, 145, 179, 248, 255, 144, 181, 247, 255, 145, 181, 245, 255, 143, 181, 240, 255, 142, 181, 240, 255, 140, 182, 239, 255, 140, 182, 237, 255, 139, 190, 235, 255, 136, 192, 234, 255, 125, 194, 234, 255, 110, 195, 234, 255, 116, 195, 234, 255, 126, 195, 234, 255, 119, 197, 234, 255, 104, 197, 234, 255, 87, 201, 234, 255, 108, 194, 234, 255, 121, 181, 235, 255, 93, 186, 234, 255, 73, 194, 234, 255, 118, 181, 237, 255, 132, 175, 239, 255, 135, 175, 240, 255, 135, 175, 242, 255, 137, 173, 244, 255, 137, 173, 245, 255, 138, 173, 245, 255, 160, 173, 240, 255, 159, 173, 240, 255, 159, 175, 240, 255, 159, 177, 240, 255, 159, 179, 239, 255, 160, 179, 237, 255, 162, 179, 235, 255, 162, 179, 235, 255, 160, 177, 234, 255, 159, 177, 234, 255, 160, 179, 235, 255, 158, 181, 237, 255, 155, 181, 235, 255, 156, 181, 234, 255, 154, 182, 230, 255, 150, 188, 226, 255, 88, 195, 219, 255, 52, 197, 214, 255, 54, 201, 208, 255, 54, 203, 206, 255, 52, 203, 208, 255, 50, 203, 209, 255, 50, 201, 211, 255, 68, 199, 214, 255, 76, 197, 217, 255, 77, 195, 221, 255, 102, 192, 222, 255, 117, 188, 226, 255, 125, 188, 227, 255, 127, 186, 227, 255, 131, 181, 234, 255, 155, 179, 235, 255, 154, 181, 235, 255, 137, 184, 234, 255, 143, 184, 234, 255, 137, 188, 234, 255, 133, 190, 234, 255, 135, 190, 234, 255, 135, 190, 235, 255, 151, 186, 235, 255, 157, 177, 239, 255, 146, 179, 237, 255, 139, 182, 235, 255, 146, 182, 234, 255, 143, 186, 232, 255, 147, 186, 232, 255, 135, 186, 234, 255, 140, 184, 235, 255, 155, 181, 237, 255, 163, 179, 239, 255, 163, 177, 235, 255, 164, 175, 235, 255, 165, 175, 235, 255, 165, 175, 235, 255, 168, 175, 235, 255, 168, 173, 235, 255, 166, 173, 235, 255, 166, 173, 235, 255, 165, 173, 235, 255, 168, 173, 235, 255, 166, 177, 237, 255, 166, 177, 239, 255, 167, 177, 239, 255, 165, 177, 239, 255, 165, 177, 239, 255, 165, 177, 239, 255, 165, 177, 240, 255, 167, 175, 239, 255, 169, 175, 239, 255, 168, 175, 239, 255, 166, 169, 239, 255, 173, 171, 237, 255, 190, 177, 234, 255, 194, 181, 235, 255, 197, 186, 234, 255, 195, 192, 234, 255, 204, 195, 229, 255, 230, 199, 226, 255, 232, 203, 227, 255, 231, 203, 226, 255, 233, 203, 221, 255, 238, 203, 219, 255, 250, 201, 219, 255, 251, 201, 219, 255, 252, 199, 217, 255, 254, 201, 217, 255, 249, 205, 217, 255, 245, 207, 217, 255, 245, 208, 217, 255, 246, 208, 217, 255, 243, 203, 217, 255, 225, 203, 217, 255, 218, 205, 217, 255, 218, 208, 217, 255, 219, 210, 217, 255, 204, 212, 219, 255, 181, 212, 219, 255, 181, 212, 219, 255, 180, 210, 219, 255, 176, 210, 219, 255, 167, 214, 219, 255, 165, 216, 219, 255, 166, 216, 219, 255, 164, 216, 219, 255, 167, 216, 217, 255, 169, 214, 216, 255, 167, 214, 216, 255, 167, 214, 216, 255, 166, 214, 214, 255, 167, 216, 214, 255, 165, 221, 216, 255, 163, 223, 216, 255, 161, 223, 216, 255, 159, 223, 216, 255, 159, 223, 216, 255, 157, 223, 216, 255, 157, 223, 216, 255, 158, 223, 216, 255, 155, 223, 216, 255, 157, 223, 216, 255, 157, 223, 214, 255, 157, 223, 214, 255, 157, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 223, 214, 255, 158, 225, 216, 255, 158, 225, 216, 255, 157, 223, 216, 255, 155, 221, 216, 255, 156, 221, 216, 255, 157, 220, 216, 255, 156, 218, 216, 255, 156, 214, 216, 255, 157, 214, 216, 255, 176, 214, 217, 255, 190, 220, 222, 255, 198, 221, 222, 255, 194, 223, 219, 255, 178, 225, 216, 255, 143, 229, 214, 255, 128, 233, 209, 255, 121, 236, 206, 255, 110, 238, 204, 255, 108, 240, 201, 255, 118, 236, 203, 255, 125, 216, 213, 255, 132, 208, 216, 255, 153, 205, 221, 255, 155, 199, 226, 255, 152, 194, 230, 255, 151, 186, 235, 255, 148, 181, 240, 255, 146, 175, 245, 255, 145, 171, 247, 255, 144, 171, 248, 255, 144, 181, 242, 255, 144, 184, 242, 255, 145, 184, 242, 255, 145, 184, 244, 255, 143, 182, 244, 255, 142, 181, 245, 255, 141, 181, 245, 255, 141, 181, 245, 255, 142, 181, 247, 255, 140, 179, 248, 255, 140, 177, 253, 255, 140, 177, 255, 255, 140, 177, 253, 255, 139, 179, 252, 255, 138, 181, 250, 255, 139, 181, 248, 255, 138, 181, 244, 255, 137, 181, 242, 255, 137, 182, 240, 255, 136, 184, 240, 255, 137, 188, 237, 255, 134, 190, 235, 255, 132, 190, 235, 255, 129, 190, 235, 255, 129, 190, 235, 255, 129, 192, 235, 255, 127, 192, 235, 255, 122, 194, 235, 255, 116, 195, 235, 255, 124, 192, 237, 255, 124, 184, 239, 255, 108, 190, 237, 255, 83, 197, 237, 255, 112, 188, 239, 255, 123, 184, 242, 255, 125, 184, 244, 255, 125, 184, 245, 255, 126, 184, 247, 255, 127, 184, 247, 255, 128, 184, 248, 255, 152, 164, 252, 255, 154, 166, 250, 255, 153, 168, 250, 255, 154, 171, 247, 255, 154, 173, 247, 255, 151, 173, 245, 255, 144, 175, 242, 255, 144, 173, 240, 255, 152, 171, 239, 255, 154, 173, 237, 255, 152, 181, 234, 255, 146, 182, 232, 255, 135, 182, 232, 255, 137, 184, 229, 255, 126, 186, 227, 255, 131, 190, 222, 255, 77, 199, 216, 255, 47, 203, 209, 255, 50, 205, 204, 255, 51, 207, 201, 255, 52, 208, 204, 255, 49, 208, 206, 255, 47, 208, 208, 255, 50, 205, 211, 255, 54, 203, 214, 255, 55, 201, 216, 255, 62, 199, 219, 255, 67, 197, 222, 255, 75, 195, 224, 255, 77, 195, 226, 255, 100, 186, 235, 255, 150, 179, 237, 255, 152, 179, 237, 255, 153, 177, 237, 255, 154, 177, 237, 255, 155, 177, 237, 255, 157, 177, 237, 255, 158, 175, 237, 255, 159, 175, 237, 255, 159, 173, 239, 255, 159, 168, 242, 255, 162, 169, 240, 255, 159, 171, 239, 255, 160, 175, 237, 255, 160, 177, 237, 255, 161, 177, 237, 255, 161, 177, 237, 255, 161, 175, 239, 255, 162, 173, 240, 255, 165, 173, 242, 255, 164, 173, 239, 255, 163, 173, 239, 255, 166, 173, 239, 255, 166, 173, 239, 255, 166, 173, 239, 255, 165, 173, 239, 255, 164, 173, 239, 255, 163, 173, 239, 255, 163, 173, 239, 255, 163, 173, 239, 255, 162, 179, 235, 255, 164, 181, 235, 255, 171, 181, 235, 255, 172, 179, 234, 255, 174, 179, 235, 255, 171, 179, 235, 255, 180, 179, 235, 255, 199, 181, 234, 255, 202, 181, 234, 255, 203, 181, 232, 255, 202, 186, 234, 255, 210, 188, 230, 255, 232, 190, 229, 255, 236, 192, 229, 255, 238, 194, 227, 255, 237, 194, 227, 255, 241, 194, 224, 255, 249, 197, 222, 255, 251, 199, 221, 255, 251, 201, 221, 255, 253, 212, 217, 255, 252, 214, 217, 255, 252, 212, 217, 255, 249, 210, 217, 255, 245, 210, 217, 255, 245, 210, 217, 255, 235, 214, 217, 255, 212, 216, 219, 255, 208, 218, 219, 255, 211, 216, 217, 255, 207, 205, 217, 255, 186, 203, 217, 255, 176, 207, 217, 255, 177, 208, 217, 255, 177, 212, 217, 255, 171, 214, 217, 255, 162, 216, 217, 255, 163, 216, 217, 255, 162, 216, 217, 255, 163, 216, 217, 255, 165, 220, 219, 255, 162, 220, 219, 255, 166, 220, 217, 255, 164, 220, 217, 255, 166, 218, 217, 255, 166, 218, 216, 255, 164, 216, 216, 255, 163, 216, 214, 255, 162, 216, 214, 255, 163, 216, 214, 255, 162, 221, 216, 255, 161, 225, 216, 255, 158, 225, 216, 255, 156, 225, 216, 255, 153, 225, 216, 255, 152, 225, 216, 255, 155, 225, 216, 255, 156, 225, 216, 255, 156, 225, 216, 255, 158, 223, 214, 255, 158, 221, 213, 255, 158, 221, 211, 255, 158, 221, 211, 255, 157, 221, 211, 255, 156, 221, 211, 255, 156, 221, 211, 255, 156, 221, 211, 255, 156, 221, 211, 255, 155, 221, 211, 255, 155, 223, 213, 255, 156, 225, 214, 255, 156, 225, 216, 255, 155, 223, 216, 255, 154, 220, 216, 255, 155, 220, 216, 255, 156, 218, 216, 255, 157, 214, 216, 255, 157, 212, 216, 255, 155, 210, 216, 255, 161, 212, 216, 255, 160, 216, 222, 255, 159, 218, 221, 255, 155, 221, 219, 255, 146, 223, 216, 255, 139, 229, 213, 255, 137, 233, 208, 255, 133, 235, 204, 255, 128, 238, 201, 255, 120, 240, 199, 255, 114, 238, 199, 255, 108, 231, 206, 255, 111, 227, 208, 255, 124, 221, 213, 255, 129, 216, 216, 255, 138, 210, 222, 255, 137, 203, 227, 255, 143, 195, 234, 255, 141, 190, 239, 255, 140, 186, 242, 255, 138, 186, 244, 255, 137, 192, 245, 255, 138, 194, 245, 255, 138, 194, 247, 255, 137, 194, 247, 255, 135, 192, 248, 255, 135, 192, 248, 255, 135, 190, 248, 255, 133, 190, 248, 255, 132, 190, 250, 255, 132, 186, 252, 255, 132, 181, 253, 255, 132, 181, 253, 255, 130, 181, 253, 255, 131, 181, 252, 255, 131, 181, 250, 255, 132, 182, 250, 255, 132, 182, 245, 255, 132, 182, 245, 255, 132, 184, 244, 255, 133, 184, 242, 255, 132, 184, 239, 255, 131, 186, 239, 255, 129, 186, 239, 255, 127, 186, 239, 255, 126, 186, 239, 255, 128, 188, 239, 255, 126, 188, 239, 255, 123, 190, 239, 255, 123, 190, 239, 255, 123, 192, 239, 255, 122, 197, 242, 255, 120, 199, 242, 255, 111, 201, 242, 255, 118, 199, 244, 255, 119, 199, 244, 255, 118, 199, 245, 255, 117, 201, 247, 255, 117, 201, 248, 255, 117, 201, 248, 255, 117, 201, 248, 255, 150, 166, 250, 255, 151, 166, 248, 255, 150, 169, 248, 255, 151, 173, 245, 255, 140, 177, 242, 255, 123, 179, 240, 255, 101, 182, 237, 255, 104, 182, 234, 255, 130, 177, 232, 255, 136, 179, 230, 255, 133, 186, 227, 255, 119, 188, 226, 255, 107, 190, 226, 255, 113, 188, 224, 255, 90, 192, 222, 255, 105, 194, 217, 255, 86, 199, 213, 255, 45, 205, 206, 255, 43, 207, 203, 255, 45, 208, 201, 255, 45, 212, 204, 255, 44, 212, 206, 255, 44, 212, 208, 255, 44, 208, 209, 255, 46, 208, 211, 255, 48, 207, 214, 255, 47, 205, 216, 255, 44, 205, 219, 255, 46, 203, 219, 255, 46, 203, 222, 255, 88, 194, 234, 255, 151, 179, 239, 255, 153, 177, 240, 255, 155, 173, 240, 255, 156, 171, 240, 255, 156, 168, 240, 255, 157, 166, 240, 255, 158, 164, 240, 255, 159, 164, 240, 255, 160, 162, 240, 255, 161, 164, 244, 255, 162, 166, 242, 255, 161, 168, 239, 255, 163, 169, 239, 255, 164, 171, 239, 255, 165, 171, 239, 255, 165, 171, 239, 255, 164, 171, 239, 255, 164, 171, 242, 255, 165, 171, 244, 255, 165, 173, 240, 255, 166, 173, 239, 255, 166, 173, 239, 255, 167, 173, 239, 255, 167, 173, 239, 255, 165, 175, 239, 255, 165, 175, 239, 255, 173, 175, 239, 255, 171, 177, 237, 255, 168, 177, 237, 255, 168, 184, 230, 255, 181, 186, 230, 255, 204, 186, 229, 255, 211, 186, 226, 255, 210, 186, 227, 255, 209, 186, 227, 255, 217, 186, 227, 255, 237, 186, 226, 255, 240, 188, 226, 255, 241, 192, 226, 255, 240, 205, 226, 255, 245, 207, 222, 255, 250, 205, 222, 255, 251, 203, 222, 255, 251, 201, 222, 255, 249, 197, 222, 255, 251, 195, 221, 255, 252, 195, 219, 255, 252, 195, 217, 255, 253, 199, 217, 255, 249, 214, 216, 255, 241, 216, 217, 255, 240, 214, 217, 255, 227, 212, 217, 255, 208, 210, 217, 255, 206, 212, 217, 255, 197, 214, 219, 255, 172, 216, 221, 255, 171, 218, 221, 255, 172, 216, 221, 255, 170, 205, 217, 255, 165, 205, 217, 255, 162, 208, 217, 255, 161, 212, 217, 255, 161, 216, 217, 255, 159, 218, 217, 255, 158, 220, 217, 255, 159, 220, 217, 255, 159, 220, 217, 255, 160, 220, 217, 255, 161, 221, 217, 255, 161, 221, 217, 255, 162, 221, 217, 255, 162, 221, 217, 255, 162, 220, 216, 255, 160, 220, 216, 255, 158, 220, 214, 255, 158, 220, 214, 255, 158, 218, 213, 255, 159, 218, 213, 255, 157, 221, 214, 255, 157, 221, 214, 255, 156, 221, 214, 255, 153, 221, 214, 255, 150, 221, 214, 255, 152, 221, 214, 255, 153, 221, 214, 255, 155, 221, 214, 255, 156, 221, 214, 255, 156, 221, 214, 255, 157, 221, 211, 255, 158, 221, 211, 255, 157, 221, 211, 255, 157, 221, 211, 255, 156, 221, 211, 255, 155, 221, 211, 255, 155, 221, 211, 255, 155, 221, 211, 255, 154, 221, 211, 255, 154, 221, 211, 255, 155, 221, 214, 255, 155, 221, 214, 255, 154, 221, 214, 255, 153, 218, 214, 255, 154, 218, 214, 255, 156, 214, 214, 255, 157, 210, 214, 255, 157, 210, 214, 255, 155, 208, 214, 255, 153, 208, 216, 255, 150, 212, 221, 255, 147, 214, 221, 255, 144, 216, 217, 255, 141, 220, 216, 255, 139, 225, 213, 255, 140, 229, 208, 255, 140, 233, 204, 255, 140, 235, 201, 255, 138, 236, 199, 255, 133, 238, 199, 255, 125, 244, 199, 255, 120, 242, 201, 255, 114, 238, 204, 255, 112, 233, 209, 255, 117, 227, 214, 255, 118, 221, 219, 255, 137, 214, 224, 255, 138, 210, 229, 255, 137, 207, 232, 255, 139, 203, 235, 255, 132, 195, 244, 255, 131, 194, 245, 255, 131, 194, 247, 255, 130, 194, 247, 255, 128, 192, 248, 255, 128, 192, 248, 255, 128, 192, 248, 255, 125, 190, 250, 255, 124, 190, 250, 255, 123, 188, 250, 255, 122, 186, 252, 255, 121, 186, 252, 255, 119, 186, 250, 255, 120, 186, 250, 255, 122, 184, 248, 255, 122, 184, 248, 255, 123, 184, 247, 255, 124, 184, 247, 255, 125, 184, 245, 255, 126, 184, 244, 255, 125, 182, 240, 255, 126, 181, 240, 255, 125, 182, 240, 255, 125, 182, 240, 255, 125, 184, 240, 255, 125, 184, 240, 255, 124, 184, 240, 255, 122, 186, 240, 255, 121, 186, 240, 255, 120, 190, 240, 255, 119, 199, 244, 255, 119, 203, 245, 255, 118, 203, 245, 255, 117, 203, 245, 255, 115, 205, 245, 255, 112, 205, 247, 255, 112, 207, 248, 255, 112, 207, 248, 255, 110, 207, 248, 255, 109, 207, 248, 255, 152, 173, 242, 255, 151, 175, 240, 255, 152, 179, 237, 255, 154, 182, 234, 255, 115, 188, 230, 255, 77, 192, 229, 255, 62, 194, 224, 255, 65, 194, 222, 255, 85, 190, 219, 255, 90, 192, 219, 255, 87, 194, 219, 255, 73, 197, 219, 255, 74, 195, 219, 255, 93, 194, 219, 255, 78, 194, 219, 255, 92, 197, 216, 255, 112, 199, 214, 255, 52, 207, 208, 255, 44, 207, 204, 255, 43, 208, 203, 255, 38, 212, 208, 255, 46, 212, 209, 255, 39, 212, 209, 255, 37, 212, 211, 255, 49, 210, 214, 255, 44, 208, 216, 255, 39, 208, 216, 255, 44, 208, 217, 255, 45, 207, 217, 255, 37, 207, 221, 255, 84, 195, 234, 255, 157, 181, 239, 255, 157, 177, 239, 255, 157, 171, 239, 255, 159, 168, 239, 255, 160, 164, 239, 255, 159, 160, 239, 255, 159, 158, 239, 255, 160, 158, 239, 255, 162, 160, 240, 255, 163, 164, 242, 255, 163, 168, 240, 255, 163, 168, 239, 255, 165, 169, 237, 255, 164, 171, 235, 255, 165, 171, 235, 255, 165, 173, 237, 255, 165, 173, 239, 255, 165, 173, 240, 255, 163, 173, 242, 255, 165, 177, 239, 255, 176, 179, 237, 255, 180, 179, 235, 255, 178, 181, 235, 255, 179, 179, 235, 255, 178, 181, 237, 255, 185, 181, 237, 255, 209, 182, 232, 255, 212, 184, 230, 255, 209, 184, 230, 255, 210, 192, 226, 255, 220, 192, 226, 255, 240, 192, 222, 255, 246, 194, 221, 255, 244, 194, 221, 255, 245, 195, 219, 255, 247, 195, 221, 255, 251, 195, 221, 255, 251, 197, 219, 255, 253, 199, 219, 255, 251, 212, 221, 255, 253, 214, 219, 255, 255, 212, 217, 255, 253, 208, 219, 255, 252, 207, 219, 255, 251, 203, 217, 255, 253, 203, 217, 255, 249, 203, 216, 255, 238, 203, 213, 255, 235, 205, 214, 255, 221, 210, 216, 255, 197, 210, 217, 255, 197, 208, 217, 255, 189, 207, 219, 255, 170, 205, 219, 255, 167, 207, 221, 255, 166, 208, 221, 255, 161, 210, 222, 255, 160, 210, 224, 255, 161, 212, 222, 255, 160, 207, 217, 255, 159, 208, 217, 255, 158, 210, 217, 255, 157, 214, 217, 255, 156, 218, 217, 255, 153, 221, 217, 255, 154, 221, 217, 255, 154, 221, 217, 255, 155, 221, 217, 255, 154, 221, 217, 255, 156, 223, 217, 255, 156, 225, 217, 255, 157, 223, 217, 255, 156, 223, 216, 255, 154, 221, 216, 255, 152, 221, 214, 255, 152, 221, 214, 255, 152, 221, 213, 255, 153, 221, 211, 255, 153, 221, 213, 255, 153, 221, 214, 255, 153, 221, 214, 255, 153, 221, 214, 255, 152, 221, 214, 255, 153, 221, 214, 255, 154, 221, 214, 255, 155, 221, 214, 255, 154, 221, 214, 255, 155, 221, 214, 255, 156, 221, 214, 255, 158, 220, 213, 255, 158, 220, 213, 255, 156, 220, 213, 255, 155, 220, 213, 255, 154, 220, 213, 255, 153, 220, 213, 255, 153, 220, 213, 255, 155, 220, 213, 255, 155, 220, 213, 255, 156, 220, 213, 255, 156, 220, 214, 255, 156, 220, 214, 255, 155, 220, 214, 255, 154, 216, 214, 255, 154, 214, 214, 255, 156, 214, 214, 255, 156, 210, 214, 255, 155, 208, 214, 255, 153, 208, 214, 255, 151, 207, 216, 255, 150, 208, 219, 255, 148, 208, 221, 255, 145, 212, 219, 255, 143, 216, 216, 255, 140, 220, 214, 255, 138, 223, 209, 255, 139, 227, 206, 255, 142, 229, 204, 255, 144, 231, 203, 255, 146, 236, 201, 255, 144, 246, 196, 255, 139, 246, 196, 255, 132, 242, 199, 255, 124, 238, 203, 255, 115, 233, 208, 255, 112, 229, 213, 255, 119, 223, 216, 255, 122, 220, 219, 255, 134, 218, 221, 255, 139, 212, 226, 255, 126, 197, 237, 255, 129, 194, 240, 255, 133, 194, 242, 255, 127, 192, 244, 255, 122, 192, 245, 255, 122, 190, 245, 255, 121, 190, 245, 255, 120, 188, 247, 255, 119, 188, 247, 255, 119, 188, 247, 255, 116, 192, 245, 255, 115, 192, 245, 255, 114, 192, 245, 255, 114, 192, 245, 255, 113, 190, 245, 255, 114, 188, 245, 255, 114, 188, 247, 255, 116, 188, 247, 255, 118, 188, 247, 255, 118, 186, 247, 255, 118, 182, 242, 255, 119, 181, 242, 255, 120, 181, 242, 255, 120, 181, 242, 255, 121, 182, 242, 255, 121, 182, 242, 255, 121, 182, 242, 255, 120, 184, 242, 255, 119, 184, 242, 255, 118, 186, 242, 255, 116, 192, 245, 255, 116, 194, 245, 255, 114, 194, 245, 255, 113, 194, 245, 255, 112, 194, 245, 255, 109, 195, 247, 255, 108, 195, 248, 255, 108, 197, 248, 255, 105, 197, 248, 255, 104, 197, 248, 255, 154, 181, 232, 255, 155, 182, 230, 255, 155, 186, 229, 255, 148, 192, 226, 255, 86, 201, 221, 255, 48, 203, 217, 255, 49, 203, 213, 255, 51, 203, 209, 255, 49, 205, 208, 255, 52, 203, 209, 255, 50, 201, 214, 255, 46, 203, 214, 255, 51, 201, 217, 255, 79, 195, 219, 255, 77, 195, 219, 255, 90, 199, 219, 255, 127, 197, 217, 255, 59, 203, 213, 255, 48, 203, 209, 255, 56, 203, 209, 255, 63, 207, 216, 255, 82, 207, 217, 255, 63, 208, 217, 255, 62, 208, 217, 255, 86, 205, 217, 255, 69, 207, 219, 255, 60, 207, 219, 255, 80, 207, 219, 255, 73, 203, 219, 255, 60, 205, 222, 255, 99, 192, 235, 255, 160, 181, 239, 255, 161, 177, 239, 255, 159, 171, 239, 255, 160, 168, 239, 255, 159, 166, 239, 255, 157, 164, 239, 255, 159, 162, 239, 255, 159, 162, 239, 255, 158, 164, 239, 255, 161, 169, 239, 255, 162, 171, 239, 255, 163, 171, 235, 255, 164, 173, 234, 255, 163, 175, 232, 255, 166, 175, 232, 255, 175, 177, 234, 255, 180, 177, 234, 255, 182, 177, 235, 255, 181, 179, 237, 255, 184, 184, 234, 255, 207, 184, 232, 255, 219, 188, 229, 255, 218, 188, 229, 255, 219, 188, 230, 255, 218, 188, 230, 255, 224, 188, 232, 255, 241, 192, 227, 255, 245, 192, 226, 255, 245, 194, 227, 255, 247, 197, 221, 255, 247, 197, 221, 255, 252, 199, 221, 255, 253, 199, 219, 255, 252, 201, 217, 255, 253, 203, 217, 255, 255, 203, 216, 255, 253, 203, 216, 255, 250, 203, 216, 255, 253, 205, 216, 255, 251, 208, 217, 255, 252, 208, 217, 255, 254, 208, 217, 255, 255, 208, 217, 255, 251, 208, 216, 255, 237, 210, 216, 255, 233, 214, 214, 255, 224, 216, 213, 255, 198, 220, 211, 255, 187, 218, 213, 255, 177, 207, 216, 255, 163, 203, 217, 255, 161, 201, 217, 255, 164, 199, 219, 255, 159, 197, 219, 255, 159, 199, 221, 255, 159, 199, 222, 255, 160, 201, 222, 255, 157, 203, 224, 255, 157, 205, 222, 255, 157, 208, 219, 255, 156, 212, 217, 255, 154, 214, 217, 255, 152, 218, 217, 255, 151, 220, 217, 255, 151, 223, 217, 255, 151, 223, 217, 255, 151, 223, 217, 255, 150, 221, 217, 255, 148, 221, 217, 255, 148, 223, 217, 255, 150, 225, 217, 255, 150, 223, 216, 255, 148, 223, 216, 255, 147, 223, 216, 255, 146, 223, 214, 255, 148, 221, 213, 255, 151, 221, 211, 255, 151, 221, 211, 255, 150, 221, 213, 255, 150, 221, 214, 255, 148, 221, 214, 255, 148, 221, 214, 255, 148, 221, 214, 255, 151, 221, 214, 255, 151, 221, 214, 255, 150, 221, 214, 255, 148, 221, 214, 255, 151, 221, 214, 255, 154, 221, 214, 255, 156, 220, 214, 255, 156, 220, 214, 255, 154, 220, 214, 255, 151, 220, 214, 255, 147, 220, 214, 255, 147, 220, 214, 255, 148, 220, 214, 255, 151, 220, 214, 255, 153, 220, 214, 255, 154, 220, 214, 255, 154, 220, 214, 255, 155, 218, 214, 255, 155, 218, 214, 255, 155, 216, 214, 255, 154, 216, 214, 255, 154, 214, 214, 255, 154, 212, 214, 255, 153, 212, 214, 255, 151, 210, 214, 255, 148, 210, 214, 255, 150, 207, 219, 255, 148, 207, 221, 255, 146, 208, 219, 255, 144, 210, 217, 255, 142, 216, 216, 255, 139, 220, 213, 255, 137, 221, 211, 255, 139, 225, 208, 255, 143, 227, 208, 255, 150, 231, 204, 255, 153, 235, 196, 255, 148, 235, 196, 255, 145, 233, 198, 255, 142, 231, 201, 255, 137, 227, 203, 255, 131, 225, 206, 255, 123, 223, 209, 255, 118, 221, 211, 255, 124, 220, 214, 255, 121, 216, 217, 255, 113, 207, 229, 255, 128, 205, 232, 255, 134, 205, 232, 255, 121, 203, 234, 255, 124, 203, 235, 255, 128, 201, 235, 255, 119, 201, 237, 255, 114, 199, 239, 255, 115, 199, 239, 255, 115, 199, 239, 255, 115, 201, 239, 255, 112, 199, 237, 255, 112, 199, 240, 255, 110, 197, 240, 255, 109, 195, 242, 255, 108, 194, 242, 255, 108, 192, 245, 255, 110, 190, 247, 255, 111, 190, 248, 255, 111, 188, 248, 255, 111, 182, 245, 255, 113, 182, 245, 255, 113, 182, 245, 255, 115, 182, 245, 255, 116, 182, 245, 255, 116, 184, 245, 255, 116, 184, 245, 255, 115, 186, 245, 255, 115, 186, 245, 255, 114, 186, 245, 255, 114, 184, 245, 255, 113, 184, 245, 255, 112, 184, 245, 255, 110, 184, 245, 255, 109, 184, 245, 255, 108, 186, 245, 255, 108, 186, 245, 255, 107, 188, 245, 255, 104, 188, 245, 255, 103, 188, 245, 255, 152, 182, 232, 255, 154, 184, 230, 255, 154, 188, 227, 255, 130, 195, 224, 255, 59, 205, 219, 255, 40, 208, 214, 255, 40, 210, 209, 255, 46, 210, 206, 255, 38, 212, 204, 255, 41, 210, 204, 255, 42, 203, 209, 255, 41, 203, 214, 255, 55, 201, 216, 255, 62, 199, 219, 255, 54, 201, 221, 255, 86, 199, 222, 255, 128, 194, 222, 255, 57, 199, 219, 255, 53, 203, 219, 255, 101, 197, 219, 255, 125, 194, 227, 255, 137, 192, 229, 255, 128, 194, 229, 255, 127, 194, 229, 255, 140, 194, 227, 255, 130, 194, 227, 255, 127, 194, 227, 255, 140, 195, 226, 255, 133, 194, 226, 255, 129, 194, 227, 255, 143, 182, 235, 255, 162, 179, 239, 255, 162, 175, 239, 255, 161, 173, 239, 255, 160, 171, 239, 255, 159, 171, 239, 255, 159, 171, 239, 255, 159, 171, 239, 255, 159, 175, 239, 255, 156, 177, 237, 255, 161, 181, 237, 255, 176, 181, 234, 255, 184, 182, 230, 255, 184, 182, 229, 255, 184, 182, 227, 255, 190, 182, 227, 255, 212, 184, 227, 255, 224, 186, 226, 255, 224, 188, 227, 255, 225, 188, 232, 255, 227, 192, 229, 255, 239, 194, 229, 255, 245, 194, 226, 255, 247, 195, 226, 255, 247, 197, 226, 255, 246, 199, 226, 255, 246, 199, 227, 255, 247, 199, 226, 255, 249, 201, 226, 255, 251, 201, 224, 255, 253, 203, 221, 255, 253, 205, 219, 255, 254, 205, 217, 255, 255, 207, 217, 255, 253, 208, 216, 255, 254, 208, 216, 255, 253, 208, 216, 255, 251, 208, 214, 255, 252, 210, 214, 255, 252, 208, 214, 255, 251, 205, 216, 255, 246, 205, 217, 255, 232, 203, 217, 255, 228, 207, 217, 255, 221, 210, 216, 255, 188, 214, 216, 255, 182, 221, 214, 255, 180, 227, 214, 255, 164, 233, 213, 255, 155, 229, 213, 255, 153, 208, 216, 255, 156, 203, 217, 255, 153, 199, 217, 255, 154, 197, 219, 255, 156, 195, 219, 255, 158, 195, 221, 255, 156, 197, 222, 255, 155, 197, 224, 255, 154, 201, 224, 255, 153, 203, 222, 255, 153, 210, 217, 255, 152, 214, 216, 255, 150, 218, 216, 255, 150, 221, 216, 255, 148, 221, 216, 255, 148, 225, 216, 255, 146, 225, 216, 255, 144, 223, 216, 255, 143, 223, 216, 255, 143, 221, 216, 255, 144, 223, 217, 255, 146, 223, 217, 255, 146, 223, 216, 255, 146, 223, 216, 255, 145, 223, 214, 255, 146, 223, 214, 255, 150, 223, 213, 255, 152, 223, 211, 255, 154, 223, 211, 255, 152, 223, 211, 255, 147, 221, 214, 255, 144, 221, 214, 255, 143, 221, 214, 255, 143, 221, 214, 255, 146, 221, 214, 255, 146, 221, 214, 255, 144, 221, 214, 255, 144, 221, 214, 255, 146, 221, 214, 255, 148, 221, 214, 255, 151, 221, 216, 255, 152, 221, 216, 255, 151, 221, 216, 255, 146, 221, 216, 255, 142, 221, 216, 255, 142, 221, 216, 255, 143, 221, 216, 255, 145, 221, 216, 255, 146, 221, 216, 255, 147, 221, 216, 255, 148, 220, 214, 255, 151, 220, 214, 255, 152, 218, 214, 255, 152, 218, 214, 255, 150, 218, 214, 255, 150, 218, 214, 255, 151, 216, 214, 255, 151, 216, 214, 255, 150, 216, 214, 255, 148, 214, 216, 255, 148, 208, 221, 255, 147, 207, 222, 255, 146, 207, 221, 255, 145, 208, 219, 255, 143, 212, 217, 255, 142, 216, 216, 255, 138, 220, 216, 255, 135, 223, 214, 255, 136, 223, 214, 255, 140, 223, 211, 255, 147, 223, 201, 255, 152, 221, 199, 255, 152, 221, 201, 255, 151, 220, 201, 255, 150, 220, 203, 255, 150, 220, 204, 255, 148, 220, 206, 255, 142, 220, 206, 255, 135, 218, 208, 255, 126, 220, 209, 255, 119, 225, 217, 255, 122, 227, 219, 255, 116, 225, 219, 255, 104, 225, 221, 255, 122, 225, 222, 255, 131, 223, 224, 255, 117, 223, 224, 255, 116, 221, 226, 255, 126, 221, 226, 255, 127, 220, 227, 255, 115, 212, 229, 255, 112, 208, 230, 255, 112, 207, 232, 255, 108, 205, 235, 255, 109, 201, 239, 255, 108, 197, 240, 255, 107, 195, 244, 255, 104, 192, 247, 255, 104, 192, 248, 255, 108, 190, 248, 255, 107, 188, 247, 255, 108, 186, 247, 255, 109, 186, 247, 255, 110, 186, 247, 255, 112, 188, 247, 255, 112, 188, 247, 255, 112, 190, 247, 255, 112, 190, 247, 255, 112, 192, 247, 255, 113, 192, 245, 255, 113, 190, 245, 255, 112, 190, 245, 255, 110, 190, 245, 255, 109, 190, 245, 255, 108, 190, 245, 255, 107, 190, 245, 255, 105, 190, 245, 255, 104, 188, 244, 255, 103, 188, 244, 255, 101, 188, 244, 255, 150, 175, 242, 255, 150, 177, 240, 255, 154, 182, 237, 255, 130, 190, 232, 255, 57, 205, 226, 255, 39, 208, 221, 255, 56, 208, 219, 255, 45, 210, 214, 255, 38, 214, 209, 255, 39, 214, 209, 255, 39, 207, 209, 255, 38, 208, 213, 255, 75, 203, 217, 255, 59, 205, 221, 255, 40, 205, 224, 255, 86, 199, 227, 255, 128, 192, 229, 255, 58, 199, 227, 255, 70, 199, 229, 255, 137, 188, 232, 255, 154, 177, 239, 255, 158, 173, 242, 255, 160, 175, 240, 255, 160, 175, 239, 255, 163, 177, 239, 255, 164, 179, 235, 255, 165, 179, 234, 255, 169, 181, 234, 255, 169, 181, 232, 255, 167, 181, 232, 255, 167, 179, 235, 255, 167, 177, 237, 255, 168, 175, 237, 255, 167, 175, 237, 255, 167, 175, 237, 255, 170, 177, 237, 255, 182, 181, 235, 255, 190, 186, 232, 255, 190, 192, 232, 255, 188, 194, 234, 255, 194, 194, 232, 255, 217, 192, 229, 255, 230, 192, 224, 255, 229, 192, 224, 255, 227, 190, 224, 255, 231, 192, 224, 255, 244, 194, 224, 255, 246, 195, 226, 255, 244, 197, 226, 255, 246, 197, 227, 255, 247, 201, 226, 255, 247, 201, 226, 255, 247, 201, 226, 255, 248, 201, 224, 255, 248, 205, 222, 255, 247, 205, 222, 255, 251, 207, 222, 255, 248, 207, 222, 255, 250, 208, 222, 255, 251, 208, 222, 255, 252, 207, 221, 255, 253, 207, 219, 255, 253, 207, 219, 255, 254, 208, 217, 255, 254, 210, 216, 255, 251, 210, 216, 255, 247, 212, 216, 255, 246, 212, 214, 255, 241, 214, 214, 255, 223, 214, 213, 255, 220, 210, 216, 255, 209, 210, 217, 255, 181, 208, 217, 255, 175, 208, 217, 255, 172, 210, 216, 255, 156, 212, 216, 255, 156, 218, 216, 255, 155, 223, 216, 255, 153, 229, 216, 255, 152, 227, 216, 255, 146, 212, 216, 255, 138, 207, 216, 255, 147, 205, 217, 255, 159, 201, 217, 255, 160, 201, 219, 255, 157, 199, 221, 255, 154, 201, 224, 255, 153, 203, 224, 255, 151, 205, 226, 255, 147, 207, 224, 255, 147, 214, 217, 255, 148, 218, 216, 255, 148, 221, 216, 255, 150, 221, 216, 255, 150, 225, 216, 255, 148, 225, 216, 255, 144, 225, 216, 255, 140, 223, 216, 255, 140, 223, 216, 255, 142, 221, 216, 255, 146, 221, 216, 255, 148, 221, 216, 255, 150, 221, 216, 255, 151, 223, 216, 255, 150, 223, 214, 255, 145, 223, 214, 255, 147, 225, 211, 255, 152, 225, 211, 255, 155, 225, 211, 255, 156, 225, 211, 255, 155, 223, 214, 255, 150, 223, 216, 255, 145, 223, 216, 255, 143, 223, 216, 255, 143, 223, 216, 255, 144, 223, 216, 255, 145, 223, 216, 255, 146, 223, 216, 255, 146, 223, 216, 255, 145, 223, 216, 255, 144, 223, 216, 255, 143, 223, 216, 255, 141, 223, 216, 255, 139, 223, 216, 255, 139, 223, 216, 255, 140, 223, 216, 255, 141, 223, 216, 255, 141, 223, 216, 255, 141, 223, 216, 255, 141, 221, 216, 255, 143, 221, 216, 255, 145, 221, 216, 255, 147, 221, 216, 255, 147, 221, 216, 255, 145, 221, 216, 255, 146, 221, 216, 255, 147, 221, 216, 255, 148, 221, 216, 255, 148, 221, 216, 255, 147, 220, 217, 255, 147, 208, 222, 255, 146, 207, 224, 255, 145, 207, 222, 255, 145, 208, 221, 255, 145, 212, 221, 255, 146, 216, 219, 255, 143, 220, 219, 255, 140, 220, 217, 255, 136, 221, 217, 255, 135, 221, 216, 255, 137, 218, 208, 255, 143, 218, 204, 255, 146, 218, 204, 255, 151, 220, 204, 255, 158, 221, 204, 255, 161, 223, 204, 255, 160, 225, 204, 255, 160, 225, 204, 255, 158, 227, 204, 255, 154, 229, 204, 255, 147, 238, 206, 255, 139, 238, 206, 255, 130, 238, 208, 255, 118, 238, 208, 255, 118, 236, 209, 255, 114, 236, 211, 255, 102, 236, 211, 255, 112, 235, 213, 255, 130, 235, 213, 255, 132, 231, 214, 255, 118, 220, 221, 255, 125, 216, 224, 255, 129, 214, 226, 255, 116, 210, 230, 255, 111, 207, 234, 255, 111, 203, 237, 255, 109, 197, 242, 255, 105, 194, 245, 255, 104, 192, 248, 255, 104, 192, 250, 255, 104, 192, 248, 255, 104, 192, 248, 255, 105, 192, 248, 255, 107, 192, 248, 255, 107, 192, 248, 255, 108, 194, 248, 255, 108, 194, 248, 255, 110, 195, 248, 255, 110, 195, 248, 255, 111, 197, 247, 255, 111, 197, 245, 255, 111, 197, 245, 255, 109, 197, 245, 255, 109, 197, 245, 255, 107, 195, 244, 255, 105, 195, 244, 255, 105, 195, 244, 255, 105, 194, 244, 255, 103, 194, 244, 255, 101, 194, 244, 255, 145, 168, 253, 255, 145, 168, 252, 255, 153, 175, 248, 255, 144, 181, 245, 255, 99, 194, 239, 255, 80, 201, 234, 255, 104, 199, 230, 255, 85, 205, 227, 255, 77, 208, 221, 255, 78, 208, 219, 255, 78, 205, 216, 255, 77, 207, 216, 255, 108, 201, 221, 255, 93, 203, 224, 255, 78, 199, 229, 255, 108, 194, 232, 255, 137, 186, 235, 255, 92, 192, 237, 255, 104, 192, 237, 255, 151, 181, 240, 255, 159, 168, 248, 255, 161, 164, 250, 255, 164, 166, 248, 255, 167, 168, 247, 255, 168, 169, 245, 255, 169, 169, 242, 255, 169, 171, 240, 255, 173, 173, 239, 255, 177, 175, 237, 255, 172, 175, 237, 255, 173, 177, 235, 255, 190, 177, 234, 255, 200, 179, 232, 255, 201, 179, 232, 255, 200, 181, 232, 255, 202, 184, 234, 255, 222, 192, 232, 255, 232, 199, 227, 255, 232, 205, 227, 255, 232, 205, 230, 255, 236, 201, 227, 255, 245, 201, 224, 255, 249, 201, 224, 255, 248, 199, 222, 255, 249, 199, 221, 255, 249, 201, 221, 255, 250, 201, 221, 255, 250, 203, 222, 255, 249, 205, 222, 255, 250, 207, 224, 255, 249, 207, 224, 255, 249, 207, 222, 255, 250, 207, 222, 255, 251, 207, 222, 255, 251, 210, 219, 255, 251, 210, 219, 255, 252, 214, 221, 255, 249, 214, 221, 255, 249, 214, 221, 255, 249, 212, 221, 255, 249, 208, 222, 255, 251, 208, 222, 255, 247, 208, 221, 255, 245, 208, 219, 255, 246, 212, 217, 255, 233, 212, 217, 255, 213, 214, 216, 255, 213, 214, 214, 255, 200, 216, 214, 255, 174, 218, 214, 255, 170, 221, 216, 255, 167, 221, 217, 255, 155, 220, 217, 255, 155, 214, 217, 255, 155, 210, 217, 255, 151, 210, 217, 255, 151, 212, 217, 255, 148, 212, 217, 255, 137, 216, 217, 255, 139, 216, 217, 255, 141, 216, 216, 255, 139, 214, 216, 255, 153, 212, 217, 255, 166, 210, 217, 255, 161, 208, 219, 255, 154, 208, 221, 255, 151, 208, 222, 255, 151, 210, 224, 255, 147, 212, 226, 255, 143, 214, 224, 255, 144, 218, 217, 255, 145, 220, 216, 255, 148, 221, 216, 255, 151, 223, 216, 255, 152, 227, 216, 255, 148, 227, 216, 255, 143, 227, 216, 255, 139, 223, 216, 255, 141, 223, 216, 255, 146, 221, 216, 255, 146, 221, 216, 255, 148, 221, 216, 255, 152, 221, 216, 255, 153, 221, 216, 255, 152, 223, 214, 255, 152, 223, 213, 255, 152, 225, 211, 255, 153, 225, 211, 255, 156, 227, 209, 255, 158, 227, 211, 255, 158, 225, 214, 255, 154, 225, 216, 255, 147, 225, 216, 255, 143, 225, 216, 255, 140, 225, 216, 255, 139, 225, 216, 255, 144, 225, 216, 255, 147, 225, 216, 255, 147, 225, 216, 255, 143, 225, 216, 255, 139, 225, 217, 255, 133, 225, 217, 255, 130, 225, 217, 255, 132, 225, 217, 255, 137, 225, 217, 255, 140, 225, 217, 255, 141, 225, 217, 255, 140, 225, 217, 255, 139, 225, 217, 255, 138, 223, 217, 255, 139, 223, 216, 255, 142, 221, 216, 255, 144, 221, 216, 255, 143, 221, 216, 255, 142, 223, 216, 255, 144, 223, 216, 255, 146, 223, 216, 255, 146, 225, 216, 255, 146, 225, 216, 255, 145, 223, 216, 255, 145, 210, 222, 255, 145, 208, 224, 255, 144, 208, 224, 255, 144, 210, 224, 255, 145, 212, 222, 255, 147, 216, 222, 255, 146, 218, 221, 255, 143, 220, 221, 255, 140, 221, 221, 255, 137, 221, 219, 255, 136, 221, 213, 255, 136, 223, 213, 255, 136, 225, 211, 255, 142, 227, 209, 255, 151, 231, 209, 255, 155, 233, 206, 255, 161, 235, 206, 255, 164, 236, 204, 255, 165, 240, 204, 255, 166, 238, 201, 255, 165, 236, 199, 255, 161, 235, 199, 255, 156, 235, 199, 255, 146, 235, 199, 255, 137, 233, 201, 255, 126, 233, 201, 255, 116, 233, 203, 255, 112, 231, 203, 255, 110, 231, 204, 255, 104, 231, 206, 255, 109, 225, 216, 255, 123, 221, 219, 255, 128, 220, 221, 255, 118, 216, 226, 255, 123, 212, 229, 255, 129, 208, 234, 255, 116, 203, 239, 255, 109, 197, 242, 255, 110, 194, 245, 255, 105, 194, 247, 255, 102, 195, 247, 255, 102, 197, 247, 255, 103, 197, 247, 255, 102, 197, 247, 255, 103, 197, 247, 255, 103, 199, 248, 255, 104, 199, 248, 255, 105, 199, 248, 255, 107, 199, 248, 255, 108, 201, 248, 255, 109, 201, 247, 255, 109, 201, 245, 255, 108, 199, 245, 255, 107, 199, 245, 255, 107, 197, 244, 255, 107, 197, 244, 255, 107, 197, 242, 255, 105, 195, 242, 255, 104, 195, 242, 255, 102, 195, 242, 255, 123, 169, 250, 255, 135, 169, 250, 255, 150, 171, 252, 255, 151, 173, 250, 255, 140, 177, 247, 255, 135, 179, 244, 255, 145, 181, 242, 255, 139, 186, 237, 255, 136, 190, 234, 255, 137, 190, 230, 255, 137, 186, 229, 255, 135, 186, 229, 255, 143, 184, 232, 255, 141, 184, 234, 255, 135, 182, 237, 255, 143, 181, 239, 255, 154, 179, 239, 255, 143, 181, 240, 255, 147, 181, 240, 255, 163, 177, 242, 255, 167, 169, 247, 255, 166, 169, 248, 255, 172, 171, 245, 255, 176, 173, 242, 255, 175, 175, 239, 255, 175, 177, 237, 255, 180, 179, 235, 255, 199, 181, 232, 255, 204, 182, 230, 255, 203, 184, 230, 255, 204, 188, 229, 255, 224, 188, 229, 255, 235, 190, 227, 255, 236, 192, 227, 255, 236, 192, 227, 255, 237, 195, 229, 255, 245, 201, 227, 255, 247, 205, 227, 255, 246, 208, 227, 255, 248, 210, 226, 255, 251, 207, 224, 255, 251, 205, 222, 255, 250, 203, 222, 255, 252, 203, 219, 255, 253, 203, 217, 255, 253, 203, 217, 255, 253, 203, 217, 255, 254, 207, 217, 255, 254, 208, 219, 255, 252, 208, 221, 255, 250, 207, 222, 255, 252, 207, 221, 255, 251, 203, 222, 255, 252, 203, 221, 255, 251, 207, 221, 255, 252, 214, 219, 255, 251, 218, 219, 255, 249, 218, 221, 255, 247, 214, 222, 255, 241, 212, 222, 255, 239, 212, 221, 255, 240, 212, 221, 255, 221, 212, 221, 255, 205, 212, 219, 255, 207, 212, 219, 255, 192, 212, 217, 255, 167, 214, 217, 255, 167, 214, 216, 255, 162, 212, 216, 255, 153, 214, 216, 255, 153, 221, 219, 255, 153, 221, 219, 255, 154, 220, 219, 255, 154, 216, 219, 255, 150, 212, 219, 255, 141, 210, 219, 255, 134, 208, 219, 255, 139, 207, 219, 255, 134, 207, 219, 255, 141, 208, 219, 255, 152, 214, 217, 255, 160, 216, 217, 255, 161, 216, 219, 255, 161, 214, 219, 255, 152, 216, 219, 255, 147, 216, 221, 255, 143, 218, 221, 255, 144, 220, 224, 255, 143, 223, 224, 255, 141, 223, 222, 255, 142, 221, 217, 255, 144, 221, 216, 255, 148, 223, 216, 255, 151, 223, 216, 255, 148, 225, 216, 255, 144, 225, 216, 255, 140, 225, 216, 255, 139, 223, 216, 255, 141, 223, 216, 255, 145, 221, 216, 255, 146, 221, 213, 255, 150, 221, 213, 255, 152, 221, 213, 255, 153, 221, 213, 255, 151, 223, 213, 255, 150, 223, 211, 255, 151, 225, 211, 255, 150, 225, 211, 255, 150, 225, 209, 255, 152, 225, 211, 255, 152, 225, 214, 255, 152, 225, 216, 255, 150, 225, 216, 255, 144, 225, 216, 255, 139, 225, 216, 255, 135, 225, 216, 255, 137, 225, 216, 255, 142, 225, 216, 255, 144, 225, 216, 255, 143, 225, 216, 255, 140, 225, 214, 255, 134, 225, 214, 255, 130, 225, 214, 255, 131, 225, 214, 255, 134, 225, 214, 255, 137, 225, 214, 255, 140, 225, 214, 255, 141, 225, 214, 255, 139, 225, 214, 255, 137, 225, 214, 255, 136, 223, 213, 255, 139, 223, 213, 255, 141, 223, 213, 255, 141, 223, 213, 255, 140, 223, 213, 255, 144, 225, 213, 255, 147, 225, 213, 255, 146, 225, 213, 255, 143, 225, 213, 255, 142, 223, 214, 255, 142, 214, 217, 255, 142, 212, 217, 255, 142, 210, 219, 255, 144, 210, 221, 255, 147, 210, 221, 255, 152, 210, 221, 255, 145, 210, 221, 255, 135, 214, 221, 255, 136, 214, 222, 255, 136, 216, 221, 255, 137, 221, 216, 255, 136, 223, 214, 255, 134, 225, 213, 255, 134, 227, 213, 255, 135, 229, 211, 255, 136, 233, 209, 255, 146, 235, 209, 255, 156, 236, 208, 255, 162, 238, 208, 255, 168, 238, 206, 255, 172, 231, 201, 255, 172, 229, 201, 255, 166, 231, 201, 255, 161, 231, 201, 255, 156, 229, 201, 255, 146, 229, 201, 255, 138, 229, 201, 255, 129, 227, 203, 255, 117, 227, 203, 255, 108, 227, 204, 255, 105, 227, 209, 255, 105, 227, 211, 255, 101, 227, 213, 255, 101, 225, 214, 255, 117, 223, 217, 255, 124, 221, 219, 255, 114, 216, 222, 255, 116, 212, 224, 255, 129, 210, 226, 255, 116, 208, 229, 255, 108, 207, 232, 255, 111, 205, 234, 255, 111, 205, 237, 255, 103, 205, 239, 255, 102, 203, 242, 255, 101, 203, 244, 255, 100, 203, 247, 255, 101, 201, 248, 255, 102, 201, 250, 255, 102, 201, 250, 255, 104, 197, 247, 255, 107, 197, 247, 255, 105, 195, 247, 255, 104, 194, 247, 255, 104, 194, 247, 255, 104, 194, 247, 255, 103, 194, 245, 255, 102, 194, 245, 255, 102, 194, 245, 255, 102, 194, 245, 255, 93, 181, 242, 255, 127, 179, 242, 255, 152, 173, 247, 255, 154, 169, 248, 255, 155, 166, 250, 255, 155, 166, 250, 255, 157, 168, 248, 255, 157, 171, 244, 255, 157, 175, 239, 255, 157, 177, 239, 255, 157, 171, 242, 255, 156, 169, 242, 255, 157, 171, 242, 255, 158, 171, 242, 255, 158, 173, 242, 255, 161, 175, 242, 255, 163, 175, 240, 255, 164, 177, 239, 255, 174, 179, 239, 255, 179, 179, 237, 255, 179, 182, 239, 255, 179, 182, 240, 255, 195, 184, 237, 255, 209, 186, 230, 255, 207, 188, 229, 255, 207, 190, 229, 255, 211, 190, 227, 255, 232, 194, 224, 255, 237, 195, 221, 255, 238, 197, 222, 255, 239, 201, 224, 255, 244, 203, 224, 255, 247, 203, 224, 255, 248, 205, 222, 255, 249, 205, 224, 255, 250, 205, 224, 255, 250, 205, 224, 255, 250, 207, 224, 255, 249, 207, 224, 255, 252, 207, 222, 255, 252, 207, 219, 255, 253, 207, 219, 255, 253, 207, 217, 255, 254, 205, 217, 255, 255, 205, 217, 255, 255, 205, 217, 255, 254, 205, 217, 255, 255, 207, 217, 255, 254, 207, 217, 255, 253, 207, 219, 255, 252, 203, 221, 255, 251, 203, 222, 255, 250, 205, 222, 255, 251, 207, 221, 255, 252, 208, 221, 255, 250, 210, 221, 255, 239, 214, 219, 255, 233, 214, 221, 255, 232, 216, 222, 255, 210, 218, 222, 255, 198, 218, 221, 255, 197, 216, 219, 255, 179, 216, 219, 255, 162, 216, 219, 255, 163, 214, 219, 255, 160, 212, 219, 255, 151, 212, 219, 255, 151, 212, 217, 255, 151, 210, 217, 255, 152, 210, 217, 255, 152, 214, 219, 255, 146, 214, 219, 255, 146, 214, 219, 255, 142, 212, 219, 255, 135, 210, 219, 255, 134, 210, 219, 255, 134, 208, 219, 255, 144, 207, 219, 255, 150, 207, 219, 255, 153, 208, 219, 255, 159, 210, 219, 255, 160, 212, 219, 255, 156, 214, 221, 255, 151, 216, 221, 255, 145, 220, 221, 255, 142, 221, 221, 255, 138, 225, 221, 255, 136, 227, 221, 255, 136, 231, 221, 255, 137, 231, 221, 255, 139, 225, 217, 255, 142, 223, 216, 255, 147, 223, 216, 255, 146, 223, 216, 255, 141, 223, 216, 255, 137, 223, 216, 255, 135, 223, 216, 255, 134, 223, 216, 255, 137, 223, 216, 255, 138, 223, 214, 255, 141, 223, 213, 255, 145, 223, 211, 255, 146, 223, 211, 255, 144, 223, 211, 255, 140, 223, 211, 255, 137, 223, 211, 255, 140, 223, 211, 255, 141, 223, 211, 255, 140, 223, 211, 255, 140, 223, 211, 255, 140, 225, 214, 255, 145, 225, 214, 255, 147, 225, 214, 255, 144, 225, 214, 255, 138, 225, 214, 255, 131, 225, 214, 255, 129, 225, 214, 255, 130, 225, 214, 255, 135, 225, 214, 255, 139, 225, 214, 255, 141, 223, 213, 255, 139, 223, 211, 255, 138, 223, 211, 255, 137, 223, 211, 255, 135, 223, 211, 255, 135, 223, 211, 255, 139, 223, 211, 255, 141, 223, 211, 255, 140, 223, 211, 255, 137, 223, 211, 255, 136, 223, 211, 255, 138, 223, 211, 255, 141, 223, 211, 255, 143, 223, 211, 255, 143, 223, 211, 255, 147, 223, 211, 255, 151, 223, 211, 255, 148, 223, 211, 255, 144, 223, 211, 255, 143, 223, 211, 255, 144, 220, 213, 255, 143, 218, 213, 255, 143, 214, 216, 255, 146, 210, 216, 255, 150, 207, 217, 255, 156, 205, 219, 255, 152, 205, 219, 255, 137, 207, 221, 255, 134, 208, 221, 255, 126, 210, 221, 255, 129, 216, 216, 255, 133, 220, 214, 255, 133, 221, 214, 255, 133, 221, 214, 255, 132, 223, 214, 255, 132, 223, 214, 255, 134, 225, 214, 255, 138, 227, 213, 255, 147, 229, 213, 255, 156, 229, 211, 255, 169, 227, 208, 255, 169, 227, 206, 255, 168, 229, 206, 255, 168, 229, 206, 255, 161, 229, 206, 255, 153, 229, 206, 255, 145, 229, 206, 255, 141, 227, 206, 255, 136, 227, 206, 255, 131, 227, 206, 255, 125, 231, 204, 255, 118, 233, 204, 255, 110, 233, 204, 255, 102, 235, 204, 255, 102, 236, 204, 255, 99, 235, 204, 255, 101, 231, 204, 255, 107, 229, 204, 255, 120, 225, 204, 255, 111, 223, 206, 255, 111, 220, 216, 255, 126, 216, 219, 255, 132, 214, 222, 255, 117, 212, 227, 255, 111, 210, 232, 255, 113, 208, 237, 255, 103, 207, 240, 255, 100, 205, 245, 255, 98, 203, 248, 255, 98, 201, 250, 255, 100, 199, 248, 255, 102, 197, 247, 255, 101, 195, 247, 255, 103, 194, 247, 255, 102, 194, 247, 255, 101, 194, 247, 255, 101, 194, 247, 255, 98, 195, 247, 255, 99, 195, 247, 255, 99, 197, 247, 255, 92, 188, 237, 255, 139, 182, 239, 255, 156, 177, 242, 255, 158, 169, 247, 255, 161, 168, 248, 255, 161, 166, 248, 255, 159, 168, 247, 255, 160, 171, 242, 255, 158, 175, 239, 255, 158, 177, 239, 255, 161, 173, 244, 255, 162, 171, 244, 255, 160, 173, 244, 255, 166, 177, 242, 255, 174, 177, 239, 255, 177, 181, 237, 255, 177, 181, 239, 255, 182, 182, 237, 255, 207, 186, 235, 255, 215, 186, 232, 255, 213, 190, 232, 255, 214, 192, 234, 255, 227, 192, 232, 255, 239, 194, 227, 255, 238, 195, 226, 255, 239, 197, 226, 255, 242, 199, 222, 255, 246, 199, 222, 255, 248, 201, 219, 255, 249, 201, 221, 255, 250, 203, 224, 255, 250, 205, 222, 255, 251, 205, 222, 255, 251, 205, 222, 255, 251, 205, 222, 255, 251, 205, 222, 255, 251, 205, 222, 255, 251, 205, 224, 255, 250, 205, 224, 255, 251, 205, 222, 255, 253, 207, 219, 255, 253, 207, 217, 255, 254, 207, 217, 255, 255, 207, 217, 255, 255, 205, 217, 255, 254, 205, 217, 255, 255, 208, 217, 255, 254, 208, 217, 255, 253, 208, 217, 255, 254, 207, 217, 255, 252, 203, 219, 255, 252, 207, 219, 255, 248, 214, 221, 255, 239, 218, 219, 255, 235, 214, 219, 255, 229, 208, 219, 255, 200, 207, 219, 255, 187, 210, 219, 255, 185, 218, 221, 255, 168, 221, 221, 255, 156, 220, 219, 255, 156, 216, 219, 255, 154, 216, 219, 255, 151, 216, 219, 255, 151, 214, 219, 255, 152, 214, 219, 255, 150, 212, 219, 255, 148, 210, 219, 255, 145, 210, 219, 255, 140, 210, 219, 255, 139, 212, 219, 255, 129, 212, 219, 255, 133, 212, 219, 255, 140, 212, 219, 255, 142, 210, 219, 255, 148, 210, 219, 255, 152, 210, 219, 255, 152, 208, 219, 255, 147, 208, 219, 255, 150, 208, 219, 255, 152, 212, 219, 255, 151, 212, 219, 255, 148, 214, 219, 255, 145, 218, 219, 255, 143, 220, 219, 255, 137, 221, 219, 255, 133, 225, 219, 255, 130, 229, 219, 255, 130, 231, 219, 255, 132, 231, 219, 255, 134, 225, 216, 255, 135, 223, 216, 255, 139, 223, 216, 255, 139, 223, 216, 255, 135, 223, 216, 255, 133, 223, 216, 255, 131, 223, 216, 255, 132, 223, 216, 255, 136, 223, 216, 255, 137, 223, 214, 255, 139, 223, 211, 255, 142, 223, 211, 255, 142, 223, 211, 255, 138, 223, 211, 255, 131, 223, 211, 255, 128, 223, 211, 255, 131, 223, 211, 255, 134, 223, 211, 255, 133, 223, 211, 255, 130, 223, 211, 255, 130, 225, 214, 255, 134, 225, 214, 255, 137, 225, 214, 255, 137, 225, 214, 255, 134, 225, 214, 255, 130, 225, 214, 255, 127, 225, 214, 255, 125, 225, 214, 255, 128, 225, 214, 255, 136, 225, 214, 255, 140, 223, 211, 255, 141, 223, 211, 255, 141, 223, 211, 255, 139, 223, 211, 255, 136, 223, 211, 255, 137, 223, 211, 255, 138, 223, 211, 255, 139, 223, 211, 255, 138, 223, 211, 255, 136, 223, 211, 255, 134, 223, 211, 255, 136, 223, 211, 255, 140, 223, 211, 255, 144, 223, 211, 255, 147, 223, 211, 255, 148, 223, 211, 255, 153, 223, 211, 255, 153, 223, 211, 255, 148, 223, 211, 255, 146, 223, 211, 255, 146, 221, 211, 255, 146, 220, 213, 255, 147, 214, 214, 255, 150, 210, 216, 255, 150, 208, 216, 255, 152, 205, 217, 255, 157, 205, 219, 255, 154, 207, 219, 255, 145, 208, 221, 255, 129, 210, 219, 255, 122, 214, 216, 255, 120, 216, 214, 255, 127, 218, 214, 255, 135, 218, 214, 255, 134, 220, 214, 255, 133, 220, 214, 255, 132, 221, 214, 255, 131, 223, 214, 255, 134, 223, 214, 255, 137, 223, 213, 255, 148, 225, 209, 255, 146, 225, 209, 255, 155, 227, 209, 255, 164, 227, 209, 255, 161, 229, 208, 255, 156, 229, 208, 255, 152, 229, 208, 255, 150, 229, 208, 255, 145, 227, 208, 255, 142, 229, 208, 255, 140, 231, 204, 255, 137, 235, 203, 255, 132, 235, 203, 255, 126, 236, 203, 255, 121, 238, 201, 255, 112, 238, 201, 255, 107, 236, 199, 255, 101, 233, 199, 255, 97, 231, 198, 255, 95, 229, 199, 255, 99, 225, 208, 255, 110, 223, 209, 255, 120, 221, 214, 255, 117, 220, 217, 255, 120, 218, 222, 255, 133, 214, 227, 255, 116, 212, 232, 255, 108, 212, 237, 255, 112, 208, 240, 255, 105, 208, 242, 255, 97, 205, 242, 255, 99, 205, 242, 255, 97, 203, 242, 255, 101, 201, 242, 255, 100, 199, 242, 255, 100, 199, 242, 255, 100, 201, 242, 255, 98, 203, 242, 255, 98, 205, 242, 255, 96, 205, 242, 255, 107, 192, 235, 255, 153, 184, 237, 255, 159, 179, 240, 255, 160, 173, 242, 255, 163, 171, 245, 255, 162, 171, 245, 255, 161, 173, 242, 255, 162, 177, 240, 255, 160, 181, 237, 255, 173, 182, 237, 255, 181, 181, 239, 255, 179, 182, 239, 255, 178, 184, 239, 255, 193, 184, 239, 255, 212, 188, 232, 255, 216, 190, 230, 255, 215, 192, 232, 255, 219, 192, 235, 255, 238, 194, 230, 255, 242, 195, 229, 255, 241, 197, 229, 255, 242, 199, 229, 255, 245, 199, 229, 255, 246, 199, 227, 255, 246, 201, 224, 255, 247, 203, 224, 255, 251, 203, 221, 255, 250, 203, 222, 255, 250, 207, 222, 255, 249, 205, 221, 255, 250, 199, 224, 255, 252, 199, 222, 255, 253, 199, 221, 255, 253, 199, 221, 255, 251, 199, 222, 255, 251, 201, 224, 255, 250, 201, 224, 255, 249, 203, 224, 255, 248, 203, 224, 255, 248, 205, 222, 255, 250, 207, 219, 255, 252, 207, 219, 255, 253, 207, 217, 255, 254, 207, 217, 255, 254, 208, 217, 255, 253, 208, 219, 255, 254, 208, 217, 255, 253, 210, 217, 255, 251, 210, 217, 255, 248, 210, 217, 255, 233, 214, 213, 255, 230, 214, 213, 255, 222, 216, 214, 255, 196, 216, 214, 255, 181, 216, 214, 255, 179, 216, 216, 255, 160, 216, 216, 255, 152, 216, 217, 255, 147, 218, 217, 255, 147, 218, 217, 255, 146, 214, 219, 255, 147, 214, 219, 255, 145, 214, 219, 255, 146, 214, 219, 255, 148, 214, 219, 255, 146, 212, 219, 255, 141, 212, 219, 255, 137, 212, 219, 255, 130, 212, 219, 255, 122, 212, 219, 255, 130, 210, 219, 255, 134, 210, 219, 255, 148, 210, 219, 255, 159, 212, 219, 255, 158, 212, 219, 255, 158, 212, 219, 255, 153, 212, 219, 255, 148, 212, 219, 255, 144, 212, 219, 255, 144, 212, 219, 255, 144, 214, 217, 255, 144, 216, 217, 255, 145, 216, 217, 255, 144, 220, 217, 255, 140, 221, 217, 255, 135, 221, 217, 255, 132, 225, 217, 255, 129, 227, 217, 255, 126, 229, 217, 255, 124, 227, 217, 255, 125, 225, 216, 255, 126, 223, 214, 255, 129, 223, 214, 255, 131, 223, 214, 255, 131, 223, 214, 255, 130, 223, 214, 255, 132, 223, 214, 255, 139, 223, 214, 255, 145, 223, 214, 255, 146, 223, 214, 255, 143, 223, 213, 255, 142, 223, 211, 255, 141, 223, 211, 255, 140, 223, 211, 255, 137, 223, 211, 255, 131, 223, 211, 255, 127, 223, 211, 255, 127, 223, 211, 255, 129, 223, 211, 255, 128, 223, 213, 255, 129, 225, 214, 255, 129, 225, 214, 255, 129, 225, 214, 255, 129, 225, 214, 255, 129, 225, 214, 255, 126, 225, 214, 255, 126, 225, 214, 255, 124, 225, 214, 255, 127, 225, 214, 255, 134, 225, 214, 255, 140, 223, 213, 255, 142, 223, 211, 255, 141, 223, 211, 255, 136, 223, 211, 255, 132, 223, 211, 255, 130, 223, 211, 255, 132, 223, 211, 255, 137, 223, 211, 255, 140, 223, 211, 255, 139, 223, 211, 255, 138, 223, 211, 255, 138, 223, 211, 255, 141, 223, 211, 255, 144, 223, 211, 255, 147, 223, 211, 255, 150, 223, 211, 255, 154, 223, 211, 255, 153, 223, 211, 255, 148, 223, 211, 255, 145, 223, 211, 255, 144, 221, 211, 255, 144, 221, 214, 255, 146, 218, 214, 255, 150, 214, 214, 255, 152, 210, 216, 255, 153, 208, 217, 255, 155, 208, 217, 255, 157, 208, 219, 255, 155, 210, 219, 255, 150, 210, 219, 255, 137, 214, 216, 255, 119, 214, 216, 255, 120, 216, 216, 255, 130, 216, 216, 255, 131, 218, 216, 255, 135, 218, 216, 255, 136, 220, 216, 255, 134, 221, 216, 255, 135, 221, 216, 255, 131, 221, 214, 255, 132, 223, 211, 255, 131, 223, 211, 255, 137, 225, 211, 255, 145, 225, 211, 255, 150, 227, 209, 255, 152, 227, 208, 255, 154, 227, 208, 255, 156, 229, 206, 255, 153, 229, 206, 255, 151, 229, 204, 255, 148, 231, 204, 255, 146, 233, 204, 255, 142, 235, 203, 255, 141, 236, 203, 255, 140, 236, 203, 255, 132, 236, 201, 255, 123, 235, 201, 255, 121, 233, 199, 255, 112, 231, 199, 255, 103, 229, 199, 255, 99, 229, 201, 255, 93, 229, 203, 255, 94, 227, 206, 255, 96, 227, 209, 255, 101, 225, 213, 255, 114, 223, 217, 255, 109, 223, 221, 255, 115, 221, 224, 255, 131, 220, 227, 255, 118, 220, 229, 255, 104, 218, 232, 255, 112, 216, 234, 255, 113, 214, 234, 255, 103, 212, 234, 255, 97, 210, 234, 255, 99, 210, 234, 255, 95, 212, 234, 255, 97, 214, 234, 255, 98, 216, 234, 255, 103, 218, 234, 255, 109, 197, 232, 255, 156, 188, 235, 255, 160, 182, 239, 255, 161, 181, 239, 255, 166, 179, 240, 255, 180, 179, 240, 255, 184, 181, 237, 255, 180, 184, 235, 255, 179, 190, 234, 255, 210, 192, 232, 255, 223, 192, 232, 255, 220, 194, 232, 255, 219, 195, 232, 255, 227, 195, 235, 255, 240, 195, 232, 255, 241, 199, 230, 255, 241, 201, 230, 255, 243, 201, 232, 255, 245, 203, 229, 255, 246, 203, 227, 255, 247, 205, 227, 255, 247, 207, 227, 255, 249, 207, 227, 255, 250, 207, 224, 255, 249, 207, 224, 255, 250, 208, 221, 255, 249, 207, 222, 255, 247, 207, 224, 255, 247, 207, 224, 255, 249, 207, 224, 255, 251, 197, 222, 255, 253, 195, 221, 255, 253, 197, 221, 255, 252, 197, 221, 255, 251, 197, 222, 255, 250, 199, 222, 255, 249, 201, 224, 255, 248, 201, 224, 255, 247, 203, 224, 255, 246, 203, 222, 255, 247, 207, 219, 255, 250, 207, 219, 255, 251, 207, 217, 255, 252, 208, 217, 255, 252, 210, 217, 255, 251, 210, 219, 255, 251, 212, 219, 255, 239, 212, 217, 255, 226, 214, 219, 255, 216, 216, 217, 255, 182, 225, 208, 255, 175, 221, 208, 255, 171, 212, 209, 255, 153, 208, 209, 255, 146, 214, 211, 255, 147, 221, 213, 255, 146, 227, 214, 255, 144, 223, 216, 255, 146, 214, 216, 255, 144, 207, 217, 255, 144, 208, 217, 255, 147, 212, 217, 255, 144, 212, 217, 255, 144, 212, 217, 255, 138, 212, 217, 255, 130, 212, 217, 255, 121, 212, 217, 255, 121, 212, 217, 255, 128, 214, 217, 255, 136, 212, 217, 255, 151, 208, 217, 255, 159, 210, 217, 255, 164, 210, 217, 255, 163, 212, 217, 255, 156, 212, 217, 255, 152, 214, 217, 255, 148, 216, 217, 255, 147, 216, 217, 255, 144, 218, 217, 255, 140, 218, 217, 255, 140, 218, 216, 255, 141, 220, 216, 255, 144, 220, 216, 255, 146, 221, 216, 255, 141, 221, 216, 255, 136, 221, 216, 255, 132, 223, 216, 255, 126, 225, 216, 255, 119, 225, 216, 255, 115, 225, 216, 255, 119, 223, 214, 255, 125, 223, 214, 255, 127, 223, 214, 255, 127, 223, 214, 255, 126, 223, 214, 255, 127, 223, 214, 255, 133, 223, 214, 255, 145, 223, 214, 255, 153, 223, 214, 255, 151, 223, 214, 255, 140, 223, 213, 255, 134, 223, 211, 255, 132, 223, 211, 255, 138, 223, 211, 255, 142, 223, 211, 255, 136, 223, 211, 255, 128, 223, 211, 255, 127, 223, 211, 255, 130, 223, 211, 255, 131, 223, 213, 255, 132, 225, 214, 255, 129, 225, 214, 255, 127, 225, 214, 255, 128, 225, 214, 255, 130, 225, 214, 255, 125, 225, 214, 255, 119, 225, 214, 255, 119, 225, 214, 255, 126, 225, 214, 255, 132, 225, 214, 255, 141, 223, 213, 255, 146, 223, 211, 255, 144, 223, 211, 255, 138, 223, 211, 255, 133, 223, 211, 255, 127, 223, 211, 255, 131, 223, 211, 255, 141, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 145, 223, 211, 255, 145, 223, 211, 255, 150, 223, 211, 255, 150, 223, 211, 255, 147, 223, 211, 255, 144, 223, 211, 255, 142, 223, 213, 255, 140, 221, 214, 255, 141, 220, 214, 255, 144, 218, 214, 255, 151, 212, 216, 255, 154, 210, 216, 255, 153, 210, 217, 255, 152, 212, 217, 255, 148, 212, 219, 255, 151, 214, 219, 255, 150, 212, 217, 255, 142, 212, 217, 255, 133, 214, 217, 255, 126, 214, 217, 255, 121, 216, 217, 255, 131, 216, 217, 255, 137, 218, 217, 255, 138, 218, 217, 255, 138, 218, 217, 255, 133, 220, 216, 255, 132, 221, 214, 255, 132, 221, 214, 255, 129, 221, 213, 255, 129, 223, 213, 255, 134, 223, 209, 255, 135, 225, 209, 255, 140, 227, 208, 255, 150, 227, 206, 255, 154, 229, 204, 255, 158, 229, 204, 255, 157, 229, 204, 255, 156, 231, 206, 255, 150, 233, 204, 255, 146, 235, 204, 255, 143, 235, 203, 255, 139, 235, 201, 255, 136, 235, 201, 255, 133, 233, 201, 255, 129, 231, 199, 255, 124, 229, 199, 255, 118, 233, 196, 255, 111, 235, 196, 255, 107, 235, 199, 255, 101, 235, 199, 255, 93, 235, 203, 255, 89, 233, 204, 255, 90, 233, 208, 255, 97, 231, 211, 255, 102, 231, 213, 255, 107, 231, 214, 255, 110, 229, 222, 255, 127, 227, 224, 255, 137, 225, 224, 255, 116, 223, 224, 255, 110, 223, 224, 255, 119, 223, 224, 255, 119, 223, 224, 255, 118, 225, 224, 255, 121, 227, 224, 255, 140, 229, 224, 255, 138, 199, 229, 255, 186, 192, 230, 255, 187, 188, 232, 255, 186, 186, 234, 255, 190, 184, 235, 255, 219, 186, 234, 255, 226, 188, 232, 255, 224, 194, 229, 255, 223, 195, 230, 255, 235, 199, 229, 255, 242, 199, 229, 255, 241, 201, 230, 255, 240, 201, 232, 255, 241, 201, 232, 255, 243, 203, 232, 255, 244, 205, 230, 255, 244, 207, 229, 255, 246, 207, 227, 255, 245, 208, 227, 255, 248, 208, 224, 255, 250, 208, 224, 255, 251, 210, 224, 255, 251, 210, 222, 255, 251, 210, 222, 255, 251, 210, 222, 255, 250, 208, 222, 255, 246, 208, 224, 255, 247, 208, 224, 255, 248, 208, 226, 255, 249, 207, 224, 255, 252, 195, 221, 255, 253, 195, 221, 255, 251, 195, 221, 255, 250, 197, 221, 255, 249, 199, 221, 255, 249, 199, 221, 255, 249, 201, 222, 255, 249, 203, 222, 255, 248, 203, 222, 255, 247, 205, 221, 255, 247, 207, 219, 255, 247, 207, 219, 255, 248, 207, 219, 255, 245, 210, 217, 255, 231, 212, 219, 255, 221, 214, 219, 255, 220, 216, 219, 255, 195, 216, 219, 255, 170, 216, 219, 255, 165, 218, 217, 255, 150, 223, 206, 255, 147, 223, 204, 255, 150, 221, 206, 255, 145, 218, 208, 255, 147, 218, 211, 255, 148, 218, 211, 255, 147, 218, 214, 255, 145, 216, 216, 255, 146, 214, 216, 255, 143, 210, 217, 255, 143, 208, 217, 255, 140, 208, 217, 255, 133, 210, 217, 255, 130, 210, 217, 255, 123, 212, 217, 255, 123, 212, 217, 255, 128, 214, 217, 255, 140, 214, 217, 255, 154, 214, 217, 255, 160, 214, 217, 255, 164, 208, 217, 255, 160, 208, 217, 255, 155, 210, 217, 255, 152, 212, 217, 255, 150, 214, 217, 255, 146, 216, 217, 255, 148, 218, 217, 255, 145, 220, 217, 255, 143, 220, 217, 255, 140, 221, 216, 255, 143, 221, 214, 255, 144, 221, 214, 255, 144, 221, 214, 255, 142, 221, 214, 255, 137, 221, 214, 255, 132, 221, 214, 255, 123, 223, 214, 255, 115, 223, 214, 255, 111, 223, 214, 255, 114, 223, 214, 255, 127, 223, 214, 255, 136, 223, 214, 255, 138, 223, 214, 255, 134, 223, 214, 255, 129, 223, 214, 255, 127, 223, 214, 255, 132, 223, 214, 255, 140, 223, 214, 255, 145, 223, 214, 255, 141, 223, 214, 255, 132, 223, 213, 255, 125, 223, 211, 255, 122, 223, 211, 255, 127, 223, 211, 255, 132, 223, 211, 255, 131, 223, 211, 255, 132, 223, 211, 255, 134, 223, 211, 255, 134, 223, 211, 255, 133, 223, 213, 255, 131, 225, 214, 255, 128, 225, 214, 255, 128, 225, 214, 255, 132, 225, 214, 255, 138, 225, 214, 255, 134, 225, 214, 255, 122, 225, 214, 255, 118, 225, 214, 255, 125, 225, 214, 255, 133, 225, 214, 255, 139, 223, 213, 255, 146, 223, 211, 255, 146, 223, 211, 255, 144, 223, 211, 255, 144, 223, 211, 255, 143, 223, 211, 255, 147, 223, 211, 255, 155, 223, 211, 255, 155, 223, 211, 255, 147, 223, 211, 255, 150, 223, 211, 255, 150, 223, 211, 255, 148, 223, 211, 255, 147, 223, 211, 255, 144, 223, 211, 255, 143, 223, 211, 255, 145, 223, 211, 255, 144, 223, 211, 255, 142, 223, 211, 255, 141, 223, 213, 255, 141, 225, 214, 255, 139, 223, 214, 255, 138, 221, 214, 255, 141, 220, 214, 255, 145, 216, 216, 255, 146, 216, 216, 255, 147, 214, 217, 255, 147, 216, 217, 255, 143, 216, 217, 255, 142, 216, 217, 255, 143, 212, 217, 255, 148, 210, 217, 255, 150, 212, 217, 255, 140, 212, 217, 255, 127, 214, 217, 255, 122, 214, 217, 255, 123, 214, 217, 255, 128, 214, 217, 255, 135, 216, 217, 255, 137, 216, 217, 255, 135, 218, 217, 255, 132, 220, 216, 255, 131, 220, 216, 255, 129, 221, 214, 255, 129, 221, 211, 255, 128, 223, 209, 255, 128, 225, 208, 255, 132, 225, 206, 255, 139, 229, 204, 255, 148, 229, 204, 255, 151, 229, 206, 255, 155, 229, 208, 255, 153, 231, 206, 255, 152, 233, 204, 255, 145, 233, 204, 255, 143, 235, 203, 255, 144, 235, 203, 255, 138, 231, 201, 255, 135, 231, 201, 255, 134, 231, 199, 255, 130, 235, 195, 255, 126, 238, 193, 255, 123, 238, 195, 255, 119, 238, 195, 255, 114, 238, 196, 255, 108, 240, 198, 255, 100, 240, 199, 255, 91, 240, 201, 255, 85, 240, 201, 255, 87, 238, 203, 255, 87, 238, 211, 255, 97, 236, 214, 255, 114, 235, 214, 255, 109, 233, 214, 255, 120, 231, 214, 255, 139, 231, 214, 255, 154, 233, 214, 255, 157, 235, 214, 255, 167, 236, 214, 255, 181, 236, 214, 255, 204, 199, 226, 255, 229, 195, 226, 255, 228, 194, 227, 255, 227, 192, 227, 255, 227, 190, 229, 255, 238, 194, 229, 255, 239, 195, 229, 255, 240, 199, 229, 255, 241, 201, 229, 255, 237, 205, 227, 255, 238, 205, 229, 255, 239, 205, 230, 255, 240, 205, 230, 255, 242, 205, 229, 255, 245, 207, 229, 255, 247, 208, 227, 255, 246, 208, 227, 255, 247, 210, 226, 255, 248, 212, 222, 255, 249, 212, 222, 255, 252, 210, 221, 255, 254, 212, 219, 255, 254, 210, 219, 255, 252, 210, 219, 255, 253, 210, 221, 255, 251, 208, 222, 255, 250, 208, 222, 255, 250, 208, 222, 255, 250, 208, 224, 255, 251, 205, 222, 255, 253, 199, 221, 255, 251, 197, 221, 255, 248, 199, 221, 255, 247, 201, 221, 255, 247, 201, 221, 255, 247, 203, 221, 255, 246, 205, 221, 255, 247, 207, 221, 255, 244, 207, 221, 255, 243, 207, 221, 255, 241, 207, 219, 255, 220, 208, 219, 255, 212, 208, 219, 255, 208, 212, 219, 255, 185, 216, 219, 255, 168, 218, 219, 255, 168, 218, 219, 255, 157, 220, 219, 255, 146, 218, 219, 255, 148, 216, 217, 255, 148, 216, 209, 255, 148, 220, 206, 255, 147, 227, 208, 255, 147, 229, 211, 255, 147, 221, 213, 255, 147, 210, 214, 255, 145, 203, 216, 255, 143, 203, 217, 255, 143, 210, 219, 255, 133, 214, 219, 255, 127, 208, 217, 255, 127, 207, 217, 255, 119, 208, 217, 255, 125, 210, 217, 255, 136, 212, 217, 255, 145, 212, 217, 255, 155, 214, 217, 255, 161, 216, 217, 255, 161, 216, 217, 255, 157, 214, 217, 255, 154, 210, 217, 255, 151, 208, 217, 255, 150, 210, 217, 255, 148, 212, 217, 255, 144, 216, 217, 255, 142, 218, 217, 255, 150, 220, 217, 255, 151, 221, 217, 255, 150, 221, 217, 255, 145, 223, 216, 255, 145, 223, 211, 255, 150, 223, 211, 255, 143, 223, 211, 255, 135, 223, 211, 255, 132, 223, 211, 255, 131, 221, 211, 255, 124, 221, 211, 255, 119, 221, 211, 255, 120, 221, 211, 255, 126, 221, 211, 255, 137, 223, 213, 255, 141, 225, 214, 255, 139, 225, 214, 255, 137, 225, 214, 255, 137, 225, 214, 255, 132, 225, 214, 255, 131, 225, 214, 255, 133, 225, 214, 255, 135, 225, 214, 255, 132, 225, 213, 255, 130, 225, 211, 255, 128, 225, 211, 255, 126, 225, 211, 255, 124, 225, 211, 255, 124, 225, 211, 255, 125, 225, 211, 255, 132, 225, 211, 255, 136, 225, 211, 255, 133, 225, 211, 255, 130, 225, 213, 255, 129, 225, 214, 255, 126, 225, 214, 255, 127, 225, 214, 255, 134, 225, 214, 255, 140, 225, 214, 255, 138, 225, 214, 255, 128, 225, 214, 255, 120, 225, 214, 255, 120, 225, 214, 255, 124, 225, 214, 255, 131, 223, 213, 255, 137, 223, 211, 255, 139, 223, 211, 255, 141, 223, 211, 255, 146, 223, 211, 255, 150, 223, 211, 255, 153, 223, 211, 255, 156, 223, 211, 255, 154, 223, 211, 255, 143, 223, 211, 255, 140, 223, 211, 255, 140, 223, 211, 255, 141, 223, 211, 255, 143, 223, 211, 255, 145, 223, 211, 255, 146, 223, 211, 255, 143, 223, 211, 255, 136, 223, 211, 255, 130, 223, 211, 255, 131, 223, 213, 255, 134, 225, 214, 255, 134, 225, 214, 255, 134, 223, 214, 255, 137, 221, 214, 255, 139, 220, 216, 255, 140, 220, 216, 255, 142, 218, 216, 255, 140, 218, 216, 255, 141, 220, 216, 255, 145, 218, 217, 255, 147, 212, 217, 255, 146, 210, 217, 255, 151, 210, 217, 255, 153, 210, 217, 255, 145, 210, 217, 255, 134, 212, 217, 255, 121, 212, 217, 255, 113, 212, 217, 255, 118, 214, 217, 255, 125, 214, 217, 255, 133, 218, 219, 255, 135, 218, 217, 255, 134, 218, 217, 255, 133, 218, 216, 255, 131, 218, 213, 255, 130, 220, 211, 255, 128, 221, 209, 255, 126, 223, 208, 255, 126, 227, 206, 255, 131, 229, 206, 255, 134, 227, 208, 255, 140, 227, 208, 255, 143, 229, 208, 255, 151, 229, 206, 255, 151, 231, 204, 255, 148, 231, 204, 255, 146, 233, 203, 255, 141, 231, 203, 255, 140, 231, 203, 255, 139, 233, 199, 255, 136, 236, 196, 255, 132, 238, 195, 255, 129, 238, 195, 255, 128, 240, 195, 255, 127, 240, 195, 255, 123, 242, 195, 255, 118, 242, 195, 255, 112, 242, 196, 255, 108, 244, 196, 255, 97, 242, 196, 255, 89, 242, 201, 255, 85, 240, 203, 255, 85, 238, 203, 255, 85, 238, 203, 255, 92, 236, 203, 255, 105, 236, 203, 255, 119, 238, 203, 255, 130, 238, 203, 255, 151, 240, 203, 255, 161, 242, 203, 255, 238, 199, 226, 255, 242, 197, 226, 255, 240, 195, 227, 255, 239, 195, 227, 255, 238, 195, 227, 255, 237, 197, 227, 255, 237, 201, 229, 255, 238, 203, 229, 255, 240, 207, 227, 255, 241, 207, 227, 255, 241, 207, 229, 255, 243, 207, 229, 255, 245, 207, 227, 255, 245, 207, 227, 255, 247, 207, 226, 255, 251, 208, 222, 255, 250, 208, 222, 255, 249, 208, 222, 255, 250, 212, 219, 255, 250, 210, 221, 255, 252, 210, 219, 255, 253, 208, 219, 255, 255, 208, 217, 255, 255, 208, 217, 255, 254, 208, 219, 255, 252, 208, 222, 255, 252, 208, 221, 255, 251, 207, 222, 255, 251, 207, 222, 255, 252, 207, 219, 255, 252, 203, 219, 255, 249, 203, 219, 255, 246, 205, 219, 255, 247, 207, 219, 255, 248, 207, 219, 255, 243, 208, 219, 255, 237, 210, 219, 255, 233, 212, 219, 255, 212, 212, 219, 255, 206, 212, 219, 255, 203, 208, 219, 255, 176, 208, 219, 255, 163, 212, 219, 255, 163, 216, 219, 255, 153, 218, 219, 255, 146, 220, 219, 255, 146, 221, 219, 255, 146, 220, 219, 255, 146, 220, 219, 255, 146, 218, 217, 255, 146, 218, 213, 255, 146, 218, 213, 255, 144, 220, 213, 255, 146, 216, 216, 255, 144, 214, 217, 255, 142, 208, 219, 255, 136, 207, 221, 255, 125, 205, 221, 255, 128, 205, 224, 255, 121, 207, 222, 255, 123, 207, 217, 255, 141, 207, 216, 255, 138, 208, 216, 255, 138, 210, 216, 255, 152, 212, 216, 255, 158, 214, 216, 255, 158, 216, 216, 255, 154, 218, 216, 255, 148, 218, 216, 255, 145, 216, 216, 255, 144, 212, 216, 255, 142, 210, 216, 255, 144, 212, 216, 255, 146, 214, 216, 255, 144, 218, 216, 255, 145, 220, 216, 255, 153, 221, 216, 255, 155, 223, 216, 255, 150, 223, 216, 255, 140, 225, 216, 255, 141, 225, 211, 255, 148, 225, 209, 255, 143, 225, 209, 255, 136, 223, 209, 255, 138, 223, 209, 255, 141, 223, 209, 255, 139, 221, 209, 255, 137, 221, 209, 255, 135, 221, 209, 255, 135, 223, 209, 255, 133, 225, 211, 255, 130, 225, 211, 255, 128, 225, 211, 255, 129, 225, 211, 255, 133, 225, 211, 255, 132, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 133, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 136, 225, 211, 255, 130, 225, 211, 255, 128, 225, 211, 255, 133, 225, 211, 255, 135, 225, 211, 255, 132, 225, 211, 255, 127, 225, 211, 255, 125, 225, 214, 255, 124, 225, 214, 255, 126, 225, 214, 255, 130, 225, 214, 255, 136, 225, 214, 255, 136, 225, 214, 255, 133, 225, 214, 255, 128, 225, 214, 255, 125, 225, 214, 255, 125, 225, 214, 255, 127, 223, 211, 255, 128, 223, 211, 255, 127, 223, 211, 255, 127, 223, 211, 255, 134, 223, 211, 255, 140, 223, 211, 255, 141, 223, 211, 255, 144, 223, 211, 255, 145, 223, 211, 255, 140, 223, 211, 255, 136, 223, 211, 255, 135, 223, 211, 255, 138, 223, 211, 255, 141, 223, 211, 255, 147, 223, 211, 255, 147, 223, 211, 255, 140, 223, 211, 255, 133, 223, 211, 255, 132, 223, 211, 255, 136, 223, 211, 255, 136, 225, 214, 255, 131, 225, 214, 255, 130, 223, 214, 255, 134, 223, 214, 255, 138, 223, 214, 255, 140, 221, 214, 255, 139, 221, 214, 255, 136, 221, 216, 255, 141, 221, 216, 255, 148, 220, 216, 255, 155, 212, 217, 255, 153, 210, 219, 255, 154, 210, 219, 255, 157, 210, 219, 255, 158, 210, 219, 255, 154, 212, 219, 255, 142, 210, 219, 255, 127, 210, 219, 255, 115, 212, 219, 255, 105, 212, 219, 255, 114, 216, 219, 255, 129, 216, 219, 255, 132, 214, 217, 255, 132, 214, 217, 255, 133, 214, 214, 255, 132, 218, 213, 255, 130, 220, 211, 255, 130, 221, 209, 255, 126, 225, 208, 255, 127, 225, 208, 255, 127, 225, 209, 255, 129, 225, 209, 255, 130, 225, 209, 255, 137, 225, 208, 255, 143, 227, 208, 255, 147, 229, 206, 255, 147, 229, 204, 255, 144, 229, 204, 255, 143, 231, 203, 255, 143, 231, 203, 255, 140, 235, 199, 255, 139, 235, 199, 255, 136, 236, 199, 255, 134, 236, 198, 255, 133, 238, 196, 255, 130, 240, 195, 255, 128, 240, 195, 255, 127, 242, 195, 255, 123, 244, 195, 255, 117, 244, 195, 255, 113, 242, 196, 255, 104, 242, 196, 255, 97, 240, 196, 255, 92, 238, 196, 255, 86, 238, 196, 255, 85, 238, 196, 255, 85, 238, 196, 255, 86, 240, 196, 255, 96, 242, 196, 255, 107, 242, 196, 255, 238, 201, 227, 255, 238, 201, 227, 255, 238, 201, 226, 255, 238, 201, 226, 255, 238, 201, 224, 255, 238, 203, 224, 255, 239, 205, 226, 255, 241, 207, 226, 255, 243, 208, 227, 255, 245, 208, 227, 255, 246, 207, 227, 255, 247, 205, 226, 255, 249, 205, 226, 255, 249, 205, 224, 255, 250, 205, 224, 255, 251, 207, 221, 255, 250, 207, 221, 255, 249, 207, 221, 255, 248, 208, 219, 255, 247, 207, 219, 255, 249, 207, 219, 255, 251, 207, 219, 255, 253, 207, 217, 255, 255, 207, 216, 255, 254, 207, 219, 255, 253, 207, 219, 255, 252, 207, 221, 255, 251, 207, 221, 255, 250, 205, 221, 255, 250, 207, 219, 255, 249, 210, 217, 255, 246, 210, 219, 255, 245, 210, 219, 255, 238, 212, 219, 255, 236, 214, 219, 255, 221, 216, 219, 255, 196, 216, 219, 255, 192, 218, 219, 255, 168, 218, 219, 255, 160, 216, 219, 255, 161, 210, 219, 255, 151, 210, 219, 255, 146, 214, 219, 255, 147, 218, 219, 255, 145, 220, 219, 255, 145, 221, 219, 255, 146, 221, 219, 255, 146, 220, 219, 255, 145, 218, 219, 255, 145, 218, 217, 255, 144, 220, 217, 255, 145, 214, 217, 255, 142, 207, 219, 255, 139, 201, 221, 255, 134, 205, 222, 255, 123, 210, 224, 255, 123, 212, 224, 255, 119, 208, 226, 255, 128, 201, 226, 255, 140, 197, 226, 255, 144, 207, 217, 255, 156, 208, 216, 255, 151, 210, 216, 255, 144, 210, 216, 255, 150, 212, 216, 255, 151, 216, 216, 255, 150, 216, 216, 255, 144, 218, 216, 255, 139, 220, 216, 255, 139, 218, 216, 255, 141, 214, 216, 255, 143, 212, 216, 255, 146, 214, 216, 255, 148, 216, 216, 255, 148, 220, 216, 255, 148, 221, 216, 255, 150, 221, 216, 255, 147, 225, 216, 255, 142, 225, 216, 255, 137, 227, 214, 255, 139, 227, 211, 255, 142, 227, 209, 255, 140, 227, 209, 255, 139, 225, 209, 255, 141, 223, 209, 255, 142, 223, 209, 255, 142, 221, 209, 255, 139, 221, 209, 255, 134, 221, 209, 255, 129, 223, 209, 255, 125, 225, 211, 255, 125, 225, 211, 255, 127, 225, 211, 255, 125, 225, 211, 255, 126, 225, 211, 255, 129, 225, 211, 255, 132, 225, 211, 255, 128, 225, 211, 255, 128, 225, 211, 255, 130, 225, 211, 255, 132, 225, 211, 255, 138, 225, 211, 255, 143, 225, 211, 255, 146, 225, 211, 255, 140, 225, 211, 255, 137, 225, 211, 255, 138, 225, 211, 255, 137, 225, 211, 255, 135, 225, 211, 255, 132, 225, 213, 255, 126, 225, 214, 255, 124, 225, 214, 255, 124, 225, 214, 255, 126, 225, 214, 255, 135, 225, 214, 255, 137, 225, 214, 255, 134, 225, 214, 255, 132, 225, 214, 255, 135, 225, 214, 255, 139, 225, 214, 255, 139, 223, 213, 255, 135, 223, 211, 255, 132, 223, 211, 255, 125, 223, 211, 255, 127, 223, 211, 255, 133, 223, 211, 255, 132, 223, 211, 255, 134, 223, 211, 255, 138, 223, 211, 255, 139, 223, 211, 255, 136, 223, 211, 255, 134, 223, 211, 255, 137, 223, 211, 255, 141, 223, 211, 255, 146, 223, 211, 255, 148, 223, 211, 255, 140, 223, 211, 255, 135, 223, 211, 255, 139, 223, 211, 255, 147, 223, 213, 255, 147, 225, 214, 255, 138, 225, 214, 255, 132, 225, 214, 255, 135, 225, 214, 255, 140, 225, 214, 255, 143, 225, 214, 255, 139, 223, 214, 255, 137, 223, 213, 255, 139, 221, 213, 255, 141, 220, 213, 255, 144, 214, 217, 255, 146, 212, 217, 255, 152, 212, 217, 255, 158, 212, 217, 255, 159, 212, 217, 255, 159, 212, 217, 255, 157, 212, 217, 255, 151, 210, 217, 255, 134, 212, 217, 255, 115, 212, 217, 255, 109, 216, 219, 255, 112, 216, 219, 255, 115, 214, 217, 255, 124, 210, 217, 255, 132, 210, 216, 255, 134, 212, 214, 255, 133, 216, 214, 255, 133, 220, 213, 255, 131, 223, 211, 255, 130, 223, 211, 255, 128, 223, 211, 255, 127, 223, 211, 255, 126, 223, 209, 255, 127, 223, 209, 255, 130, 223, 209, 255, 137, 225, 208, 255, 139, 225, 206, 255, 140, 229, 206, 255, 143, 229, 204, 255, 145, 231, 204, 255, 144, 231, 204, 255, 143, 231, 204, 255, 142, 233, 204, 255, 140, 233, 203, 255, 137, 235, 201, 255, 135, 236, 199, 255, 134, 238, 199, 255, 133, 240, 198, 255, 131, 240, 196, 255, 128, 240, 195, 255, 125, 240, 193, 255, 121, 240, 193, 255, 116, 238, 193, 255, 112, 236, 193, 255, 105, 236, 193, 255, 98, 236, 193, 255, 92, 236, 193, 255, 85, 238, 193, 255, 82, 240, 193, 255, 82, 242, 193, 255, 239, 205, 227, 255, 239, 205, 227, 255, 240, 205, 226, 255, 240, 205, 224, 255, 241, 205, 222, 255, 241, 205, 222, 255, 243, 207, 224, 255, 244, 207, 226, 255, 246, 208, 227, 255, 247, 208, 227, 255, 248, 205, 226, 255, 250, 203, 224, 255, 250, 203, 224, 255, 249, 203, 224, 255, 248, 203, 224, 255, 248, 205, 222, 255, 248, 205, 221, 255, 247, 205, 221, 255, 248, 205, 219, 255, 247, 205, 219, 255, 248, 207, 219, 255, 248, 207, 219, 255, 249, 207, 217, 255, 252, 207, 217, 255, 252, 207, 217, 255, 252, 207, 217, 255, 251, 207, 219, 255, 250, 207, 219, 255, 248, 205, 217, 255, 247, 207, 219, 255, 239, 216, 219, 255, 230, 218, 219, 255, 224, 218, 219, 255, 200, 218, 219, 255, 190, 218, 219, 255, 179, 218, 219, 255, 155, 220, 219, 255, 152, 221, 219, 255, 147, 221, 219, 255, 145, 218, 219, 255, 145, 212, 219, 255, 144, 212, 219, 255, 146, 216, 219, 255, 148, 220, 219, 255, 147, 221, 219, 255, 147, 221, 219, 255, 146, 221, 219, 255, 145, 220, 219, 255, 145, 216, 219, 255, 145, 212, 219, 255, 142, 208, 222, 255, 136, 207, 224, 255, 127, 205, 224, 255, 118, 203, 224, 255, 123, 203, 226, 255, 122, 205, 227, 255, 137, 205, 227, 255, 146, 203, 227, 255, 144, 201, 227, 255, 153, 203, 226, 255, 147, 210, 217, 255, 143, 212, 216, 255, 144, 214, 216, 255, 145, 214, 216, 255, 145, 216, 216, 255, 143, 218, 216, 255, 142, 218, 216, 255, 139, 220, 216, 255, 138, 220, 216, 255, 142, 220, 216, 255, 148, 216, 216, 255, 154, 216, 216, 255, 155, 218, 216, 255, 153, 218, 216, 255, 154, 221, 216, 255, 151, 221, 216, 255, 144, 223, 216, 255, 139, 225, 216, 255, 137, 227, 216, 255, 136, 227, 214, 255, 133, 227, 209, 255, 132, 227, 209, 255, 135, 227, 209, 255, 138, 225, 209, 255, 138, 225, 209, 255, 137, 223, 209, 255, 136, 223, 209, 255, 134, 221, 209, 255, 131, 221, 209, 255, 127, 221, 209, 255, 125, 225, 209, 255, 129, 227, 209, 255, 132, 227, 209, 255, 127, 227, 209, 255, 126, 227, 209, 255, 130, 227, 209, 255, 132, 227, 209, 255, 128, 227, 209, 255, 122, 227, 209, 255, 125, 227, 209, 255, 128, 227, 211, 255, 135, 227, 211, 255, 140, 227, 211, 255, 147, 227, 211, 255, 146, 227, 211, 255, 144, 227, 211, 255, 145, 227, 211, 255, 142, 227, 211, 255, 138, 227, 211, 255, 136, 227, 213, 255, 131, 225, 214, 255, 127, 225, 214, 255, 126, 225, 214, 255, 126, 225, 214, 255, 136, 225, 214, 255, 138, 225, 214, 255, 134, 225, 214, 255, 132, 225, 214, 255, 133, 225, 214, 255, 145, 225, 214, 255, 155, 223, 213, 255, 150, 223, 211, 255, 144, 223, 211, 255, 135, 223, 211, 255, 132, 223, 211, 255, 132, 223, 211, 255, 129, 223, 211, 255, 130, 223, 211, 255, 133, 223, 211, 255, 137, 223, 211, 255, 138, 223, 211, 255, 138, 223, 211, 255, 139, 223, 211, 255, 141, 223, 211, 255, 145, 223, 211, 255, 146, 223, 211, 255, 139, 223, 211, 255, 133, 223, 211, 255, 136, 223, 211, 255, 144, 223, 213, 255, 148, 223, 214, 255, 143, 225, 216, 255, 137, 225, 214, 255, 135, 227, 214, 255, 137, 227, 213, 255, 140, 227, 213, 255, 139, 225, 211, 255, 138, 225, 211, 255, 135, 223, 209, 255, 131, 221, 211, 255, 129, 218, 216, 255, 129, 216, 216, 255, 141, 216, 216, 255, 153, 216, 216, 255, 154, 214, 216, 255, 155, 214, 216, 255, 155, 214, 216, 255, 154, 214, 216, 255, 145, 214, 216, 255, 135, 214, 216, 255, 129, 218, 217, 255, 116, 216, 217, 255, 105, 212, 217, 255, 108, 208, 217, 255, 120, 208, 217, 255, 127, 208, 216, 255, 133, 212, 216, 255, 131, 216, 216, 255, 133, 220, 214, 255, 132, 221, 214, 255, 130, 221, 213, 255, 126, 221, 213, 255, 127, 221, 213, 255, 128, 221, 211, 255, 127, 221, 209, 255, 128, 221, 209, 255, 128, 225, 209, 255, 131, 227, 208, 255, 135, 229, 206, 255, 139, 231, 208, 255, 140, 227, 211, 255, 142, 227, 211, 255, 143, 229, 209, 255, 143, 231, 208, 255, 141, 233, 206, 255, 138, 233, 204, 255, 137, 235, 203, 255, 135, 236, 201, 255, 134, 236, 201, 255, 133, 236, 198, 255, 130, 238, 193, 255, 126, 238, 191, 255, 125, 236, 191, 255, 123, 235, 191, 255, 119, 233, 191, 255, 113, 233, 191, 255, 109, 235, 191, 255, 102, 236, 191, 255, 96, 238, 191, 255, 92, 240, 191, 255, 242, 207, 229, 255, 242, 207, 227, 255, 242, 207, 226, 255, 243, 207, 224, 255, 243, 207, 221, 255, 244, 207, 221, 255, 245, 207, 224, 255, 245, 207, 226, 255, 247, 208, 227, 255, 248, 207, 227, 255, 249, 205, 226, 255, 249, 203, 226, 255, 248, 203, 226, 255, 246, 203, 224, 255, 246, 203, 224, 255, 246, 203, 224, 255, 246, 203, 221, 255, 247, 203, 219, 255, 248, 203, 219, 255, 248, 205, 219, 255, 245, 207, 219, 255, 245, 207, 221, 255, 246, 207, 219, 255, 246, 207, 219, 255, 248, 208, 217, 255, 250, 208, 217, 255, 249, 208, 217, 255, 246, 208, 217, 255, 231, 208, 217, 255, 224, 210, 217, 255, 208, 218, 219, 255, 182, 221, 219, 255, 176, 221, 217, 255, 157, 221, 219, 255, 151, 221, 219, 255, 151, 220, 219, 255, 146, 220, 219, 255, 144, 220, 219, 255, 143, 220, 219, 255, 145, 218, 219, 255, 144, 214, 219, 255, 144, 212, 219, 255, 147, 218, 219, 255, 151, 221, 219, 255, 153, 223, 219, 255, 153, 223, 219, 255, 144, 220, 219, 255, 137, 216, 219, 255, 136, 210, 219, 255, 134, 205, 221, 255, 126, 195, 226, 255, 114, 199, 227, 255, 114, 208, 227, 255, 123, 212, 227, 255, 143, 207, 226, 255, 152, 199, 226, 255, 156, 195, 226, 255, 160, 199, 226, 255, 146, 207, 226, 255, 143, 214, 222, 255, 139, 216, 217, 255, 139, 218, 214, 255, 142, 220, 214, 255, 143, 220, 214, 255, 142, 220, 214, 255, 141, 220, 214, 255, 141, 220, 214, 255, 142, 220, 214, 255, 146, 221, 214, 255, 153, 221, 214, 255, 157, 220, 214, 255, 156, 220, 214, 255, 155, 221, 214, 255, 154, 221, 214, 255, 154, 221, 214, 255, 150, 223, 214, 255, 139, 225, 214, 255, 134, 225, 214, 255, 131, 227, 214, 255, 129, 227, 214, 255, 128, 227, 211, 255, 127, 227, 211, 255, 131, 227, 211, 255, 134, 225, 211, 255, 132, 225, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 135, 223, 211, 255, 135, 223, 211, 255, 131, 223, 211, 255, 129, 227, 209, 255, 131, 227, 209, 255, 135, 227, 209, 255, 131, 227, 209, 255, 131, 227, 209, 255, 131, 227, 209, 255, 124, 227, 209, 255, 121, 227, 209, 255, 117, 227, 209, 255, 118, 227, 209, 255, 126, 227, 211, 255, 132, 227, 211, 255, 133, 227, 211, 255, 139, 227, 211, 255, 143, 227, 211, 255, 143, 227, 211, 255, 141, 227, 211, 255, 139, 227, 211, 255, 138, 227, 211, 255, 136, 227, 213, 255, 132, 225, 214, 255, 131, 225, 214, 255, 133, 225, 214, 255, 133, 225, 214, 255, 135, 225, 214, 255, 139, 225, 214, 255, 138, 225, 214, 255, 138, 225, 214, 255, 132, 225, 214, 255, 144, 225, 214, 255, 158, 223, 213, 255, 151, 223, 211, 255, 145, 223, 211, 255, 143, 223, 211, 255, 140, 223, 211, 255, 136, 223, 211, 255, 132, 223, 211, 255, 130, 223, 211, 255, 131, 223, 211, 255, 135, 223, 211, 255, 138, 223, 211, 255, 144, 223, 211, 255, 144, 223, 211, 255, 145, 223, 211, 255, 148, 223, 211, 255, 144, 223, 211, 255, 134, 223, 211, 255, 127, 223, 211, 255, 128, 223, 211, 255, 133, 223, 213, 255, 137, 221, 214, 255, 139, 223, 216, 255, 137, 225, 214, 255, 133, 227, 214, 255, 133, 229, 213, 255, 133, 229, 211, 255, 136, 227, 209, 255, 139, 225, 209, 255, 138, 223, 209, 255, 132, 221, 211, 255, 127, 221, 213, 255, 123, 221, 214, 255, 130, 221, 214, 255, 141, 220, 214, 255, 145, 220, 214, 255, 147, 218, 214, 255, 148, 218, 214, 255, 148, 216, 214, 255, 143, 216, 214, 255, 140, 216, 214, 255, 145, 220, 216, 255, 139, 218, 216, 255, 123, 212, 217, 255, 117, 208, 217, 255, 111, 207, 217, 255, 107, 207, 217, 255, 118, 207, 219, 255, 127, 212, 219, 255, 134, 216, 219, 255, 130, 218, 217, 255, 128, 220, 216, 255, 127, 220, 214, 255, 127, 220, 214, 255, 128, 220, 213, 255, 128, 220, 211, 255, 127, 221, 211, 255, 126, 223, 209, 255, 125, 227, 209, 255, 126, 229, 209, 255, 127, 231, 209, 255, 129, 227, 214, 255, 133, 225, 214, 255, 139, 227, 214, 255, 142, 227, 211, 255, 143, 229, 209, 255, 140, 229, 208, 255, 140, 231, 208, 255, 138, 233, 206, 255, 135, 233, 204, 255, 132, 235, 201, 255, 132, 236, 195, 255, 129, 236, 195, 255, 128, 235, 195, 255, 126, 233, 195, 255, 123, 231, 195, 255, 120, 231, 195, 255, 119, 233, 195, 255, 114, 235, 195, 255, 109, 236, 195, 255, 105, 236, 195, 255, 244, 207, 229, 255, 244, 207, 227, 255, 245, 207, 224, 255, 246, 207, 224, 255, 246, 207, 219, 255, 246, 207, 219, 255, 246, 207, 224, 255, 247, 207, 224, 255, 247, 207, 227, 255, 247, 207, 229, 255, 248, 205, 226, 255, 247, 205, 226, 255, 246, 205, 226, 255, 244, 203, 226, 255, 244, 203, 224, 255, 244, 203, 224, 255, 244, 203, 221, 255, 244, 203, 221, 255, 244, 203, 219, 255, 244, 203, 219, 255, 245, 207, 221, 255, 245, 208, 221, 255, 245, 208, 221, 255, 241, 210, 219, 255, 242, 210, 217, 255, 235, 212, 217, 255, 223, 214, 216, 255, 215, 216, 216, 255, 184, 216, 214, 255, 168, 216, 216, 255, 158, 220, 217, 255, 141, 221, 217, 255, 143, 221, 217, 255, 142, 221, 217, 255, 140, 220, 217, 255, 141, 218, 217, 255, 145, 216, 217, 255, 145, 216, 217, 255, 145, 214, 217, 255, 148, 214, 217, 255, 147, 214, 219, 255, 148, 216, 219, 255, 153, 220, 219, 255, 154, 221, 219, 255, 152, 223, 219, 255, 142, 223, 219, 255, 123, 218, 219, 255, 111, 212, 219, 255, 110, 208, 219, 255, 108, 205, 221, 255, 112, 197, 226, 255, 122, 199, 227, 255, 141, 203, 226, 255, 157, 205, 224, 255, 161, 207, 222, 255, 158, 205, 222, 255, 157, 207, 219, 255, 155, 210, 219, 255, 145, 212, 217, 255, 140, 216, 216, 255, 139, 220, 214, 255, 139, 221, 214, 255, 139, 221, 214, 255, 141, 221, 214, 255, 144, 221, 214, 255, 145, 221, 214, 255, 148, 221, 214, 255, 151, 221, 214, 255, 154, 221, 214, 255, 158, 221, 214, 255, 158, 221, 214, 255, 150, 223, 214, 255, 147, 223, 214, 255, 148, 223, 214, 255, 146, 223, 214, 255, 138, 223, 214, 255, 131, 225, 214, 255, 126, 225, 214, 255, 123, 225, 214, 255, 122, 225, 214, 255, 125, 225, 213, 255, 126, 225, 213, 255, 125, 225, 213, 255, 123, 225, 213, 255, 121, 225, 213, 255, 123, 225, 213, 255, 128, 225, 213, 255, 134, 225, 213, 255, 135, 225, 213, 255, 132, 225, 211, 255, 129, 227, 209, 255, 127, 227, 209, 255, 131, 227, 209, 255, 130, 227, 209, 255, 129, 227, 209, 255, 124, 227, 209, 255, 109, 227, 209, 255, 108, 227, 209, 255, 109, 227, 209, 255, 113, 227, 209, 255, 123, 227, 211, 255, 127, 227, 211, 255, 124, 227, 211, 255, 126, 227, 211, 255, 133, 227, 211, 255, 133, 227, 211, 255, 128, 227, 211, 255, 133, 227, 211, 255, 138, 227, 211, 255, 134, 227, 213, 255, 132, 225, 214, 255, 132, 225, 214, 255, 140, 225, 214, 255, 141, 225, 214, 255, 135, 225, 214, 255, 134, 225, 214, 255, 138, 225, 214, 255, 143, 225, 214, 255, 133, 225, 214, 255, 135, 225, 214, 255, 148, 223, 213, 255, 145, 223, 211, 255, 139, 223, 211, 255, 139, 223, 211, 255, 141, 223, 211, 255, 141, 223, 211, 255, 139, 223, 211, 255, 135, 223, 211, 255, 134, 223, 211, 255, 137, 223, 211, 255, 138, 223, 211, 255, 141, 223, 211, 255, 142, 223, 211, 255, 147, 223, 211, 255, 152, 223, 211, 255, 143, 223, 211, 255, 134, 223, 211, 255, 127, 223, 211, 255, 127, 223, 211, 255, 131, 223, 213, 255, 135, 221, 214, 255, 139, 221, 216, 255, 137, 225, 214, 255, 134, 227, 214, 255, 134, 229, 213, 255, 135, 229, 211, 255, 138, 229, 209, 255, 143, 225, 208, 255, 145, 223, 208, 255, 141, 223, 209, 255, 134, 225, 211, 255, 126, 225, 211, 255, 125, 223, 211, 255, 130, 223, 211, 255, 136, 221, 211, 255, 140, 221, 211, 255, 144, 220, 211, 255, 146, 220, 211, 255, 144, 220, 211, 255, 142, 220, 213, 255, 144, 221, 213, 255, 139, 220, 214, 255, 135, 214, 216, 255, 142, 208, 216, 255, 133, 205, 217, 255, 111, 203, 219, 255, 101, 205, 221, 255, 113, 208, 222, 255, 124, 210, 222, 255, 124, 216, 222, 255, 127, 218, 216, 255, 129, 220, 216, 255, 128, 218, 214, 255, 127, 218, 214, 255, 127, 218, 213, 255, 128, 220, 211, 255, 127, 221, 211, 255, 125, 225, 209, 255, 124, 229, 209, 255, 123, 231, 211, 255, 122, 227, 214, 255, 125, 225, 214, 255, 128, 227, 214, 255, 133, 227, 213, 255, 136, 227, 211, 255, 136, 229, 209, 255, 138, 229, 209, 255, 140, 231, 208, 255, 138, 231, 208, 255, 136, 233, 204, 255, 135, 235, 198, 255, 132, 235, 198, 255, 130, 235, 198, 255, 128, 233, 198, 255, 124, 231, 198, 255, 121, 231, 198, 255, 121, 233, 198, 255, 119, 235, 198, 255, 114, 235, 198, 255, 112, 236, 198, 255, 245, 208, 230, 255, 246, 208, 229, 255, 246, 208, 226, 255, 247, 208, 224, 255, 247, 207, 219, 255, 248, 207, 219, 255, 248, 207, 224, 255, 247, 205, 226, 255, 247, 203, 229, 255, 247, 203, 229, 255, 247, 205, 227, 255, 246, 207, 226, 255, 245, 207, 226, 255, 245, 205, 226, 255, 245, 205, 224, 255, 245, 205, 224, 255, 244, 205, 222, 255, 242, 205, 221, 255, 241, 203, 221, 255, 241, 205, 221, 255, 243, 210, 222, 255, 246, 212, 222, 255, 242, 212, 221, 255, 221, 214, 221, 255, 211, 218, 217, 255, 192, 218, 217, 255, 162, 220, 214, 255, 157, 221, 213, 255, 141, 221, 211, 255, 134, 221, 211, 255, 133, 221, 216, 255, 136, 221, 217, 255, 138, 220, 217, 255, 140, 220, 217, 255, 138, 216, 217, 255, 139, 214, 217, 255, 142, 212, 217, 255, 146, 210, 217, 255, 148, 210, 217, 255, 151, 210, 217, 255, 154, 214, 219, 255, 154, 218, 219, 255, 151, 220, 219, 255, 140, 223, 219, 255, 125, 223, 219, 255, 109, 220, 219, 255, 99, 218, 219, 255, 94, 210, 219, 255, 101, 205, 219, 255, 116, 203, 221, 255, 138, 205, 224, 255, 161, 199, 226, 255, 164, 194, 222, 255, 159, 194, 221, 255, 155, 203, 219, 255, 156, 216, 216, 255, 157, 225, 214, 255, 148, 225, 211, 255, 142, 220, 209, 255, 138, 214, 209, 255, 139, 223, 213, 255, 139, 225, 214, 255, 138, 225, 214, 255, 141, 223, 214, 255, 145, 223, 214, 255, 151, 221, 214, 255, 156, 221, 214, 255, 157, 221, 214, 255, 156, 221, 214, 255, 156, 221, 214, 255, 154, 223, 214, 255, 147, 225, 214, 255, 148, 225, 214, 255, 146, 225, 214, 255, 135, 225, 214, 255, 126, 225, 214, 255, 122, 225, 214, 255, 121, 225, 214, 255, 120, 225, 214, 255, 121, 225, 214, 255, 121, 223, 214, 255, 123, 225, 214, 255, 117, 225, 214, 255, 113, 225, 214, 255, 116, 225, 214, 255, 121, 227, 214, 255, 127, 227, 214, 255, 131, 227, 214, 255, 130, 227, 214, 255, 129, 227, 213, 255, 125, 229, 209, 255, 120, 229, 209, 255, 121, 229, 209, 255, 120, 229, 209, 255, 120, 229, 209, 255, 118, 229, 209, 255, 108, 229, 209, 255, 105, 229, 209, 255, 110, 229, 209, 255, 117, 229, 209, 255, 122, 229, 211, 255, 125, 229, 211, 255, 118, 229, 211, 255, 118, 229, 211, 255, 127, 229, 211, 255, 128, 229, 211, 255, 120, 229, 211, 255, 129, 229, 211, 255, 140, 229, 211, 255, 134, 227, 211, 255, 133, 225, 214, 255, 132, 225, 214, 255, 139, 225, 214, 255, 140, 225, 214, 255, 135, 225, 214, 255, 132, 225, 214, 255, 137, 225, 214, 255, 138, 225, 214, 255, 123, 225, 214, 255, 116, 225, 214, 255, 124, 223, 211, 255, 135, 223, 211, 255, 127, 223, 211, 255, 120, 223, 211, 255, 129, 223, 211, 255, 138, 223, 211, 255, 145, 223, 211, 255, 144, 223, 211, 255, 139, 223, 211, 255, 139, 223, 211, 255, 137, 223, 211, 255, 135, 223, 211, 255, 134, 223, 211, 255, 135, 223, 211, 255, 146, 223, 211, 255, 145, 223, 211, 255, 140, 223, 211, 255, 138, 223, 211, 255, 136, 223, 211, 255, 137, 223, 211, 255, 139, 221, 214, 255, 143, 221, 216, 255, 143, 223, 214, 255, 143, 227, 214, 255, 145, 231, 211, 255, 146, 231, 209, 255, 147, 229, 209, 255, 150, 225, 208, 255, 151, 223, 208, 255, 146, 221, 206, 255, 136, 227, 208, 255, 129, 229, 209, 255, 124, 227, 209, 255, 121, 227, 209, 255, 121, 225, 209, 255, 126, 223, 209, 255, 134, 221, 209, 255, 140, 221, 209, 255, 144, 221, 209, 255, 147, 221, 209, 255, 144, 223, 211, 255, 135, 220, 213, 255, 135, 214, 214, 255, 137, 208, 216, 255, 143, 203, 219, 255, 141, 201, 221, 255, 123, 201, 224, 255, 108, 205, 224, 255, 101, 208, 227, 255, 111, 210, 224, 255, 119, 218, 217, 255, 126, 218, 216, 255, 128, 216, 216, 255, 127, 216, 214, 255, 128, 216, 214, 255, 128, 218, 211, 255, 127, 221, 211, 255, 127, 225, 209, 255, 127, 229, 209, 255, 126, 231, 209, 255, 125, 229, 213, 255, 123, 229, 213, 255, 121, 229, 211, 255, 123, 229, 211, 255, 124, 229, 209, 255, 126, 229, 209, 255, 131, 229, 209, 255, 137, 231, 208, 255, 140, 231, 208, 255, 139, 233, 206, 255, 136, 235, 203, 255, 133, 236, 201, 255, 132, 235, 201, 255, 131, 233, 201, 255, 127, 231, 201, 255, 124, 231, 201, 255, 122, 233, 201, 255, 121, 235, 201, 255, 118, 236, 201, 255, 116, 236, 201, 255, 246, 208, 230, 255, 246, 208, 229, 255, 247, 208, 226, 255, 248, 208, 224, 255, 248, 207, 219, 255, 247, 207, 219, 255, 247, 205, 224, 255, 246, 203, 226, 255, 245, 201, 229, 255, 244, 201, 230, 255, 245, 205, 227, 255, 244, 207, 227, 255, 245, 207, 226, 255, 246, 207, 226, 255, 247, 207, 224, 255, 246, 207, 224, 255, 245, 207, 222, 255, 241, 207, 221, 255, 237, 205, 221, 255, 230, 207, 221, 255, 214, 214, 222, 255, 214, 216, 222, 255, 207, 216, 222, 255, 175, 218, 221, 255, 156, 221, 217, 255, 148, 221, 214, 255, 135, 225, 213, 255, 137, 225, 211, 255, 137, 227, 209, 255, 137, 227, 211, 255, 137, 223, 216, 255, 140, 221, 217, 255, 140, 220, 217, 255, 139, 216, 217, 255, 141, 212, 217, 255, 142, 210, 217, 255, 147, 208, 217, 255, 150, 207, 217, 255, 153, 205, 217, 255, 153, 207, 217, 255, 147, 214, 219, 255, 135, 218, 219, 255, 120, 220, 219, 255, 107, 221, 219, 255, 98, 221, 219, 255, 96, 220, 219, 255, 104, 214, 219, 255, 119, 208, 219, 255, 139, 203, 219, 255, 156, 199, 221, 255, 160, 201, 222, 255, 157, 199, 222, 255, 153, 199, 219, 255, 148, 201, 216, 255, 153, 210, 214, 255, 156, 218, 211, 255, 148, 223, 208, 255, 138, 227, 204, 255, 136, 225, 204, 255, 138, 225, 204, 255, 137, 227, 211, 255, 136, 229, 214, 255, 136, 227, 214, 255, 140, 227, 214, 255, 147, 225, 214, 255, 153, 223, 214, 255, 157, 221, 214, 255, 156, 221, 214, 255, 153, 221, 214, 255, 151, 223, 214, 255, 150, 225, 214, 255, 148, 227, 214, 255, 148, 227, 214, 255, 140, 227, 214, 255, 125, 225, 214, 255, 115, 225, 214, 255, 118, 225, 214, 255, 126, 223, 214, 255, 131, 223, 214, 255, 128, 223, 214, 255, 126, 223, 216, 255, 124, 223, 216, 255, 114, 223, 216, 255, 110, 225, 216, 255, 118, 225, 216, 255, 125, 227, 216, 255, 128, 227, 216, 255, 125, 229, 216, 255, 121, 229, 216, 255, 123, 229, 214, 255, 120, 229, 209, 255, 121, 229, 209, 255, 119, 229, 209, 255, 115, 229, 209, 255, 119, 229, 209, 255, 125, 229, 209, 255, 123, 229, 209, 255, 124, 229, 209, 255, 131, 229, 209, 255, 129, 229, 209, 255, 121, 229, 211, 255, 121, 229, 211, 255, 110, 229, 211, 255, 107, 229, 211, 255, 117, 229, 211, 255, 123, 229, 211, 255, 115, 229, 211, 255, 122, 229, 211, 255, 139, 229, 211, 255, 141, 229, 213, 255, 137, 227, 214, 255, 134, 225, 214, 255, 135, 225, 214, 255, 133, 225, 214, 255, 132, 225, 214, 255, 139, 225, 214, 255, 150, 225, 214, 255, 143, 225, 214, 255, 121, 225, 214, 255, 104, 225, 214, 255, 111, 223, 213, 255, 135, 223, 211, 255, 132, 223, 211, 255, 120, 223, 211, 255, 118, 223, 211, 255, 130, 223, 211, 255, 147, 223, 211, 255, 155, 223, 211, 255, 148, 223, 211, 255, 141, 223, 211, 255, 132, 223, 211, 255, 134, 223, 211, 255, 135, 223, 211, 255, 126, 223, 211, 255, 135, 223, 211, 255, 141, 223, 211, 255, 144, 223, 211, 255, 148, 223, 211, 255, 146, 223, 211, 255, 141, 221, 213, 255, 140, 220, 214, 255, 142, 221, 216, 255, 147, 221, 214, 255, 153, 227, 214, 255, 155, 229, 211, 255, 156, 231, 209, 255, 153, 229, 208, 255, 152, 225, 208, 255, 152, 223, 206, 255, 146, 223, 206, 255, 135, 229, 208, 255, 125, 231, 208, 255, 118, 229, 208, 255, 114, 229, 208, 255, 108, 227, 208, 255, 110, 225, 208, 255, 119, 223, 208, 255, 130, 223, 208, 255, 138, 221, 208, 255, 145, 223, 209, 255, 147, 223, 209, 255, 144, 221, 211, 255, 139, 216, 213, 255, 133, 208, 216, 255, 129, 203, 217, 255, 133, 199, 221, 255, 138, 199, 224, 255, 131, 201, 226, 255, 117, 207, 227, 255, 105, 208, 226, 255, 101, 216, 217, 255, 110, 216, 216, 255, 121, 214, 216, 255, 128, 214, 216, 255, 130, 214, 214, 255, 129, 216, 214, 255, 129, 220, 211, 255, 129, 223, 211, 255, 128, 227, 211, 255, 128, 231, 209, 255, 128, 231, 211, 255, 126, 231, 211, 255, 124, 231, 209, 255, 123, 231, 209, 255, 123, 231, 209, 255, 123, 231, 208, 255, 125, 231, 208, 255, 128, 229, 208, 255, 131, 229, 208, 255, 133, 231, 206, 255, 135, 236, 204, 255, 134, 236, 204, 255, 133, 235, 204, 255, 133, 235, 204, 255, 131, 233, 204, 255, 128, 233, 204, 255, 125, 235, 204, 255, 124, 235, 204, 255, 122, 236, 204, 255, 121, 238, 204, 255, 246, 203, 229, 255, 247, 203, 229, 255, 247, 203, 226, 255, 248, 203, 224, 255, 247, 203, 224, 255, 245, 203, 224, 255, 244, 201, 226, 255, 243, 201, 227, 255, 242, 199, 229, 255, 243, 199, 230, 255, 243, 203, 227, 255, 243, 205, 227, 255, 245, 205, 226, 255, 247, 205, 224, 255, 246, 207, 222, 255, 240, 207, 222, 255, 238, 210, 221, 255, 220, 214, 219, 255, 203, 216, 219, 255, 195, 216, 219, 255, 166, 216, 219, 255, 161, 216, 219, 255, 159, 218, 217, 255, 145, 220, 217, 255, 139, 221, 216, 255, 141, 223, 216, 255, 145, 225, 214, 255, 146, 227, 214, 255, 144, 227, 213, 255, 143, 229, 214, 255, 142, 233, 216, 255, 141, 229, 216, 255, 140, 221, 216, 255, 139, 214, 216, 255, 142, 208, 216, 255, 148, 205, 216, 255, 154, 205, 216, 255, 151, 207, 216, 255, 143, 208, 216, 255, 131, 212, 217, 255, 116, 214, 219, 255, 107, 214, 219, 255, 96, 212, 219, 255, 94, 208, 219, 255, 105, 207, 219, 255, 121, 205, 219, 255, 138, 205, 219, 255, 153, 205, 219, 255, 159, 205, 219, 255, 156, 205, 219, 255, 146, 205, 217, 255, 143, 208, 217, 255, 144, 214, 216, 255, 145, 218, 214, 255, 150, 220, 213, 255, 150, 218, 211, 255, 143, 218, 208, 255, 140, 223, 206, 255, 139, 229, 204, 255, 137, 231, 206, 255, 135, 229, 211, 255, 134, 229, 214, 255, 137, 227, 214, 255, 141, 225, 214, 255, 150, 225, 214, 255, 154, 223, 214, 255, 155, 223, 214, 255, 152, 223, 214, 255, 145, 223, 214, 255, 144, 223, 214, 255, 144, 225, 214, 255, 148, 225, 214, 255, 141, 225, 214, 255, 127, 225, 214, 255, 115, 225, 214, 255, 111, 225, 214, 255, 124, 225, 214, 255, 141, 223, 214, 255, 145, 223, 214, 255, 138, 223, 213, 255, 135, 225, 213, 255, 131, 225, 213, 255, 122, 225, 213, 255, 118, 225, 213, 255, 125, 225, 213, 255, 126, 227, 213, 255, 125, 227, 213, 255, 124, 229, 213, 255, 124, 229, 213, 255, 126, 229, 213, 255, 126, 229, 211, 255, 126, 229, 209, 255, 123, 229, 209, 255, 120, 229, 209, 255, 122, 229, 209, 255, 126, 229, 209, 255, 127, 229, 209, 255, 127, 229, 209, 255, 136, 229, 209, 255, 130, 229, 209, 255, 118, 229, 211, 255, 113, 229, 211, 255, 101, 229, 211, 255, 96, 229, 211, 255, 105, 229, 211, 255, 113, 229, 211, 255, 111, 229, 211, 255, 124, 229, 211, 255, 140, 229, 211, 255, 143, 227, 211, 255, 136, 225, 213, 255, 133, 225, 214, 255, 133, 225, 214, 255, 136, 225, 214, 255, 135, 225, 214, 255, 141, 225, 214, 255, 150, 225, 214, 255, 142, 225, 214, 255, 119, 225, 214, 255, 98, 225, 213, 255, 111, 225, 211, 255, 140, 225, 211, 255, 143, 225, 211, 255, 126, 225, 211, 255, 117, 225, 211, 255, 128, 225, 211, 255, 147, 225, 211, 255, 159, 225, 211, 255, 154, 225, 211, 255, 146, 225, 211, 255, 142, 225, 211, 255, 142, 225, 211, 255, 145, 225, 211, 255, 131, 225, 211, 255, 128, 225, 211, 255, 128, 225, 211, 255, 130, 225, 211, 255, 144, 225, 211, 255, 148, 225, 211, 255, 140, 225, 211, 255, 137, 221, 214, 255, 141, 221, 214, 255, 147, 221, 214, 255, 154, 225, 213, 255, 158, 225, 211, 255, 156, 227, 209, 255, 147, 225, 209, 255, 147, 225, 209, 255, 148, 223, 208, 255, 143, 223, 208, 255, 135, 229, 208, 255, 125, 229, 208, 255, 119, 229, 208, 255, 117, 229, 208, 255, 112, 227, 208, 255, 111, 225, 208, 255, 116, 225, 208, 255, 122, 223, 208, 255, 129, 223, 208, 255, 139, 223, 209, 255, 145, 225, 209, 255, 146, 223, 211, 255, 142, 220, 211, 255, 140, 216, 214, 255, 132, 210, 216, 255, 124, 208, 217, 255, 123, 205, 219, 255, 134, 205, 221, 255, 145, 205, 222, 255, 133, 205, 222, 255, 112, 207, 221, 255, 100, 210, 221, 255, 107, 212, 219, 255, 113, 214, 217, 255, 123, 212, 217, 255, 129, 210, 216, 255, 129, 210, 214, 255, 129, 214, 213, 255, 129, 221, 213, 255, 128, 227, 211, 255, 128, 231, 211, 255, 130, 231, 209, 255, 128, 233, 209, 255, 127, 231, 209, 255, 127, 229, 209, 255, 127, 227, 209, 255, 125, 223, 209, 255, 123, 221, 209, 255, 124, 220, 209, 255, 127, 221, 208, 255, 132, 229, 208, 255, 131, 231, 208, 255, 132, 231, 206, 255, 132, 233, 206, 255, 132, 233, 206, 255, 130, 235, 206, 255, 129, 235, 204, 255, 126, 235, 204, 255, 125, 236, 204, 255, 125, 236, 204, 255, 246, 199, 226, 255, 248, 199, 226, 255, 247, 199, 226, 255, 246, 199, 226, 255, 245, 199, 226, 255, 243, 199, 226, 255, 242, 199, 227, 255, 241, 199, 227, 255, 242, 199, 227, 255, 242, 199, 227, 255, 241, 203, 226, 255, 244, 203, 224, 255, 241, 203, 222, 255, 238, 205, 221, 255, 231, 207, 219, 255, 205, 210, 219, 255, 199, 214, 217, 255, 179, 220, 216, 255, 158, 225, 216, 255, 156, 225, 214, 255, 143, 218, 213, 255, 139, 216, 213, 255, 138, 218, 213, 255, 137, 220, 216, 255, 140, 221, 216, 255, 144, 223, 216, 255, 151, 223, 216, 255, 151, 221, 217, 255, 147, 220, 217, 255, 146, 221, 217, 255, 145, 229, 216, 255, 142, 223, 216, 255, 143, 216, 216, 255, 144, 208, 216, 255, 145, 203, 216, 255, 145, 203, 216, 255, 139, 207, 216, 255, 127, 216, 216, 255, 113, 225, 216, 255, 100, 227, 217, 255, 94, 220, 219, 255, 97, 212, 221, 255, 103, 205, 221, 255, 119, 195, 221, 255, 140, 190, 221, 255, 153, 190, 221, 255, 158, 194, 221, 255, 148, 203, 221, 255, 140, 210, 221, 255, 139, 216, 219, 255, 138, 218, 214, 255, 142, 220, 211, 255, 143, 223, 211, 255, 145, 223, 211, 255, 147, 223, 211, 255, 146, 223, 211, 255, 142, 223, 209, 255, 139, 223, 209, 255, 137, 225, 209, 255, 138, 227, 209, 255, 139, 225, 211, 255, 139, 225, 211, 255, 142, 225, 211, 255, 142, 225, 211, 255, 145, 225, 211, 255, 147, 225, 211, 255, 150, 225, 211, 255, 146, 225, 211, 255, 136, 225, 211, 255, 135, 225, 211, 255, 140, 225, 211, 255, 146, 225, 211, 255, 136, 225, 211, 255, 120, 225, 211, 255, 116, 223, 211, 255, 125, 223, 211, 255, 143, 223, 211, 255, 154, 223, 211, 255, 148, 223, 211, 255, 141, 223, 211, 255, 140, 225, 211, 255, 134, 227, 211, 255, 126, 227, 211, 255, 121, 227, 211, 255, 125, 227, 211, 255, 124, 227, 211, 255, 120, 227, 211, 255, 125, 227, 211, 255, 133, 227, 211, 255, 136, 227, 211, 255, 141, 225, 211, 255, 134, 225, 211, 255, 127, 225, 211, 255, 128, 225, 211, 255, 126, 225, 211, 255, 126, 225, 211, 255, 127, 225, 211, 255, 123, 225, 211, 255, 129, 225, 211, 255, 131, 225, 211, 255, 122, 225, 209, 255, 114, 225, 209, 255, 107, 225, 209, 255, 107, 225, 209, 255, 118, 225, 209, 255, 124, 225, 209, 255, 118, 225, 209, 255, 125, 225, 209, 255, 134, 225, 209, 255, 137, 225, 209, 255, 137, 225, 211, 255, 136, 225, 211, 255, 137, 225, 211, 255, 144, 225, 211, 255, 141, 225, 211, 255, 136, 225, 211, 255, 134, 225, 211, 255, 132, 225, 211, 255, 115, 225, 211, 255, 95, 225, 211, 255, 110, 225, 211, 255, 135, 227, 211, 255, 133, 227, 211, 255, 119, 227, 211, 255, 122, 227, 211, 255, 134, 227, 211, 255, 142, 227, 211, 255, 146, 227, 211, 255, 144, 227, 211, 255, 148, 227, 211, 255, 155, 227, 211, 255, 152, 227, 211, 255, 150, 227, 211, 255, 138, 227, 211, 255, 131, 227, 211, 255, 121, 227, 211, 255, 114, 227, 211, 255, 134, 227, 211, 255, 147, 227, 211, 255, 141, 225, 211, 255, 140, 223, 211, 255, 144, 223, 211, 255, 143, 223, 211, 255, 144, 223, 211, 255, 153, 225, 211, 255, 154, 225, 211, 255, 147, 225, 211, 255, 142, 223, 211, 255, 139, 223, 209, 255, 135, 223, 209, 255, 131, 225, 209, 255, 127, 225, 209, 255, 126, 225, 209, 255, 127, 225, 209, 255, 125, 225, 209, 255, 124, 225, 209, 255, 123, 225, 209, 255, 124, 225, 209, 255, 125, 225, 209, 255, 131, 225, 209, 255, 139, 225, 211, 255, 141, 225, 211, 255, 142, 227, 211, 255, 140, 225, 211, 255, 137, 223, 211, 255, 132, 220, 213, 255, 125, 214, 213, 255, 125, 210, 214, 255, 137, 207, 214, 255, 148, 205, 216, 255, 142, 201, 222, 255, 126, 203, 224, 255, 111, 205, 222, 255, 97, 207, 221, 255, 104, 207, 219, 255, 117, 207, 217, 255, 125, 205, 216, 255, 128, 208, 216, 255, 129, 212, 214, 255, 128, 216, 214, 255, 128, 221, 213, 255, 131, 223, 213, 255, 131, 227, 213, 255, 129, 229, 213, 255, 130, 227, 213, 255, 129, 225, 213, 255, 127, 221, 213, 255, 125, 216, 213, 255, 125, 210, 213, 255, 126, 212, 213, 255, 127, 221, 211, 255, 127, 225, 209, 255, 127, 227, 208, 255, 130, 231, 208, 255, 131, 235, 208, 255, 132, 235, 208, 255, 131, 235, 204, 255, 130, 233, 204, 255, 128, 233, 204, 255, 128, 231, 204, 255, 247, 199, 224, 255, 249, 199, 224, 255, 248, 199, 224, 255, 245, 199, 226, 255, 246, 201, 226, 255, 244, 201, 224, 255, 243, 201, 226, 255, 242, 203, 226, 255, 243, 203, 226, 255, 239, 203, 224, 255, 229, 210, 221, 255, 229, 210, 219, 255, 214, 208, 219, 255, 197, 208, 217, 255, 190, 210, 216, 255, 166, 212, 216, 255, 159, 216, 214, 255, 152, 220, 213, 255, 145, 223, 213, 255, 144, 225, 211, 255, 139, 220, 211, 255, 135, 220, 211, 255, 133, 220, 213, 255, 135, 221, 214, 255, 138, 223, 216, 255, 142, 220, 216, 255, 145, 218, 217, 255, 146, 212, 219, 255, 145, 208, 219, 255, 146, 205, 219, 255, 150, 199, 217, 255, 151, 197, 216, 255, 150, 201, 216, 255, 144, 207, 216, 255, 133, 210, 216, 255, 120, 218, 216, 255, 110, 223, 216, 255, 98, 231, 216, 255, 92, 236, 216, 255, 93, 236, 217, 255, 103, 223, 219, 255, 121, 214, 219, 255, 137, 207, 219, 255, 148, 197, 219, 255, 153, 192, 219, 255, 145, 192, 219, 255, 138, 197, 219, 255, 128, 207, 219, 255, 130, 214, 219, 255, 137, 221, 217, 255, 140, 225, 211, 255, 142, 225, 211, 255, 142, 225, 211, 255, 144, 225, 211, 255, 142, 225, 211, 255, 142, 225, 211, 255, 139, 225, 211, 255, 137, 225, 211, 255, 138, 225, 211, 255, 140, 225, 211, 255, 138, 225, 211, 255, 138, 225, 211, 255, 140, 225, 211, 255, 139, 225, 211, 255, 139, 225, 211, 255, 141, 225, 211, 255, 147, 225, 211, 255, 143, 225, 211, 255, 131, 225, 211, 255, 128, 225, 211, 255, 135, 223, 211, 255, 139, 223, 211, 255, 133, 223, 211, 255, 128, 223, 211, 255, 131, 223, 211, 255, 142, 223, 211, 255, 154, 223, 211, 255, 151, 223, 211, 255, 142, 223, 211, 255, 143, 225, 211, 255, 140, 227, 209, 255, 126, 227, 209, 255, 118, 227, 209, 255, 116, 227, 209, 255, 119, 227, 209, 255, 120, 227, 209, 255, 116, 227, 209, 255, 118, 227, 209, 255, 129, 227, 209, 255, 141, 227, 209, 255, 153, 225, 211, 255, 146, 225, 211, 255, 133, 225, 211, 255, 130, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 129, 225, 211, 255, 125, 225, 211, 255, 134, 225, 211, 255, 141, 225, 211, 255, 130, 225, 209, 255, 126, 225, 209, 255, 123, 225, 209, 255, 124, 225, 209, 255, 138, 225, 209, 255, 143, 225, 209, 255, 123, 225, 209, 255, 114, 225, 209, 255, 117, 225, 209, 255, 125, 225, 209, 255, 140, 225, 211, 255, 147, 225, 211, 255, 143, 225, 211, 255, 141, 225, 211, 255, 134, 225, 211, 255, 128, 225, 211, 255, 124, 225, 211, 255, 125, 225, 211, 255, 116, 225, 211, 255, 102, 225, 211, 255, 112, 227, 211, 255, 127, 227, 211, 255, 121, 227, 211, 255, 112, 227, 211, 255, 124, 227, 211, 255, 137, 227, 211, 255, 137, 227, 211, 255, 134, 227, 211, 255, 138, 227, 211, 255, 147, 227, 211, 255, 154, 227, 211, 255, 147, 227, 211, 255, 140, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 127, 227, 211, 255, 118, 227, 211, 255, 133, 227, 211, 255, 147, 227, 211, 255, 143, 227, 211, 255, 143, 225, 211, 255, 145, 223, 211, 255, 140, 223, 211, 255, 135, 223, 211, 255, 138, 223, 211, 255, 145, 223, 211, 255, 152, 223, 211, 255, 144, 223, 211, 255, 131, 223, 211, 255, 125, 223, 211, 255, 121, 225, 209, 255, 123, 225, 209, 255, 125, 225, 209, 255, 128, 225, 209, 255, 129, 225, 209, 255, 130, 225, 209, 255, 130, 225, 209, 255, 130, 225, 209, 255, 127, 225, 209, 255, 130, 225, 209, 255, 133, 227, 211, 255, 136, 227, 211, 255, 138, 229, 211, 255, 137, 229, 211, 255, 135, 227, 211, 255, 134, 223, 211, 255, 132, 220, 211, 255, 127, 214, 211, 255, 127, 208, 211, 255, 135, 208, 213, 255, 144, 208, 222, 255, 148, 205, 224, 255, 140, 199, 222, 255, 122, 197, 221, 255, 104, 203, 221, 255, 101, 210, 219, 255, 109, 216, 217, 255, 117, 216, 217, 255, 127, 208, 216, 255, 128, 203, 216, 255, 129, 203, 216, 255, 131, 208, 216, 255, 130, 214, 216, 255, 129, 220, 214, 255, 130, 225, 214, 255, 130, 227, 214, 255, 128, 227, 214, 255, 127, 225, 214, 255, 127, 220, 214, 255, 127, 221, 214, 255, 126, 227, 211, 255, 126, 231, 211, 255, 126, 231, 209, 255, 127, 233, 209, 255, 128, 233, 209, 255, 130, 231, 208, 255, 130, 229, 206, 255, 130, 227, 204, 255, 131, 225, 204, 255, 131, 223, 204, 255, 247, 203, 224, 255, 248, 203, 224, 255, 248, 203, 224, 255, 247, 205, 224, 255, 247, 205, 224, 255, 246, 205, 222, 255, 245, 207, 222, 255, 233, 207, 222, 255, 224, 208, 222, 255, 216, 210, 221, 255, 192, 221, 214, 255, 185, 221, 213, 255, 172, 220, 213, 255, 158, 216, 211, 255, 156, 214, 211, 255, 150, 214, 211, 255, 146, 214, 211, 255, 143, 216, 209, 255, 141, 218, 209, 255, 138, 220, 209, 255, 134, 223, 211, 255, 133, 223, 213, 255, 133, 221, 213, 255, 136, 220, 214, 255, 139, 216, 216, 255, 140, 212, 216, 255, 142, 208, 217, 255, 145, 205, 219, 255, 148, 203, 219, 255, 152, 195, 219, 255, 152, 175, 217, 255, 145, 181, 217, 255, 132, 197, 217, 255, 117, 218, 217, 255, 104, 233, 217, 255, 94, 240, 217, 255, 91, 238, 217, 255, 92, 231, 217, 255, 102, 220, 217, 255, 120, 216, 217, 255, 135, 221, 217, 255, 145, 220, 217, 255, 145, 214, 217, 255, 134, 207, 217, 255, 125, 203, 217, 255, 120, 203, 217, 255, 120, 207, 217, 255, 124, 214, 217, 255, 132, 220, 217, 255, 136, 223, 216, 255, 138, 225, 213, 255, 139, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 144, 225, 211, 255, 144, 225, 211, 255, 142, 225, 211, 255, 139, 225, 211, 255, 133, 225, 211, 255, 128, 225, 211, 255, 127, 225, 211, 255, 130, 225, 211, 255, 134, 225, 211, 255, 137, 225, 211, 255, 142, 225, 211, 255, 145, 225, 211, 255, 147, 225, 211, 255, 139, 225, 211, 255, 127, 225, 211, 255, 127, 225, 211, 255, 132, 223, 211, 255, 136, 223, 211, 255, 138, 223, 211, 255, 139, 223, 211, 255, 139, 223, 211, 255, 141, 223, 211, 255, 147, 223, 211, 255, 141, 223, 211, 255, 137, 223, 211, 255, 148, 225, 211, 255, 143, 227, 209, 255, 123, 227, 209, 255, 117, 227, 209, 255, 117, 227, 209, 255, 118, 227, 209, 255, 120, 227, 209, 255, 113, 227, 209, 255, 111, 227, 209, 255, 121, 227, 209, 255, 134, 227, 209, 255, 146, 225, 211, 255, 144, 225, 211, 255, 132, 225, 211, 255, 125, 225, 211, 255, 126, 225, 211, 255, 126, 225, 211, 255, 129, 225, 211, 255, 127, 225, 211, 255, 140, 225, 211, 255, 145, 225, 211, 255, 133, 225, 209, 255, 132, 225, 209, 255, 130, 225, 209, 255, 127, 225, 209, 255, 135, 225, 209, 255, 137, 225, 209, 255, 119, 225, 209, 255, 107, 225, 209, 255, 104, 225, 209, 255, 112, 225, 209, 255, 130, 225, 211, 255, 143, 225, 211, 255, 140, 225, 211, 255, 132, 225, 211, 255, 124, 225, 211, 255, 123, 225, 211, 255, 121, 225, 211, 255, 125, 225, 211, 255, 121, 225, 211, 255, 110, 225, 211, 255, 112, 227, 211, 255, 122, 227, 211, 255, 115, 227, 211, 255, 108, 227, 211, 255, 117, 227, 211, 255, 129, 227, 211, 255, 132, 227, 211, 255, 138, 227, 211, 255, 152, 227, 211, 255, 152, 227, 211, 255, 142, 227, 211, 255, 128, 227, 211, 255, 121, 227, 211, 255, 119, 227, 211, 255, 126, 227, 211, 255, 132, 227, 211, 255, 129, 227, 211, 255, 132, 227, 211, 255, 138, 227, 211, 255, 142, 227, 211, 255, 139, 225, 211, 255, 138, 223, 211, 255, 142, 223, 211, 255, 141, 223, 211, 255, 135, 223, 211, 255, 139, 223, 211, 255, 143, 223, 211, 255, 139, 223, 211, 255, 129, 223, 211, 255, 119, 223, 211, 255, 115, 225, 209, 255, 121, 225, 209, 255, 127, 225, 209, 255, 129, 225, 209, 255, 129, 225, 209, 255, 127, 225, 209, 255, 127, 225, 209, 255, 129, 225, 209, 255, 128, 225, 209, 255, 131, 225, 209, 255, 133, 225, 211, 255, 135, 227, 211, 255, 137, 227, 211, 255, 135, 229, 211, 255, 132, 227, 211, 255, 131, 225, 211, 255, 129, 221, 211, 255, 128, 218, 211, 255, 127, 212, 211, 255, 127, 212, 213, 255, 130, 214, 219, 255, 141, 210, 219, 255, 148, 203, 219, 255, 152, 201, 219, 255, 135, 205, 219, 255, 119, 212, 219, 255, 105, 218, 217, 255, 100, 216, 217, 255, 113, 208, 216, 255, 122, 203, 216, 255, 127, 203, 216, 255, 130, 205, 216, 255, 129, 207, 216, 255, 127, 208, 216, 255, 129, 212, 216, 255, 129, 218, 216, 255, 129, 225, 214, 255, 130, 231, 214, 255, 129, 236, 214, 255, 128, 238, 213, 255, 128, 236, 213, 255, 128, 235, 211, 255, 127, 233, 211, 255, 127, 231, 211, 255, 126, 227, 209, 255, 125, 223, 208, 255, 126, 223, 206, 255, 128, 221, 206, 255, 130, 220, 206, 255, 130, 220, 206, 255, 246, 207, 224, 255, 244, 207, 226, 255, 247, 208, 224, 255, 249, 210, 222, 255, 244, 210, 221, 255, 226, 210, 221, 255, 223, 212, 217, 255, 198, 214, 217, 255, 171, 214, 217, 255, 170, 218, 216, 255, 157, 229, 209, 255, 153, 231, 206, 255, 150, 227, 206, 255, 146, 221, 206, 255, 144, 218, 208, 255, 142, 216, 208, 255, 141, 212, 208, 255, 138, 210, 208, 255, 136, 210, 209, 255, 136, 214, 209, 255, 136, 227, 213, 255, 136, 225, 214, 255, 137, 218, 214, 255, 140, 212, 216, 255, 142, 203, 216, 255, 144, 201, 217, 255, 148, 201, 217, 255, 151, 205, 219, 255, 148, 208, 219, 255, 141, 207, 219, 255, 130, 194, 219, 255, 116, 199, 219, 255, 101, 216, 219, 255, 91, 233, 219, 255, 88, 242, 219, 255, 90, 240, 219, 255, 100, 227, 219, 255, 118, 207, 219, 255, 137, 188, 219, 255, 150, 186, 217, 255, 144, 216, 216, 255, 127, 223, 216, 255, 115, 221, 216, 255, 111, 218, 216, 255, 109, 218, 216, 255, 112, 218, 216, 255, 116, 218, 216, 255, 123, 221, 216, 255, 133, 223, 216, 255, 134, 225, 214, 255, 135, 225, 213, 255, 135, 225, 211, 255, 133, 225, 211, 255, 136, 225, 211, 255, 146, 225, 211, 255, 147, 225, 211, 255, 145, 225, 211, 255, 135, 225, 211, 255, 120, 225, 211, 255, 114, 225, 211, 255, 123, 225, 211, 255, 133, 225, 211, 255, 139, 225, 211, 255, 143, 225, 211, 255, 148, 225, 211, 255, 150, 225, 211, 255, 142, 225, 211, 255, 129, 225, 211, 255, 126, 225, 211, 255, 134, 225, 211, 255, 137, 223, 211, 255, 139, 223, 211, 255, 142, 223, 211, 255, 140, 223, 211, 255, 133, 223, 211, 255, 133, 223, 211, 255, 140, 223, 211, 255, 135, 223, 211, 255, 136, 223, 211, 255, 150, 223, 211, 255, 143, 227, 209, 255, 126, 227, 209, 255, 123, 227, 209, 255, 125, 227, 209, 255, 124, 227, 209, 255, 117, 227, 209, 255, 107, 227, 209, 255, 112, 227, 209, 255, 124, 227, 209, 255, 128, 227, 209, 255, 130, 225, 211, 255, 128, 225, 211, 255, 122, 225, 211, 255, 120, 225, 211, 255, 123, 225, 211, 255, 126, 225, 211, 255, 134, 225, 211, 255, 138, 225, 211, 255, 139, 225, 211, 255, 140, 225, 211, 255, 132, 225, 209, 255, 136, 225, 209, 255, 138, 225, 209, 255, 130, 225, 209, 255, 125, 225, 209, 255, 124, 225, 209, 255, 117, 225, 209, 255, 112, 225, 209, 255, 105, 225, 209, 255, 104, 225, 209, 255, 113, 225, 211, 255, 125, 225, 211, 255, 127, 225, 211, 255, 122, 225, 211, 255, 117, 225, 211, 255, 121, 225, 211, 255, 124, 225, 211, 255, 134, 225, 211, 255, 134, 225, 211, 255, 116, 225, 211, 255, 114, 227, 211, 255, 121, 227, 211, 255, 118, 227, 211, 255, 111, 227, 211, 255, 116, 227, 211, 255, 124, 227, 211, 255, 129, 227, 211, 255, 139, 227, 211, 255, 158, 227, 211, 255, 159, 227, 211, 255, 136, 227, 211, 255, 111, 227, 211, 255, 103, 227, 211, 255, 111, 227, 211, 255, 124, 227, 211, 255, 132, 227, 211, 255, 136, 227, 211, 255, 138, 227, 211, 255, 139, 227, 211, 255, 144, 227, 211, 255, 140, 223, 211, 255, 136, 223, 211, 255, 144, 223, 211, 255, 152, 223, 211, 255, 145, 223, 211, 255, 140, 223, 211, 255, 129, 223, 211, 255, 126, 223, 211, 255, 125, 223, 211, 255, 117, 223, 211, 255, 113, 225, 209, 255, 120, 225, 209, 255, 134, 225, 209, 255, 142, 225, 209, 255, 137, 225, 209, 255, 134, 225, 209, 255, 129, 225, 209, 255, 125, 225, 209, 255, 123, 225, 209, 255, 129, 225, 209, 255, 131, 225, 211, 255, 134, 227, 211, 255, 135, 227, 211, 255, 133, 229, 211, 255, 130, 229, 211, 255, 127, 225, 211, 255, 124, 223, 211, 255, 124, 221, 211, 255, 126, 218, 211, 255, 126, 214, 213, 255, 126, 210, 216, 255, 129, 212, 217, 255, 134, 216, 217, 255, 144, 216, 217, 255, 148, 214, 217, 255, 146, 210, 217, 255, 135, 207, 219, 255, 112, 208, 219, 255, 100, 212, 219, 255, 105, 218, 219, 255, 114, 221, 221, 255, 121, 218, 221, 255, 127, 208, 221, 255, 130, 199, 219, 255, 130, 195, 217, 255, 129, 199, 217, 255, 131, 212, 216, 255, 131, 227, 214, 255, 131, 240, 214, 255, 130, 248, 213, 255, 129, 238, 213, 255, 129, 233, 213, 255, 128, 229, 211, 255, 128, 225, 211, 255, 126, 221, 209, 255, 125, 220, 209, 255, 125, 220, 208, 255, 125, 220, 208, 255, 126, 223, 208, 255, 126, 221, 208, 255, 244, 212, 224, 255, 243, 212, 224, 255, 231, 212, 222, 255, 220, 214, 221, 255, 210, 216, 219, 255, 172, 218, 219, 255, 164, 220, 216, 255, 151, 220, 214, 255, 139, 221, 214, 255, 142, 223, 213, 255, 146, 233, 204, 255, 147, 233, 203, 255, 143, 229, 203, 255, 138, 225, 204, 255, 138, 218, 206, 255, 135, 214, 208, 255, 133, 210, 209, 255, 135, 208, 209, 255, 137, 207, 211, 255, 137, 210, 211, 255, 139, 221, 214, 255, 140, 220, 216, 255, 142, 210, 216, 255, 146, 201, 216, 255, 151, 195, 217, 255, 151, 195, 217, 255, 146, 203, 217, 255, 138, 212, 219, 255, 123, 221, 219, 255, 108, 229, 219, 255, 96, 240, 219, 255, 91, 238, 219, 255, 87, 233, 219, 255, 89, 227, 219, 255, 98, 216, 219, 255, 116, 205, 219, 255, 139, 197, 219, 255, 156, 188, 219, 255, 153, 181, 219, 255, 136, 186, 217, 255, 119, 218, 216, 255, 111, 227, 214, 255, 107, 227, 214, 255, 110, 227, 214, 255, 112, 229, 214, 255, 115, 229, 214, 255, 120, 227, 214, 255, 124, 227, 214, 255, 132, 227, 214, 255, 139, 227, 213, 255, 139, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 136, 225, 211, 255, 137, 225, 211, 255, 139, 225, 211, 255, 139, 225, 211, 255, 131, 225, 211, 255, 122, 225, 211, 255, 124, 225, 211, 255, 139, 225, 211, 255, 146, 225, 211, 255, 146, 225, 211, 255, 150, 225, 211, 255, 152, 225, 211, 255, 145, 225, 211, 255, 133, 225, 211, 255, 125, 225, 211, 255, 134, 225, 211, 255, 144, 225, 211, 255, 140, 223, 211, 255, 135, 223, 211, 255, 134, 223, 211, 255, 130, 223, 211, 255, 122, 223, 211, 255, 122, 223, 211, 255, 129, 223, 211, 255, 128, 223, 211, 255, 129, 223, 211, 255, 134, 225, 211, 255, 127, 227, 209, 255, 118, 227, 209, 255, 119, 227, 209, 255, 122, 227, 209, 255, 121, 227, 209, 255, 110, 227, 209, 255, 100, 227, 209, 255, 114, 227, 209, 255, 130, 227, 209, 255, 128, 227, 209, 255, 122, 227, 211, 255, 114, 227, 211, 255, 112, 227, 211, 255, 117, 227, 211, 255, 127, 227, 211, 255, 131, 227, 211, 255, 142, 227, 211, 255, 152, 227, 211, 255, 133, 227, 211, 255, 129, 227, 211, 255, 129, 227, 209, 255, 136, 227, 209, 255, 142, 227, 209, 255, 132, 227, 209, 255, 121, 227, 209, 255, 114, 227, 209, 255, 115, 227, 209, 255, 114, 227, 209, 255, 108, 227, 209, 255, 104, 227, 209, 255, 107, 225, 211, 255, 113, 225, 211, 255, 115, 225, 211, 255, 113, 225, 211, 255, 109, 225, 211, 255, 114, 225, 211, 255, 124, 225, 211, 255, 144, 225, 211, 255, 150, 225, 211, 255, 127, 225, 211, 255, 120, 227, 211, 255, 123, 227, 211, 255, 119, 227, 211, 255, 116, 227, 211, 255, 118, 227, 211, 255, 124, 227, 211, 255, 130, 227, 211, 255, 135, 227, 211, 255, 145, 227, 211, 255, 153, 227, 211, 255, 136, 227, 211, 255, 113, 227, 211, 255, 107, 227, 211, 255, 118, 227, 211, 255, 134, 227, 211, 255, 134, 227, 211, 255, 133, 227, 211, 255, 143, 227, 211, 255, 153, 227, 211, 255, 153, 227, 211, 255, 145, 225, 211, 255, 141, 223, 211, 255, 145, 223, 211, 255, 153, 223, 211, 255, 153, 223, 211, 255, 141, 223, 211, 255, 126, 223, 211, 255, 119, 223, 211, 255, 118, 223, 211, 255, 116, 223, 211, 255, 112, 225, 209, 255, 117, 225, 209, 255, 136, 225, 209, 255, 147, 225, 209, 255, 142, 225, 209, 255, 140, 225, 209, 255, 138, 225, 209, 255, 132, 225, 209, 255, 123, 225, 209, 255, 122, 225, 209, 255, 127, 225, 211, 255, 129, 227, 211, 255, 130, 227, 211, 255, 130, 229, 211, 255, 128, 229, 211, 255, 124, 229, 211, 255, 123, 227, 211, 255, 123, 223, 211, 255, 125, 223, 211, 255, 126, 218, 211, 255, 126, 210, 214, 255, 124, 216, 214, 255, 128, 225, 214, 255, 130, 227, 216, 255, 130, 221, 217, 255, 137, 210, 217, 255, 146, 201, 219, 255, 144, 205, 219, 255, 128, 214, 219, 255, 104, 225, 221, 255, 97, 233, 224, 255, 102, 227, 224, 255, 114, 218, 222, 255, 121, 205, 221, 255, 120, 197, 219, 255, 122, 197, 217, 255, 128, 207, 216, 255, 134, 218, 214, 255, 136, 227, 214, 255, 133, 235, 213, 255, 131, 229, 214, 255, 130, 225, 214, 255, 128, 221, 213, 255, 127, 216, 213, 255, 126, 214, 211, 255, 125, 214, 209, 255, 124, 220, 209, 255, 123, 225, 209, 255, 123, 231, 208, 255, 122, 235, 208, 255, 208, 218, 222, 255, 208, 218, 221, 255, 181, 218, 221, 255, 156, 220, 219, 255, 156, 220, 217, 255, 139, 221, 216, 255, 134, 223, 214, 255, 135, 223, 211, 255, 137, 225, 211, 255, 138, 227, 209, 255, 140, 229, 206, 255, 142, 229, 204, 255, 140, 225, 206, 255, 137, 221, 206, 255, 136, 218, 209, 255, 135, 212, 209, 255, 134, 208, 211, 255, 137, 207, 214, 255, 140, 207, 214, 255, 141, 205, 214, 255, 143, 208, 216, 255, 147, 207, 216, 255, 151, 205, 216, 255, 150, 205, 217, 255, 145, 207, 217, 255, 136, 208, 217, 255, 119, 214, 217, 255, 103, 221, 219, 255, 94, 227, 219, 255, 89, 235, 219, 255, 87, 255, 221, 255, 91, 248, 221, 255, 99, 225, 221, 255, 118, 201, 221, 255, 138, 182, 221, 255, 155, 177, 221, 255, 159, 181, 221, 255, 147, 194, 221, 255, 130, 208, 221, 255, 119, 218, 217, 255, 115, 223, 213, 255, 118, 227, 211, 255, 119, 229, 211, 255, 117, 233, 211, 255, 119, 233, 211, 255, 126, 233, 211, 255, 138, 233, 211, 255, 137, 229, 211, 255, 137, 227, 211, 255, 139, 225, 211, 255, 135, 225, 211, 255, 133, 225, 211, 255, 134, 225, 211, 255, 128, 225, 211, 255, 125, 225, 211, 255, 127, 225, 211, 255, 132, 225, 211, 255, 137, 225, 211, 255, 142, 225, 211, 255, 147, 225, 211, 255, 150, 225, 211, 255, 144, 225, 211, 255, 141, 225, 211, 255, 148, 225, 211, 255, 147, 225, 211, 255, 139, 225, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 142, 225, 211, 255, 141, 225, 211, 255, 132, 225, 211, 255, 129, 225, 211, 255, 127, 225, 211, 255, 120, 225, 211, 255, 111, 225, 211, 255, 109, 225, 211, 255, 114, 225, 211, 255, 119, 225, 211, 255, 121, 225, 211, 255, 119, 225, 211, 255, 113, 227, 209, 255, 110, 227, 209, 255, 110, 227, 209, 255, 109, 227, 209, 255, 111, 227, 209, 255, 104, 227, 209, 255, 99, 227, 209, 255, 107, 227, 209, 255, 118, 227, 209, 255, 120, 227, 209, 255, 117, 227, 211, 255, 109, 227, 211, 255, 108, 227, 211, 255, 113, 227, 211, 255, 127, 227, 211, 255, 136, 227, 211, 255, 145, 227, 211, 255, 143, 227, 211, 255, 120, 227, 211, 255, 118, 227, 211, 255, 122, 227, 209, 255, 133, 227, 209, 255, 137, 227, 209, 255, 125, 227, 209, 255, 116, 227, 209, 255, 113, 227, 209, 255, 114, 227, 209, 255, 114, 227, 209, 255, 108, 227, 209, 255, 111, 227, 209, 255, 114, 225, 211, 255, 114, 225, 211, 255, 114, 225, 211, 255, 113, 225, 211, 255, 113, 225, 211, 255, 113, 225, 211, 255, 118, 225, 211, 255, 134, 225, 211, 255, 143, 225, 211, 255, 127, 225, 211, 255, 115, 227, 211, 255, 116, 227, 211, 255, 115, 227, 211, 255, 113, 227, 211, 255, 114, 227, 211, 255, 117, 227, 211, 255, 125, 227, 211, 255, 136, 227, 211, 255, 140, 227, 211, 255, 137, 227, 211, 255, 133, 227, 211, 255, 130, 227, 211, 255, 131, 227, 211, 255, 136, 227, 211, 255, 148, 227, 211, 255, 141, 227, 211, 255, 127, 227, 211, 255, 132, 227, 211, 255, 146, 227, 211, 255, 155, 227, 211, 255, 148, 225, 211, 255, 142, 225, 211, 255, 143, 225, 211, 255, 151, 225, 211, 255, 154, 225, 211, 255, 147, 225, 211, 255, 136, 225, 211, 255, 124, 225, 211, 255, 116, 225, 211, 255, 113, 225, 211, 255, 113, 225, 211, 255, 116, 225, 211, 255, 132, 225, 211, 255, 143, 225, 211, 255, 142, 225, 211, 255, 140, 225, 211, 255, 143, 225, 211, 255, 141, 225, 211, 255, 129, 225, 211, 255, 122, 225, 211, 255, 123, 225, 211, 255, 123, 227, 211, 255, 124, 227, 211, 255, 125, 229, 211, 255, 124, 229, 211, 255, 122, 229, 211, 255, 123, 229, 211, 255, 124, 229, 211, 255, 125, 227, 211, 255, 125, 225, 211, 255, 128, 223, 211, 255, 129, 221, 211, 255, 127, 223, 211, 255, 124, 220, 214, 255, 122, 220, 214, 255, 119, 218, 216, 255, 121, 216, 217, 255, 133, 214, 219, 255, 144, 214, 219, 255, 136, 214, 222, 255, 122, 214, 226, 255, 103, 216, 226, 255, 97, 218, 224, 255, 100, 221, 222, 255, 98, 221, 219, 255, 100, 221, 217, 255, 114, 218, 216, 255, 129, 214, 216, 255, 137, 208, 214, 255, 139, 208, 214, 255, 138, 216, 216, 255, 135, 214, 216, 255, 131, 210, 216, 255, 129, 208, 214, 255, 128, 208, 213, 255, 125, 212, 211, 255, 124, 221, 211, 255, 124, 229, 209, 255, 124, 238, 209, 255, 124, 242, 209, 255, 148, 221, 221, 255, 148, 221, 219, 255, 138, 221, 219, 255, 129, 221, 217, 255, 132, 223, 216, 255, 134, 223, 214, 255, 134, 225, 213, 255, 134, 227, 209, 255, 134, 227, 209, 255, 137, 225, 208, 255, 138, 220, 209, 255, 137, 220, 209, 255, 140, 218, 211, 255, 140, 216, 213, 255, 139, 214, 214, 255, 137, 210, 216, 255, 138, 208, 217, 255, 141, 207, 219, 255, 144, 207, 221, 255, 147, 203, 221, 255, 151, 195, 217, 255, 151, 199, 217, 255, 143, 208, 217, 255, 131, 218, 217, 255, 117, 227, 217, 255, 104, 229, 217, 255, 96, 229, 217, 255, 88, 225, 219, 255, 87, 221, 219, 255, 92, 220, 219, 255, 101, 220, 221, 255, 116, 216, 221, 255, 137, 203, 221, 255, 154, 192, 221, 255, 158, 188, 221, 255, 148, 190, 221, 255, 137, 201, 221, 255, 130, 216, 221, 255, 128, 231, 221, 255, 129, 236, 217, 255, 126, 225, 211, 255, 124, 223, 209, 255, 125, 229, 209, 255, 128, 233, 209, 255, 132, 235, 209, 255, 143, 235, 209, 255, 148, 233, 209, 255, 148, 229, 209, 255, 144, 223, 209, 255, 137, 223, 209, 255, 130, 225, 211, 255, 127, 225, 211, 255, 122, 225, 211, 255, 120, 225, 211, 255, 120, 225, 211, 255, 124, 225, 211, 255, 134, 225, 211, 255, 150, 225, 211, 255, 155, 225, 211, 255, 147, 225, 211, 255, 141, 225, 211, 255, 137, 225, 211, 255, 138, 225, 211, 255, 142, 225, 211, 255, 140, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 141, 225, 211, 255, 144, 225, 211, 255, 135, 225, 211, 255, 129, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 120, 225, 211, 255, 111, 225, 211, 255, 111, 225, 211, 255, 117, 225, 211, 255, 123, 225, 211, 255, 124, 225, 211, 255, 117, 225, 211, 255, 114, 227, 209, 255, 112, 227, 209, 255, 101, 227, 209, 255, 97, 227, 209, 255, 100, 227, 209, 255, 98, 227, 209, 255, 97, 227, 209, 255, 98, 227, 209, 255, 109, 227, 209, 255, 114, 227, 209, 255, 114, 227, 211, 255, 109, 227, 211, 255, 109, 227, 211, 255, 113, 227, 211, 255, 126, 227, 211, 255, 142, 227, 211, 255, 142, 227, 211, 255, 125, 227, 211, 255, 108, 227, 211, 255, 110, 227, 211, 255, 119, 227, 209, 255, 131, 227, 209, 255, 130, 227, 209, 255, 118, 227, 209, 255, 118, 227, 209, 255, 119, 227, 209, 255, 120, 227, 209, 255, 119, 227, 209, 255, 110, 227, 209, 255, 117, 227, 209, 255, 124, 225, 211, 255, 119, 225, 211, 255, 118, 225, 211, 255, 121, 225, 211, 255, 123, 225, 211, 255, 122, 225, 211, 255, 119, 225, 211, 255, 123, 225, 211, 255, 127, 225, 211, 255, 116, 225, 211, 255, 107, 227, 211, 255, 110, 227, 211, 255, 112, 227, 211, 255, 113, 227, 211, 255, 117, 227, 211, 255, 115, 227, 211, 255, 114, 227, 211, 255, 129, 227, 211, 255, 138, 227, 211, 255, 128, 227, 211, 255, 123, 227, 211, 255, 134, 227, 211, 255, 147, 227, 211, 255, 147, 227, 211, 255, 150, 227, 211, 255, 143, 227, 211, 255, 135, 227, 211, 255, 135, 227, 211, 255, 140, 227, 211, 255, 145, 227, 211, 255, 148, 225, 211, 255, 142, 225, 211, 255, 136, 225, 211, 255, 140, 225, 211, 255, 145, 225, 211, 255, 143, 225, 211, 255, 138, 225, 211, 255, 133, 225, 211, 255, 126, 225, 211, 255, 119, 225, 211, 255, 115, 225, 211, 255, 118, 225, 211, 255, 130, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 139, 225, 211, 255, 144, 225, 211, 255, 143, 225, 211, 255, 132, 225, 211, 255, 126, 225, 211, 255, 124, 225, 211, 255, 121, 227, 211, 255, 123, 227, 211, 255, 123, 229, 211, 255, 117, 229, 211, 255, 118, 229, 211, 255, 122, 231, 211, 255, 123, 231, 211, 255, 123, 231, 211, 255, 125, 233, 211, 255, 128, 235, 209, 255, 133, 227, 209, 255, 132, 218, 209, 255, 131, 212, 211, 255, 128, 218, 213, 255, 123, 225, 216, 255, 119, 229, 217, 255, 117, 225, 219, 255, 125, 216, 219, 255, 137, 203, 221, 255, 146, 188, 226, 255, 136, 194, 226, 255, 117, 210, 226, 255, 100, 227, 222, 255, 92, 238, 221, 255, 90, 240, 219, 255, 95, 233, 217, 255, 105, 220, 216, 255, 119, 205, 214, 255, 134, 199, 216, 255, 139, 210, 216, 255, 141, 212, 216, 255, 138, 208, 216, 255, 133, 207, 216, 255, 130, 207, 214, 255, 129, 210, 213, 255, 129, 220, 213, 255, 128, 229, 211, 255, 128, 238, 211, 255, 128, 244, 209, 255, 126, 225, 217, 255, 126, 223, 217, 255, 126, 223, 216, 255, 127, 223, 216, 255, 128, 225, 214, 255, 131, 225, 213, 255, 132, 225, 211, 255, 131, 225, 209, 255, 131, 225, 209, 255, 134, 223, 209, 255, 134, 210, 214, 255, 135, 207, 216, 255, 139, 208, 216, 255, 139, 208, 217, 255, 139, 208, 219, 255, 139, 208, 221, 255, 143, 208, 222, 255, 150, 208, 224, 255, 150, 208, 226, 255, 144, 207, 226, 255, 138, 199, 221, 255, 126, 205, 219, 255, 111, 218, 219, 255, 100, 233, 219, 255, 92, 240, 219, 255, 88, 240, 219, 255, 88, 235, 219, 255, 91, 221, 217, 255, 104, 210, 217, 255, 117, 199, 217, 255, 135, 182, 219, 255, 151, 186, 219, 255, 157, 194, 219, 255, 154, 203, 219, 255, 145, 214, 219, 255, 134, 221, 219, 255, 133, 225, 219, 255, 138, 229, 219, 255, 141, 229, 219, 255, 137, 227, 217, 255, 131, 221, 211, 255, 130, 221, 209, 255, 134, 225, 209, 255, 142, 233, 209, 255, 146, 235, 209, 255, 145, 235, 209, 255, 143, 233, 209, 255, 144, 225, 209, 255, 141, 221, 209, 255, 131, 221, 209, 255, 122, 223, 211, 255, 118, 225, 211, 255, 120, 225, 211, 255, 125, 225, 211, 255, 123, 225, 211, 255, 128, 225, 211, 255, 141, 225, 211, 255, 153, 225, 211, 255, 148, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 140, 225, 211, 255, 143, 225, 211, 255, 141, 225, 211, 255, 134, 225, 211, 255, 134, 225, 211, 255, 138, 225, 211, 255, 137, 225, 211, 255, 126, 225, 211, 255, 119, 225, 211, 255, 123, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 122, 225, 211, 255, 122, 227, 209, 255, 116, 227, 209, 255, 98, 227, 209, 255, 93, 227, 209, 255, 100, 227, 209, 255, 101, 227, 209, 255, 100, 227, 209, 255, 107, 227, 209, 255, 117, 227, 209, 255, 116, 227, 209, 255, 111, 227, 211, 255, 110, 227, 211, 255, 115, 227, 211, 255, 119, 227, 211, 255, 130, 227, 211, 255, 144, 227, 211, 255, 135, 227, 211, 255, 117, 227, 211, 255, 107, 227, 211, 255, 107, 227, 211, 255, 114, 227, 209, 255, 121, 227, 209, 255, 120, 227, 209, 255, 114, 227, 209, 255, 119, 227, 209, 255, 121, 227, 209, 255, 118, 227, 209, 255, 116, 227, 209, 255, 104, 227, 209, 255, 112, 227, 209, 255, 125, 225, 211, 255, 119, 225, 211, 255, 120, 225, 211, 255, 127, 225, 211, 255, 127, 225, 211, 255, 125, 225, 211, 255, 120, 225, 211, 255, 121, 225, 211, 255, 121, 225, 211, 255, 107, 225, 211, 255, 105, 227, 211, 255, 111, 227, 211, 255, 115, 227, 211, 255, 117, 227, 211, 255, 123, 227, 211, 255, 122, 227, 211, 255, 113, 227, 211, 255, 115, 227, 211, 255, 123, 227, 211, 255, 120, 227, 211, 255, 116, 227, 211, 255, 121, 227, 211, 255, 137, 227, 211, 255, 140, 227, 211, 255, 141, 227, 211, 255, 140, 227, 211, 255, 139, 227, 211, 255, 141, 227, 211, 255, 145, 227, 211, 255, 141, 227, 211, 255, 142, 225, 211, 255, 141, 225, 211, 255, 136, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 134, 225, 211, 255, 127, 225, 211, 255, 124, 225, 211, 255, 126, 225, 211, 255, 125, 225, 211, 255, 124, 225, 213, 255, 126, 225, 213, 255, 128, 225, 213, 255, 130, 225, 213, 255, 129, 225, 213, 255, 133, 225, 213, 255, 139, 225, 213, 255, 141, 225, 213, 255, 136, 225, 213, 255, 128, 225, 213, 255, 125, 227, 211, 255, 124, 227, 211, 255, 128, 227, 211, 255, 127, 227, 211, 255, 117, 227, 211, 255, 117, 229, 211, 255, 120, 231, 211, 255, 121, 231, 211, 255, 121, 233, 211, 255, 123, 233, 211, 255, 124, 233, 209, 255, 129, 229, 208, 255, 134, 223, 209, 255, 138, 220, 209, 255, 137, 221, 213, 255, 132, 225, 214, 255, 128, 227, 216, 255, 123, 223, 216, 255, 120, 218, 217, 255, 123, 207, 219, 255, 136, 184, 224, 255, 148, 186, 224, 255, 146, 201, 224, 255, 129, 216, 221, 255, 111, 227, 221, 255, 96, 233, 219, 255, 90, 233, 217, 255, 91, 227, 217, 255, 97, 220, 216, 255, 108, 216, 216, 255, 119, 220, 217, 255, 132, 218, 217, 255, 140, 214, 217, 255, 140, 210, 216, 255, 137, 208, 216, 255, 134, 210, 214, 255, 131, 214, 214, 255, 129, 221, 213, 255, 129, 227, 213, 255, 131, 231, 213, 255, 129, 227, 216, 255, 129, 225, 216, 255, 129, 225, 214, 255, 128, 225, 214, 255, 129, 223, 214, 255, 132, 223, 214, 255, 131, 223, 213, 255, 128, 223, 211, 255, 126, 223, 211, 255, 127, 218, 213, 255, 130, 203, 219, 255, 135, 199, 221, 255, 138, 201, 221, 255, 142, 205, 222, 255, 144, 207, 224, 255, 142, 208, 224, 255, 147, 210, 226, 255, 152, 212, 227, 255, 139, 212, 227, 255, 119, 214, 227, 255, 107, 220, 222, 255, 94, 225, 221, 255, 89, 231, 221, 255, 86, 235, 219, 255, 85, 235, 219, 255, 90, 231, 219, 255, 100, 223, 219, 255, 118, 212, 217, 255, 143, 203, 217, 255, 145, 194, 217, 255, 146, 184, 217, 255, 147, 190, 217, 255, 145, 201, 217, 255, 143, 216, 217, 255, 143, 225, 217, 255, 144, 231, 217, 255, 146, 231, 217, 255, 148, 227, 217, 255, 146, 220, 217, 255, 139, 216, 216, 255, 137, 220, 211, 255, 143, 221, 209, 255, 147, 225, 209, 255, 145, 229, 209, 255, 140, 231, 209, 255, 133, 231, 209, 255, 135, 229, 209, 255, 137, 225, 209, 255, 133, 221, 209, 255, 123, 221, 209, 255, 115, 223, 211, 255, 120, 225, 211, 255, 129, 225, 211, 255, 130, 225, 211, 255, 127, 225, 211, 255, 131, 225, 211, 255, 142, 225, 211, 255, 144, 225, 211, 255, 137, 225, 211, 255, 134, 225, 211, 255, 132, 225, 211, 255, 129, 225, 211, 255, 131, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 141, 225, 211, 255, 140, 225, 211, 255, 137, 225, 211, 255, 139, 225, 211, 255, 140, 227, 211, 255, 141, 227, 211, 255, 141, 227, 211, 255, 127, 227, 211, 255, 123, 227, 211, 255, 129, 227, 211, 255, 133, 227, 211, 255, 132, 227, 211, 255, 132, 227, 211, 255, 128, 227, 211, 255, 124, 227, 209, 255, 115, 227, 209, 255, 102, 227, 209, 255, 101, 227, 209, 255, 110, 227, 209, 255, 103, 227, 209, 255, 99, 227, 209, 255, 112, 227, 209, 255, 119, 227, 209, 255, 113, 227, 209, 255, 102, 229, 211, 255, 104, 229, 211, 255, 113, 229, 211, 255, 123, 229, 211, 255, 134, 229, 211, 255, 141, 229, 211, 255, 128, 229, 211, 255, 119, 229, 211, 255, 116, 229, 211, 255, 117, 229, 211, 255, 118, 229, 209, 255, 113, 229, 209, 255, 108, 229, 209, 255, 116, 229, 209, 255, 125, 229, 209, 255, 126, 229, 209, 255, 117, 229, 209, 255, 114, 229, 209, 255, 109, 229, 209, 255, 112, 229, 209, 255, 127, 225, 211, 255, 127, 225, 211, 255, 120, 225, 211, 255, 120, 225, 211, 255, 120, 225, 211, 255, 120, 225, 211, 255, 114, 225, 211, 255, 117, 225, 211, 255, 120, 225, 211, 255, 108, 225, 211, 255, 108, 227, 211, 255, 116, 227, 211, 255, 124, 227, 211, 255, 126, 227, 211, 255, 128, 227, 211, 255, 127, 227, 211, 255, 118, 227, 211, 255, 109, 227, 211, 255, 108, 227, 211, 255, 115, 227, 211, 255, 119, 227, 211, 255, 117, 227, 211, 255, 124, 227, 211, 255, 132, 227, 211, 255, 136, 227, 211, 255, 136, 227, 211, 255, 136, 227, 211, 255, 139, 227, 211, 255, 146, 227, 211, 255, 144, 227, 211, 255, 140, 227, 211, 255, 139, 227, 211, 255, 141, 227, 211, 255, 143, 227, 211, 255, 143, 227, 211, 255, 135, 227, 211, 255, 120, 227, 211, 255, 107, 227, 211, 255, 109, 227, 211, 255, 119, 227, 211, 255, 130, 225, 214, 255, 135, 225, 214, 255, 129, 225, 214, 255, 124, 225, 214, 255, 123, 225, 214, 255, 125, 225, 214, 255, 131, 225, 214, 255, 135, 225, 214, 255, 134, 225, 214, 255, 127, 225, 214, 255, 124, 227, 211, 255, 125, 227, 211, 255, 129, 227, 211, 255, 130, 225, 211, 255, 126, 225, 211, 255, 126, 227, 211, 255, 127, 229, 211, 255, 127, 231, 211, 255, 126, 233, 211, 255, 125, 233, 211, 255, 122, 223, 209, 255, 122, 225, 208, 255, 126, 233, 208, 255, 132, 233, 209, 255, 137, 229, 211, 255, 138, 221, 213, 255, 135, 216, 214, 255, 132, 218, 214, 255, 128, 223, 216, 255, 125, 223, 217, 255, 126, 208, 221, 255, 134, 203, 221, 255, 145, 201, 221, 255, 150, 199, 219, 255, 143, 201, 219, 255, 123, 207, 219, 255, 103, 214, 217, 255, 93, 223, 217, 255, 91, 233, 216, 255, 91, 236, 217, 255, 96, 233, 219, 255, 108, 231, 219, 255, 121, 225, 217, 255, 134, 220, 217, 255, 141, 214, 217, 255, 141, 210, 216, 255, 137, 210, 216, 255, 133, 210, 214, 255, 131, 212, 214, 255, 131, 212, 214, 255, 138, 229, 213, 255, 136, 229, 213, 255, 133, 225, 213, 255, 132, 225, 213, 255, 132, 221, 214, 255, 131, 221, 214, 255, 129, 220, 214, 255, 126, 218, 214, 255, 126, 218, 214, 255, 127, 212, 216, 255, 132, 197, 222, 255, 137, 197, 224, 255, 145, 201, 224, 255, 156, 205, 224, 255, 152, 208, 226, 255, 142, 212, 226, 255, 133, 214, 226, 255, 122, 214, 226, 255, 107, 214, 226, 255, 90, 221, 226, 255, 85, 246, 224, 255, 83, 248, 224, 255, 87, 236, 222, 255, 89, 223, 222, 255, 103, 212, 221, 255, 121, 205, 219, 255, 143, 201, 219, 255, 152, 203, 217, 255, 155, 207, 217, 255, 141, 208, 217, 255, 132, 208, 216, 255, 136, 210, 216, 255, 138, 214, 216, 255, 141, 218, 216, 255, 146, 220, 216, 255, 148, 221, 216, 255, 151, 221, 216, 255, 152, 221, 216, 255, 151, 220, 216, 255, 145, 218, 216, 255, 146, 220, 211, 255, 152, 223, 211, 255, 148, 223, 211, 255, 138, 225, 211, 255, 131, 227, 211, 255, 132, 227, 211, 255, 138, 225, 211, 255, 138, 223, 211, 255, 128, 223, 211, 255, 119, 221, 211, 255, 117, 225, 211, 255, 125, 225, 211, 255, 133, 225, 211, 255, 129, 225, 211, 255, 127, 225, 211, 255, 129, 225, 211, 255, 134, 225, 211, 255, 137, 225, 211, 255, 134, 225, 211, 255, 126, 225, 211, 255, 117, 225, 211, 255, 117, 225, 211, 255, 124, 225, 211, 255, 133, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 138, 225, 211, 255, 135, 225, 211, 255, 137, 225, 211, 255, 146, 225, 211, 255, 150, 227, 211, 255, 150, 227, 211, 255, 143, 227, 211, 255, 127, 227, 211, 255, 124, 227, 211, 255, 129, 227, 211, 255, 130, 227, 211, 255, 133, 227, 211, 255, 135, 227, 211, 255, 129, 227, 211, 255, 122, 227, 209, 255, 116, 227, 209, 255, 117, 227, 209, 255, 117, 227, 209, 255, 112, 227, 209, 255, 97, 227, 209, 255, 92, 227, 209, 255, 101, 227, 209, 255, 100, 227, 209, 255, 94, 227, 209, 255, 85, 229, 211, 255, 93, 229, 211, 255, 107, 229, 211, 255, 129, 229, 211, 255, 137, 229, 211, 255, 130, 229, 211, 255, 121, 229, 211, 255, 115, 229, 211, 255, 115, 229, 211, 255, 122, 229, 211, 255, 123, 229, 209, 255, 113, 229, 209, 255, 107, 229, 209, 255, 121, 229, 209, 255, 127, 229, 209, 255, 126, 229, 209, 255, 121, 229, 209, 255, 117, 229, 209, 255, 119, 229, 209, 255, 119, 229, 209, 255, 122, 225, 211, 255, 126, 225, 211, 255, 118, 225, 211, 255, 109, 225, 211, 255, 108, 225, 211, 255, 109, 225, 211, 255, 108, 225, 211, 255, 110, 225, 211, 255, 122, 225, 211, 255, 116, 225, 211, 255, 108, 227, 211, 255, 115, 227, 211, 255, 127, 227, 211, 255, 132, 227, 211, 255, 133, 227, 211, 255, 132, 227, 211, 255, 119, 227, 211, 255, 110, 227, 211, 255, 107, 227, 211, 255, 117, 227, 211, 255, 125, 227, 211, 255, 123, 227, 211, 255, 123, 227, 211, 255, 131, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 133, 227, 211, 255, 136, 227, 211, 255, 141, 227, 211, 255, 144, 227, 211, 255, 142, 227, 211, 255, 138, 227, 211, 255, 139, 227, 211, 255, 140, 227, 211, 255, 147, 227, 211, 255, 144, 227, 211, 255, 129, 227, 211, 255, 107, 227, 211, 255, 96, 227, 211, 255, 104, 227, 211, 255, 121, 225, 214, 255, 134, 225, 214, 255, 133, 225, 214, 255, 122, 225, 214, 255, 118, 225, 214, 255, 119, 225, 214, 255, 123, 225, 214, 255, 129, 225, 214, 255, 127, 225, 214, 255, 126, 225, 214, 255, 124, 229, 211, 255, 119, 229, 211, 255, 120, 227, 211, 255, 125, 225, 211, 255, 129, 223, 211, 255, 133, 225, 211, 255, 135, 227, 211, 255, 135, 231, 211, 255, 134, 231, 211, 255, 132, 229, 211, 255, 126, 221, 209, 255, 120, 225, 209, 255, 118, 233, 209, 255, 121, 235, 209, 255, 128, 229, 209, 255, 134, 221, 209, 255, 136, 216, 211, 255, 136, 218, 213, 255, 135, 225, 213, 255, 131, 233, 213, 255, 129, 233, 216, 255, 129, 225, 217, 255, 133, 212, 217, 255, 144, 199, 217, 255, 156, 192, 217, 255, 155, 192, 217, 255, 138, 197, 217, 255, 117, 210, 217, 255, 100, 221, 219, 255, 92, 231, 219, 255, 89, 236, 219, 255, 93, 236, 219, 255, 97, 231, 219, 255, 109, 227, 219, 255, 122, 220, 217, 255, 134, 214, 217, 255, 140, 208, 216, 255, 141, 203, 216, 255, 138, 199, 216, 255, 133, 197, 216, 255, 147, 229, 209, 255, 139, 229, 209, 255, 134, 225, 209, 255, 132, 223, 213, 255, 131, 220, 214, 255, 129, 218, 216, 255, 129, 214, 216, 255, 130, 212, 217, 255, 134, 210, 219, 255, 139, 208, 219, 255, 143, 201, 222, 255, 146, 203, 224, 255, 151, 207, 224, 255, 153, 210, 224, 255, 134, 214, 222, 255, 115, 216, 222, 255, 99, 218, 221, 255, 88, 218, 221, 255, 82, 216, 221, 255, 79, 223, 222, 255, 80, 251, 224, 255, 89, 249, 226, 255, 104, 229, 224, 255, 117, 208, 222, 255, 145, 194, 221, 255, 157, 186, 219, 255, 155, 190, 219, 255, 145, 201, 217, 255, 134, 214, 217, 255, 131, 221, 216, 255, 134, 221, 214, 255, 139, 220, 214, 255, 137, 220, 214, 255, 135, 220, 214, 255, 141, 220, 214, 255, 146, 220, 214, 255, 152, 221, 214, 255, 155, 221, 214, 255, 153, 221, 214, 255, 150, 221, 213, 255, 150, 225, 213, 255, 148, 227, 213, 255, 142, 225, 213, 255, 135, 225, 213, 255, 135, 223, 213, 255, 141, 223, 213, 255, 144, 225, 213, 255, 136, 225, 213, 255, 125, 227, 213, 255, 120, 227, 211, 255, 124, 225, 211, 255, 132, 225, 211, 255, 132, 225, 211, 255, 129, 225, 211, 255, 126, 225, 211, 255, 126, 225, 211, 255, 131, 225, 211, 255, 131, 225, 211, 255, 124, 225, 211, 255, 114, 225, 211, 255, 109, 225, 211, 255, 112, 225, 211, 255, 117, 225, 211, 255, 123, 225, 211, 255, 130, 225, 211, 255, 134, 225, 211, 255, 130, 225, 211, 255, 131, 225, 211, 255, 142, 225, 211, 255, 153, 225, 211, 255, 156, 227, 211, 255, 155, 227, 211, 255, 138, 227, 211, 255, 125, 227, 211, 255, 128, 227, 211, 255, 137, 227, 211, 255, 138, 227, 211, 255, 135, 227, 211, 255, 127, 227, 211, 255, 124, 227, 211, 255, 119, 227, 209, 255, 123, 227, 209, 255, 122, 227, 209, 255, 120, 227, 209, 255, 110, 227, 209, 255, 99, 227, 209, 255, 95, 227, 209, 255, 92, 227, 209, 255, 87, 227, 209, 255, 79, 227, 209, 255, 78, 229, 211, 255, 91, 229, 211, 255, 104, 229, 211, 255, 136, 229, 211, 255, 135, 229, 211, 255, 110, 229, 211, 255, 110, 229, 211, 255, 113, 229, 211, 255, 112, 229, 211, 255, 118, 229, 211, 255, 113, 229, 209, 255, 116, 229, 209, 255, 120, 229, 209, 255, 133, 229, 209, 255, 120, 229, 209, 255, 112, 229, 209, 255, 126, 229, 209, 255, 122, 229, 209, 255, 123, 229, 209, 255, 117, 229, 209, 255, 111, 227, 211, 255, 118, 225, 211, 255, 118, 225, 211, 255, 104, 225, 211, 255, 102, 225, 211, 255, 102, 225, 211, 255, 111, 225, 211, 255, 114, 225, 211, 255, 133, 225, 211, 255, 123, 225, 211, 255, 111, 227, 211, 255, 114, 227, 211, 255, 120, 227, 211, 255, 124, 227, 211, 255, 133, 227, 211, 255, 135, 227, 211, 255, 123, 227, 211, 255, 115, 227, 211, 255, 111, 227, 211, 255, 118, 227, 211, 255, 126, 227, 211, 255, 124, 227, 211, 255, 123, 227, 211, 255, 131, 227, 211, 255, 134, 227, 211, 255, 129, 227, 211, 255, 128, 227, 211, 255, 131, 227, 211, 255, 135, 227, 211, 255, 138, 227, 211, 255, 139, 227, 211, 255, 139, 227, 211, 255, 140, 227, 211, 255, 135, 227, 211, 255, 136, 227, 211, 255, 140, 227, 211, 255, 139, 227, 211, 255, 123, 227, 211, 255, 104, 227, 211, 255, 101, 227, 213, 255, 110, 225, 214, 255, 124, 225, 214, 255, 132, 225, 214, 255, 125, 225, 214, 255, 121, 225, 214, 255, 120, 225, 214, 255, 121, 225, 214, 255, 121, 225, 214, 255, 122, 225, 214, 255, 123, 227, 214, 255, 123, 229, 213, 255, 116, 229, 211, 255, 110, 227, 211, 255, 112, 225, 211, 255, 122, 223, 211, 255, 132, 223, 211, 255, 135, 223, 211, 255, 133, 227, 211, 255, 134, 229, 211, 255, 141, 231, 211, 255, 136, 229, 209, 255, 128, 225, 209, 255, 121, 223, 209, 255, 119, 221, 209, 255, 120, 223, 209, 255, 124, 227, 209, 255, 128, 229, 208, 255, 135, 229, 208, 255, 138, 225, 208, 255, 136, 225, 209, 255, 132, 236, 211, 255, 129, 235, 213, 255, 130, 225, 213, 255, 136, 214, 213, 255, 145, 203, 216, 255, 156, 197, 216, 255, 159, 195, 217, 255, 153, 195, 219, 255, 134, 199, 219, 255, 113, 205, 221, 255, 98, 225, 221, 255, 90, 231, 221, 255, 89, 229, 221, 255, 92, 229, 219, 255, 97, 225, 219, 255, 109, 221, 217, 255, 122, 214, 217, 255, 134, 207, 216, 255, 140, 201, 216, 255, 140, 197, 216, 255, 140, 229, 208, 255, 132, 227, 208, 255, 128, 225, 209, 255, 130, 221, 211, 255, 129, 218, 214, 255, 128, 214, 216, 255, 127, 210, 219, 255, 134, 208, 221, 255, 147, 205, 222, 255, 159, 205, 222, 255, 156, 208, 222, 255, 147, 212, 221, 255, 128, 216, 221, 255, 111, 220, 219, 255, 96, 221, 219, 255, 83, 221, 217, 255, 82, 221, 216, 255, 81, 218, 216, 255, 80, 216, 216, 255, 84, 218, 217, 255, 100, 225, 224, 255, 121, 221, 226, 255, 146, 210, 224, 255, 154, 199, 224, 255, 153, 192, 221, 255, 144, 192, 219, 255, 133, 197, 219, 255, 131, 210, 217, 255, 131, 221, 217, 255, 138, 225, 216, 255, 140, 220, 213, 255, 138, 220, 211, 255, 134, 223, 211, 255, 133, 227, 211, 255, 139, 229, 211, 255, 148, 231, 211, 255, 154, 229, 211, 255, 155, 225, 211, 255, 151, 223, 211, 255, 147, 223, 213, 255, 146, 231, 213, 255, 143, 231, 214, 255, 138, 227, 214, 255, 139, 225, 214, 255, 143, 221, 214, 255, 145, 221, 214, 255, 141, 225, 214, 255, 130, 227, 214, 255, 122, 231, 214, 255, 123, 231, 213, 255, 132, 227, 211, 255, 137, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 131, 225, 211, 255, 129, 225, 211, 255, 133, 225, 211, 255, 126, 225, 211, 255, 115, 225, 211, 255, 109, 225, 211, 255, 108, 225, 211, 255, 107, 225, 211, 255, 105, 225, 211, 255, 110, 225, 211, 255, 122, 225, 211, 255, 131, 225, 211, 255, 127, 225, 211, 255, 132, 225, 211, 255, 143, 225, 211, 255, 147, 225, 211, 255, 143, 227, 211, 255, 139, 229, 211, 255, 130, 229, 211, 255, 131, 229, 211, 255, 150, 229, 211, 255, 158, 229, 211, 255, 132, 229, 211, 255, 116, 229, 211, 255, 111, 229, 211, 255, 118, 229, 211, 255, 114, 227, 209, 255, 112, 227, 209, 255, 111, 227, 209, 255, 119, 227, 209, 255, 116, 227, 209, 255, 108, 227, 209, 255, 95, 227, 209, 255, 91, 227, 209, 255, 92, 227, 209, 255, 86, 227, 209, 255, 85, 229, 211, 255, 90, 231, 211, 255, 97, 231, 211, 255, 128, 231, 211, 255, 130, 231, 211, 255, 99, 231, 211, 255, 108, 231, 211, 255, 114, 231, 211, 255, 112, 231, 211, 255, 122, 231, 211, 255, 120, 231, 209, 255, 135, 231, 209, 255, 135, 231, 209, 255, 140, 231, 209, 255, 121, 231, 209, 255, 103, 231, 209, 255, 120, 231, 209, 255, 111, 231, 209, 255, 115, 231, 209, 255, 116, 229, 209, 255, 112, 227, 211, 255, 120, 225, 211, 255, 122, 225, 211, 255, 108, 225, 211, 255, 108, 225, 211, 255, 113, 225, 211, 255, 116, 225, 211, 255, 123, 225, 211, 255, 133, 225, 211, 255, 126, 225, 211, 255, 126, 227, 211, 255, 119, 227, 211, 255, 111, 227, 211, 255, 110, 227, 211, 255, 122, 227, 211, 255, 132, 227, 211, 255, 127, 227, 211, 255, 120, 227, 211, 255, 119, 227, 211, 255, 126, 227, 211, 255, 124, 227, 211, 255, 121, 227, 211, 255, 119, 227, 211, 255, 131, 227, 211, 255, 137, 227, 211, 255, 133, 227, 211, 255, 124, 227, 211, 255, 121, 227, 211, 255, 123, 227, 211, 255, 132, 227, 211, 255, 135, 229, 211, 255, 133, 229, 211, 255, 140, 229, 211, 255, 138, 229, 211, 255, 127, 229, 211, 255, 125, 229, 211, 255, 134, 229, 211, 255, 133, 229, 211, 255, 123, 229, 211, 255, 113, 227, 213, 255, 115, 225, 214, 255, 127, 225, 216, 255, 136, 225, 216, 255, 138, 225, 216, 255, 131, 225, 216, 255, 126, 225, 216, 255, 127, 225, 216, 255, 123, 225, 216, 255, 118, 225, 216, 255, 118, 227, 214, 255, 123, 231, 213, 255, 117, 231, 211, 255, 108, 227, 211, 255, 105, 223, 211, 255, 113, 221, 211, 255, 125, 221, 211, 255, 134, 221, 211, 255, 131, 225, 211, 255, 132, 227, 211, 255, 142, 229, 211, 255, 143, 231, 211, 255, 139, 225, 211, 255, 134, 216, 211, 255, 128, 212, 209, 255, 123, 220, 209, 255, 121, 231, 208, 255, 122, 238, 206, 255, 128, 235, 204, 255, 134, 227, 204, 255, 137, 220, 204, 255, 135, 227, 204, 255, 133, 229, 206, 255, 132, 229, 208, 255, 133, 225, 209, 255, 137, 220, 213, 255, 142, 212, 216, 255, 148, 201, 217, 255, 160, 192, 219, 255, 162, 184, 221, 255, 151, 184, 221, 255, 133, 203, 222, 255, 112, 210, 222, 255, 96, 218, 221, 255, 92, 223, 221, 255, 89, 229, 219, 255, 89, 229, 219, 255, 94, 225, 217, 255, 105, 220, 217, 255, 121, 216, 217, 255, 131, 212, 217, 255, 126, 229, 206, 255, 121, 227, 206, 255, 123, 223, 209, 255, 127, 220, 211, 255, 126, 216, 216, 255, 125, 210, 217, 255, 134, 207, 221, 255, 146, 205, 222, 255, 152, 201, 226, 255, 147, 203, 224, 255, 130, 216, 219, 255, 110, 221, 219, 255, 93, 225, 217, 255, 81, 227, 217, 255, 81, 227, 214, 255, 80, 223, 214, 255, 83, 221, 213, 255, 87, 218, 211, 255, 98, 214, 209, 255, 123, 205, 213, 255, 146, 181, 224, 255, 159, 179, 226, 255, 157, 188, 226, 255, 143, 201, 224, 255, 131, 210, 222, 255, 129, 218, 219, 255, 134, 220, 219, 255, 139, 221, 217, 255, 140, 221, 217, 255, 142, 223, 214, 255, 142, 227, 211, 255, 134, 227, 209, 255, 129, 227, 209, 255, 134, 227, 209, 255, 143, 227, 209, 255, 150, 227, 209, 255, 150, 227, 209, 255, 145, 227, 209, 255, 143, 225, 209, 255, 144, 229, 211, 255, 144, 235, 214, 255, 139, 235, 216, 255, 138, 231, 216, 255, 141, 225, 216, 255, 143, 221, 216, 255, 141, 221, 216, 255, 132, 225, 216, 255, 124, 231, 216, 255, 122, 235, 216, 255, 128, 235, 214, 255, 132, 227, 213, 255, 132, 225, 211, 255, 131, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 121, 225, 211, 255, 111, 225, 211, 255, 108, 225, 211, 255, 104, 225, 211, 255, 102, 225, 211, 255, 105, 225, 211, 255, 116, 225, 211, 255, 126, 225, 211, 255, 129, 225, 211, 255, 130, 225, 211, 255, 138, 225, 211, 255, 143, 225, 211, 255, 136, 227, 211, 255, 128, 229, 211, 255, 123, 229, 211, 255, 132, 229, 211, 255, 143, 229, 211, 255, 167, 229, 211, 255, 161, 229, 211, 255, 110, 229, 211, 255, 92, 229, 211, 255, 102, 229, 211, 255, 119, 229, 211, 255, 107, 227, 209, 255, 94, 227, 209, 255, 104, 227, 209, 255, 124, 227, 209, 255, 123, 227, 209, 255, 110, 227, 209, 255, 98, 227, 209, 255, 104, 227, 209, 255, 109, 227, 209, 255, 105, 229, 209, 255, 97, 231, 211, 255, 94, 231, 211, 255, 98, 231, 211, 255, 115, 231, 211, 255, 125, 231, 211, 255, 101, 231, 211, 255, 113, 231, 211, 255, 113, 231, 211, 255, 108, 231, 211, 255, 127, 231, 211, 255, 142, 231, 209, 255, 160, 231, 209, 255, 140, 231, 209, 255, 128, 231, 209, 255, 117, 231, 209, 255, 100, 231, 209, 255, 99, 231, 209, 255, 80, 231, 209, 255, 92, 231, 209, 255, 107, 229, 209, 255, 124, 227, 211, 255, 131, 225, 211, 255, 119, 225, 211, 255, 105, 225, 211, 255, 108, 225, 211, 255, 121, 225, 211, 255, 126, 225, 211, 255, 126, 225, 211, 255, 120, 225, 211, 255, 127, 225, 211, 255, 143, 227, 211, 255, 127, 227, 211, 255, 108, 227, 211, 255, 101, 227, 211, 255, 112, 227, 211, 255, 130, 227, 211, 255, 121, 227, 211, 255, 113, 227, 211, 255, 123, 227, 211, 255, 132, 227, 211, 255, 126, 227, 211, 255, 121, 227, 211, 255, 120, 227, 211, 255, 127, 227, 211, 255, 136, 227, 211, 255, 132, 227, 211, 255, 122, 227, 211, 255, 112, 227, 211, 255, 108, 227, 211, 255, 122, 227, 211, 255, 129, 229, 211, 255, 124, 229, 211, 255, 129, 229, 211, 255, 139, 229, 211, 255, 133, 229, 211, 255, 122, 229, 211, 255, 125, 229, 211, 255, 132, 229, 211, 255, 135, 229, 211, 255, 131, 229, 213, 255, 132, 227, 214, 255, 142, 225, 216, 255, 148, 225, 216, 255, 152, 225, 216, 255, 144, 225, 216, 255, 132, 225, 216, 255, 122, 225, 216, 255, 126, 225, 216, 255, 124, 225, 216, 255, 119, 227, 214, 255, 122, 231, 213, 255, 124, 231, 211, 255, 117, 227, 211, 255, 108, 223, 211, 255, 105, 221, 211, 255, 115, 221, 211, 255, 129, 221, 211, 255, 134, 221, 211, 255, 132, 225, 211, 255, 136, 227, 211, 255, 142, 223, 213, 255, 144, 221, 213, 255, 141, 221, 211, 255, 135, 221, 209, 255, 130, 223, 208, 255, 126, 227, 208, 255, 121, 229, 204, 255, 123, 231, 203, 255, 128, 229, 203, 255, 132, 225, 203, 255, 132, 218, 203, 255, 133, 218, 203, 255, 134, 220, 204, 255, 135, 221, 208, 255, 136, 220, 211, 255, 137, 216, 214, 255, 141, 207, 217, 255, 144, 199, 219, 255, 151, 192, 222, 255, 156, 186, 222, 255, 157, 182, 224, 255, 151, 188, 224, 255, 133, 201, 221, 255, 112, 216, 221, 255, 97, 227, 219, 255, 89, 236, 219, 255, 86, 238, 219, 255, 87, 236, 217, 255, 95, 235, 217, 255, 100, 233, 217, 255, 121, 227, 214, 255, 119, 220, 214, 255, 125, 210, 216, 255, 132, 205, 216, 255, 136, 203, 216, 255, 140, 203, 217, 255, 142, 207, 217, 255, 138, 208, 217, 255, 125, 207, 219, 255, 107, 210, 219, 255, 92, 225, 221, 255, 79, 231, 219, 255, 77, 231, 219, 255, 79, 227, 219, 255, 85, 218, 217, 255, 91, 207, 216, 255, 102, 201, 214, 255, 125, 199, 214, 255, 146, 201, 213, 255, 159, 197, 214, 255, 156, 177, 221, 255, 148, 181, 221, 255, 135, 194, 221, 255, 128, 210, 219, 255, 130, 223, 219, 255, 135, 231, 216, 255, 142, 231, 216, 255, 145, 227, 214, 255, 146, 221, 214, 255, 143, 220, 214, 255, 138, 233, 211, 255, 131, 235, 209, 255, 131, 231, 209, 255, 136, 225, 209, 255, 142, 221, 209, 255, 143, 220, 209, 255, 141, 221, 209, 255, 137, 225, 209, 255, 136, 227, 209, 255, 139, 231, 211, 255, 138, 235, 214, 255, 137, 233, 214, 255, 139, 231, 214, 255, 141, 227, 214, 255, 138, 223, 214, 255, 134, 223, 214, 255, 128, 227, 214, 255, 126, 231, 214, 255, 127, 233, 214, 255, 128, 233, 213, 255, 129, 227, 211, 255, 130, 225, 211, 255, 126, 225, 211, 255, 121, 225, 211, 255, 123, 225, 211, 255, 125, 225, 211, 255, 124, 225, 211, 255, 114, 225, 211, 255, 105, 225, 211, 255, 103, 225, 211, 255, 101, 225, 211, 255, 107, 225, 211, 255, 118, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 127, 225, 211, 255, 141, 225, 211, 255, 151, 225, 211, 255, 151, 225, 211, 255, 136, 225, 211, 255, 127, 227, 211, 255, 122, 229, 211, 255, 130, 229, 211, 255, 127, 229, 211, 255, 147, 229, 211, 255, 143, 229, 211, 255, 104, 229, 211, 255, 98, 229, 211, 255, 109, 229, 211, 255, 118, 229, 211, 255, 101, 227, 209, 255, 98, 227, 209, 255, 111, 227, 209, 255, 123, 227, 209, 255, 116, 227, 209, 255, 99, 227, 209, 255, 101, 227, 209, 255, 115, 227, 209, 255, 112, 227, 209, 255, 114, 227, 209, 255, 110, 229, 211, 255, 110, 231, 211, 255, 114, 231, 211, 255, 113, 231, 211, 255, 120, 231, 211, 255, 105, 231, 211, 255, 102, 231, 211, 255, 107, 231, 211, 255, 103, 231, 211, 255, 118, 231, 211, 255, 143, 231, 211, 255, 154, 231, 211, 255, 119, 231, 211, 255, 102, 231, 211, 255, 99, 231, 209, 255, 99, 231, 209, 255, 91, 231, 209, 255, 69, 231, 209, 255, 81, 231, 209, 255, 103, 229, 209, 255, 136, 227, 211, 255, 139, 225, 211, 255, 108, 225, 211, 255, 91, 225, 211, 255, 98, 225, 211, 255, 114, 225, 211, 255, 126, 225, 211, 255, 117, 225, 211, 255, 112, 225, 211, 255, 129, 225, 211, 255, 148, 227, 211, 255, 130, 227, 211, 255, 110, 227, 211, 255, 105, 227, 211, 255, 112, 227, 211, 255, 130, 227, 211, 255, 112, 227, 211, 255, 98, 227, 211, 255, 111, 227, 211, 255, 117, 227, 211, 255, 122, 227, 211, 255, 124, 227, 211, 255, 125, 227, 211, 255, 123, 227, 211, 255, 129, 227, 211, 255, 126, 227, 211, 255, 115, 227, 211, 255, 109, 227, 211, 255, 107, 227, 211, 255, 115, 227, 211, 255, 123, 229, 211, 255, 122, 229, 211, 255, 121, 229, 211, 255, 129, 229, 211, 255, 135, 229, 211, 255, 133, 229, 211, 255, 131, 229, 211, 255, 135, 229, 211, 255, 141, 229, 211, 255, 143, 227, 211, 255, 143, 227, 213, 255, 146, 225, 213, 255, 153, 225, 213, 255, 153, 225, 213, 255, 148, 225, 213, 255, 138, 225, 213, 255, 125, 225, 213, 255, 118, 225, 213, 255, 120, 225, 213, 255, 118, 227, 213, 255, 115, 231, 211, 255, 123, 231, 211, 255, 122, 227, 211, 255, 111, 225, 211, 255, 105, 223, 211, 255, 110, 221, 211, 255, 122, 223, 211, 255, 128, 225, 211, 255, 126, 225, 211, 255, 129, 225, 211, 255, 135, 220, 213, 255, 140, 221, 213, 255, 138, 227, 211, 255, 133, 231, 211, 255, 131, 229, 209, 255, 130, 223, 208, 255, 127, 221, 206, 255, 128, 223, 206, 255, 128, 231, 204, 255, 129, 231, 204, 255, 130, 218, 204, 255, 133, 216, 204, 255, 131, 218, 206, 255, 127, 218, 208, 255, 129, 218, 211, 255, 136, 218, 213, 255, 140, 214, 214, 255, 140, 212, 217, 255, 140, 210, 217, 255, 144, 205, 219, 255, 147, 192, 221, 255, 151, 192, 221, 255, 154, 197, 221, 255, 148, 205, 221, 255, 133, 212, 221, 255, 114, 220, 221, 255, 98, 225, 221, 255, 90, 229, 221, 255, 88, 231, 221, 255, 86, 233, 221, 255, 121, 212, 226, 255, 121, 208, 224, 255, 131, 201, 222, 255, 143, 197, 221, 255, 143, 197, 219, 255, 135, 201, 216, 255, 119, 208, 214, 255, 103, 218, 211, 255, 92, 223, 209, 255, 81, 229, 211, 255, 79, 235, 221, 255, 76, 233, 222, 255, 82, 223, 222, 255, 92, 212, 222, 255, 105, 199, 222, 255, 126, 186, 221, 255, 144, 182, 221, 255, 157, 184, 221, 255, 157, 188, 221, 255, 147, 195, 221, 255, 138, 207, 214, 255, 133, 210, 213, 255, 131, 216, 213, 255, 133, 221, 213, 255, 139, 225, 213, 255, 143, 227, 211, 255, 147, 227, 211, 255, 150, 225, 211, 255, 146, 223, 211, 255, 141, 223, 211, 255, 135, 229, 211, 255, 131, 229, 211, 255, 132, 229, 211, 255, 136, 227, 211, 255, 137, 225, 211, 255, 134, 225, 211, 255, 131, 225, 211, 255, 129, 227, 211, 255, 129, 227, 211, 255, 133, 229, 211, 255, 135, 229, 211, 255, 138, 229, 211, 255, 137, 229, 211, 255, 134, 227, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 136, 227, 211, 255, 137, 229, 211, 255, 132, 229, 211, 255, 125, 229, 211, 255, 125, 227, 209, 255, 124, 227, 209, 255, 117, 227, 209, 255, 116, 227, 209, 255, 118, 227, 209, 255, 119, 227, 209, 255, 114, 227, 209, 255, 104, 227, 209, 255, 101, 227, 209, 255, 102, 227, 209, 255, 110, 225, 211, 255, 124, 225, 211, 255, 136, 225, 211, 255, 141, 225, 211, 255, 133, 225, 211, 255, 137, 225, 211, 255, 152, 225, 211, 255, 157, 225, 211, 255, 152, 225, 211, 255, 140, 225, 211, 255, 136, 227, 209, 255, 126, 227, 209, 255, 117, 227, 209, 255, 104, 227, 209, 255, 125, 227, 209, 255, 124, 227, 209, 255, 109, 227, 209, 255, 111, 227, 209, 255, 116, 227, 209, 255, 119, 227, 209, 255, 102, 227, 209, 255, 111, 227, 209, 255, 117, 227, 209, 255, 119, 227, 209, 255, 104, 227, 209, 255, 92, 227, 209, 255, 104, 227, 209, 255, 115, 227, 209, 255, 113, 227, 209, 255, 125, 227, 209, 255, 125, 229, 209, 255, 121, 229, 209, 255, 117, 229, 209, 255, 111, 229, 209, 255, 117, 229, 209, 255, 113, 229, 209, 255, 94, 229, 209, 255, 100, 229, 209, 255, 99, 229, 209, 255, 107, 229, 211, 255, 125, 231, 213, 255, 127, 231, 214, 255, 93, 231, 213, 255, 84, 231, 213, 255, 86, 231, 211, 255, 93, 231, 211, 255, 90, 231, 209, 255, 74, 231, 209, 255, 82, 231, 209, 255, 110, 231, 209, 255, 142, 227, 211, 255, 136, 227, 211, 255, 105, 227, 211, 255, 87, 227, 211, 255, 100, 227, 211, 255, 110, 227, 211, 255, 112, 227, 211, 255, 102, 227, 211, 255, 105, 227, 211, 255, 126, 227, 211, 255, 141, 227, 209, 255, 127, 227, 209, 255, 112, 227, 209, 255, 114, 227, 209, 255, 116, 227, 209, 255, 130, 227, 209, 255, 118, 227, 209, 255, 100, 227, 209, 255, 102, 227, 209, 255, 104, 227, 209, 255, 115, 227, 209, 255, 118, 227, 209, 255, 122, 227, 209, 255, 121, 227, 209, 255, 123, 227, 209, 255, 122, 227, 209, 255, 115, 227, 209, 255, 110, 227, 209, 255, 115, 227, 209, 255, 123, 227, 209, 255, 127, 227, 211, 255, 129, 227, 211, 255, 123, 227, 211, 255, 121, 227, 211, 255, 126, 227, 211, 255, 134, 227, 211, 255, 137, 227, 211, 255, 138, 227, 211, 255, 143, 227, 211, 255, 148, 227, 211, 255, 144, 227, 211, 255, 141, 227, 211, 255, 143, 227, 211, 255, 143, 227, 211, 255, 138, 227, 211, 255, 132, 227, 211, 255, 126, 227, 211, 255, 120, 227, 211, 255, 117, 227, 211, 255, 112, 227, 211, 255, 105, 229, 209, 255, 109, 229, 209, 255, 113, 227, 209, 255, 114, 227, 209, 255, 109, 225, 209, 255, 108, 225, 209, 255, 116, 225, 209, 255, 124, 227, 209, 255, 125, 227, 209, 255, 123, 225, 209, 255, 126, 225, 211, 255, 132, 225, 211, 255, 132, 227, 211, 255, 128, 229, 211, 255, 125, 227, 211, 255, 128, 225, 209, 255, 132, 225, 209, 255, 135, 225, 209, 255, 137, 229, 209, 255, 135, 229, 209, 255, 135, 223, 208, 255, 134, 221, 209, 255, 126, 221, 209, 255, 119, 221, 209, 255, 121, 221, 211, 255, 128, 221, 211, 255, 134, 221, 211, 255, 137, 221, 213, 255, 138, 221, 213, 255, 140, 221, 214, 255, 138, 216, 216, 255, 136, 212, 216, 255, 141, 205, 217, 255, 150, 197, 219, 255, 155, 194, 219, 255, 146, 194, 221, 255, 132, 199, 222, 255, 114, 207, 224, 255, 99, 214, 224, 255, 93, 218, 224, 255, 130, 197, 224, 255, 133, 203, 222, 255, 133, 210, 222, 255, 131, 216, 221, 255, 118, 214, 219, 255, 101, 212, 217, 255, 89, 216, 216, 255, 81, 223, 214, 255, 77, 235, 213, 255, 77, 240, 214, 255, 81, 231, 221, 255, 90, 218, 222, 255, 109, 203, 222, 255, 131, 192, 222, 255, 147, 188, 222, 255, 158, 192, 222, 255, 156, 197, 222, 255, 141, 201, 222, 255, 135, 199, 222, 255, 136, 203, 221, 255, 137, 220, 213, 255, 137, 225, 211, 255, 138, 225, 211, 255, 143, 225, 211, 255, 146, 225, 211, 255, 147, 225, 211, 255, 145, 225, 211, 255, 143, 225, 211, 255, 139, 225, 211, 255, 135, 225, 211, 255, 132, 227, 211, 255, 128, 227, 211, 255, 130, 227, 211, 255, 133, 227, 211, 255, 128, 227, 211, 255, 121, 227, 211, 255, 117, 227, 211, 255, 117, 227, 211, 255, 122, 227, 211, 255, 129, 227, 211, 255, 134, 227, 211, 255, 135, 227, 211, 255, 131, 227, 211, 255, 129, 227, 211, 255, 132, 227, 211, 255, 138, 227, 211, 255, 145, 227, 211, 255, 139, 227, 211, 255, 127, 227, 211, 255, 119, 227, 211, 255, 118, 227, 209, 255, 117, 227, 209, 255, 116, 227, 209, 255, 118, 227, 209, 255, 117, 227, 209, 255, 115, 227, 209, 255, 105, 227, 209, 255, 97, 227, 209, 255, 100, 227, 209, 255, 115, 227, 209, 255, 133, 225, 211, 255, 150, 225, 211, 255, 153, 225, 211, 255, 150, 225, 211, 255, 146, 225, 211, 255, 146, 225, 211, 255, 143, 225, 211, 255, 145, 225, 211, 255, 144, 225, 211, 255, 140, 225, 211, 255, 137, 227, 209, 255, 127, 227, 209, 255, 111, 227, 209, 255, 107, 227, 209, 255, 118, 227, 209, 255, 113, 227, 209, 255, 107, 227, 209, 255, 109, 227, 209, 255, 114, 227, 209, 255, 124, 227, 209, 255, 107, 227, 209, 255, 111, 227, 209, 255, 115, 227, 209, 255, 114, 227, 209, 255, 103, 227, 209, 255, 97, 227, 209, 255, 110, 227, 209, 255, 116, 227, 209, 255, 118, 227, 209, 255, 135, 227, 209, 255, 130, 229, 209, 255, 116, 229, 209, 255, 101, 229, 209, 255, 102, 229, 209, 255, 113, 229, 209, 255, 119, 229, 209, 255, 100, 229, 209, 255, 99, 229, 209, 255, 94, 229, 209, 255, 96, 229, 211, 255, 107, 231, 214, 255, 103, 231, 216, 255, 84, 231, 214, 255, 83, 231, 214, 255, 84, 231, 213, 255, 83, 231, 211, 255, 86, 231, 209, 255, 80, 231, 209, 255, 89, 231, 209, 255, 120, 231, 209, 255, 135, 227, 211, 255, 126, 227, 211, 255, 109, 227, 211, 255, 95, 227, 211, 255, 104, 227, 211, 255, 109, 227, 211, 255, 103, 227, 211, 255, 96, 227, 211, 255, 100, 227, 211, 255, 118, 227, 211, 255, 131, 227, 209, 255, 122, 227, 209, 255, 116, 227, 209, 255, 118, 227, 209, 255, 117, 227, 209, 255, 131, 227, 209, 255, 128, 227, 209, 255, 111, 227, 209, 255, 103, 227, 209, 255, 103, 227, 209, 255, 110, 227, 209, 255, 104, 227, 209, 255, 109, 227, 209, 255, 115, 227, 209, 255, 116, 227, 209, 255, 123, 227, 209, 255, 125, 227, 209, 255, 118, 227, 209, 255, 122, 227, 209, 255, 126, 227, 209, 255, 128, 227, 211, 255, 135, 227, 211, 255, 132, 227, 211, 255, 122, 227, 211, 255, 121, 227, 211, 255, 124, 227, 211, 255, 126, 227, 211, 255, 126, 227, 211, 255, 130, 227, 211, 255, 139, 227, 211, 255, 141, 227, 209, 255, 138, 227, 209, 255, 137, 227, 209, 255, 137, 227, 209, 255, 130, 227, 209, 255, 122, 227, 209, 255, 116, 227, 209, 255, 121, 227, 209, 255, 125, 227, 209, 255, 119, 227, 209, 255, 109, 227, 209, 255, 98, 227, 209, 255, 97, 227, 209, 255, 108, 227, 209, 255, 114, 227, 209, 255, 111, 227, 209, 255, 110, 227, 209, 255, 117, 227, 209, 255, 125, 227, 209, 255, 123, 227, 209, 255, 121, 227, 211, 255, 121, 227, 211, 255, 123, 227, 211, 255, 122, 227, 211, 255, 119, 227, 211, 255, 120, 227, 211, 255, 125, 227, 211, 255, 130, 227, 211, 255, 135, 227, 211, 255, 141, 227, 211, 255, 140, 225, 211, 255, 135, 225, 211, 255, 130, 225, 211, 255, 126, 225, 211, 255, 122, 225, 211, 255, 124, 225, 211, 255, 127, 225, 211, 255, 128, 225, 211, 255, 131, 225, 211, 255, 135, 227, 213, 255, 135, 227, 214, 255, 130, 223, 216, 255, 129, 212, 216, 255, 134, 203, 217, 255, 140, 194, 219, 255, 146, 192, 221, 255, 152, 195, 221, 255, 146, 203, 224, 255, 133, 210, 224, 255, 122, 214, 224, 255, 130, 207, 216, 255, 123, 212, 216, 255, 113, 221, 216, 255, 98, 231, 217, 255, 89, 233, 219, 255, 82, 233, 221, 255, 76, 231, 221, 255, 74, 229, 222, 255, 79, 229, 222, 255, 90, 225, 222, 255, 107, 210, 221, 255, 131, 199, 219, 255, 154, 188, 219, 255, 163, 184, 219, 255, 161, 192, 219, 255, 144, 205, 219, 255, 132, 218, 219, 255, 131, 221, 219, 255, 137, 223, 219, 255, 143, 220, 219, 255, 144, 223, 213, 255, 142, 225, 211, 255, 142, 225, 211, 255, 145, 225, 211, 255, 144, 225, 211, 255, 140, 225, 211, 255, 135, 225, 211, 255, 133, 225, 211, 255, 132, 225, 211, 255, 131, 225, 211, 255, 129, 227, 211, 255, 130, 227, 211, 255, 131, 227, 211, 255, 128, 227, 211, 255, 120, 227, 211, 255, 113, 227, 211, 255, 112, 227, 211, 255, 115, 227, 211, 255, 123, 227, 211, 255, 131, 227, 211, 255, 131, 227, 211, 255, 130, 227, 211, 255, 131, 227, 211, 255, 132, 227, 211, 255, 134, 227, 211, 255, 137, 227, 211, 255, 140, 227, 211, 255, 131, 227, 211, 255, 119, 227, 211, 255, 118, 227, 211, 255, 118, 227, 209, 255, 120, 227, 209, 255, 120, 227, 209, 255, 120, 227, 209, 255, 119, 227, 209, 255, 116, 227, 209, 255, 108, 227, 209, 255, 99, 227, 209, 255, 108, 227, 209, 255, 134, 227, 209, 255, 155, 225, 211, 255, 157, 225, 211, 255, 155, 225, 211, 255, 153, 225, 211, 255, 145, 225, 211, 255, 133, 225, 211, 255, 128, 225, 211, 255, 127, 225, 211, 255, 131, 225, 211, 255, 132, 225, 211, 255, 125, 227, 209, 255, 124, 227, 209, 255, 114, 227, 209, 255, 122, 227, 209, 255, 124, 227, 209, 255, 115, 227, 209, 255, 102, 227, 209, 255, 100, 227, 209, 255, 105, 227, 209, 255, 118, 227, 209, 255, 101, 227, 209, 255, 100, 227, 209, 255, 110, 227, 209, 255, 113, 227, 209, 255, 105, 227, 209, 255, 99, 227, 209, 255, 102, 227, 209, 255, 113, 227, 209, 255, 115, 227, 209, 255, 118, 227, 209, 255, 112, 229, 209, 255, 99, 229, 209, 255, 85, 229, 209, 255, 92, 229, 209, 255, 109, 229, 209, 255, 121, 229, 209, 255, 108, 229, 209, 255, 98, 229, 209, 255, 85, 229, 209, 255, 89, 229, 209, 255, 101, 229, 214, 255, 97, 229, 216, 255, 86, 229, 214, 255, 88, 229, 214, 255, 85, 229, 213, 255, 79, 229, 211, 255, 84, 229, 209, 255, 90, 229, 209, 255, 104, 229, 209, 255, 134, 229, 209, 255, 125, 227, 211, 255, 114, 227, 211, 255, 104, 227, 211, 255, 100, 227, 211, 255, 105, 227, 211, 255, 109, 227, 211, 255, 100, 227, 211, 255, 96, 227, 211, 255, 100, 227, 211, 255, 111, 227, 211, 255, 124, 227, 209, 255, 126, 227, 209, 255, 130, 227, 209, 255, 131, 227, 209, 255, 128, 227, 209, 255, 131, 227, 209, 255, 129, 227, 209, 255, 113, 227, 209, 255, 103, 227, 209, 255, 105, 227, 209, 255, 108, 227, 209, 255, 96, 227, 209, 255, 97, 227, 209, 255, 101, 227, 209, 255, 104, 227, 209, 255, 112, 227, 209, 255, 121, 227, 209, 255, 127, 227, 209, 255, 132, 227, 209, 255, 130, 227, 209, 255, 135, 227, 211, 255, 142, 227, 211, 255, 138, 227, 211, 255, 127, 227, 211, 255, 120, 227, 211, 255, 119, 227, 211, 255, 120, 227, 211, 255, 119, 227, 211, 255, 119, 227, 211, 255, 125, 227, 211, 255, 133, 227, 209, 255, 136, 227, 209, 255, 139, 227, 209, 255, 137, 227, 209, 255, 131, 227, 209, 255, 122, 227, 209, 255, 114, 227, 209, 255, 115, 227, 209, 255, 120, 227, 209, 255, 121, 227, 209, 255, 115, 227, 209, 255, 102, 227, 209, 255, 95, 227, 209, 255, 100, 227, 209, 255, 112, 227, 209, 255, 118, 227, 209, 255, 113, 227, 209, 255, 109, 227, 209, 255, 113, 227, 209, 255, 118, 227, 209, 255, 120, 227, 211, 255, 119, 227, 211, 255, 114, 227, 211, 255, 110, 227, 211, 255, 111, 227, 211, 255, 114, 227, 211, 255, 118, 227, 211, 255, 119, 227, 211, 255, 121, 227, 211, 255, 127, 227, 211, 255, 134, 225, 211, 255, 138, 225, 211, 255, 138, 225, 211, 255, 135, 225, 211, 255, 132, 225, 211, 255, 132, 225, 211, 255, 132, 225, 211, 255, 128, 225, 211, 255, 128, 225, 211, 255, 132, 227, 211, 255, 131, 231, 213, 255, 128, 227, 214, 255, 131, 220, 214, 255, 133, 212, 216, 255, 129, 205, 217, 255, 132, 203, 219, 255, 140, 207, 219, 255, 147, 210, 221, 255, 150, 216, 222, 255, 150, 220, 222, 255, 105, 235, 211, 255, 93, 231, 211, 255, 89, 229, 213, 255, 83, 231, 216, 255, 80, 235, 219, 255, 78, 238, 222, 255, 78, 235, 226, 255, 85, 223, 229, 255, 103, 207, 232, 255, 129, 192, 230, 255, 155, 182, 221, 255, 169, 186, 217, 255, 167, 192, 217, 255, 148, 199, 217, 255, 131, 205, 217, 255, 126, 210, 217, 255, 131, 218, 217, 255, 143, 229, 217, 255, 148, 238, 217, 255, 148, 240, 216, 255, 144, 229, 213, 255, 140, 225, 211, 255, 140, 225, 211, 255, 139, 225, 211, 255, 133, 225, 211, 255, 128, 225, 211, 255, 128, 225, 211, 255, 129, 225, 211, 255, 129, 225, 211, 255, 129, 225, 211, 255, 131, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 126, 227, 211, 255, 120, 227, 211, 255, 117, 227, 211, 255, 121, 227, 211, 255, 127, 227, 211, 255, 130, 227, 211, 255, 130, 227, 211, 255, 130, 227, 211, 255, 135, 227, 211, 255, 134, 227, 211, 255, 129, 227, 211, 255, 129, 227, 211, 255, 133, 227, 211, 255, 133, 227, 211, 255, 129, 227, 211, 255, 125, 227, 211, 255, 125, 227, 211, 255, 124, 227, 209, 255, 124, 227, 209, 255, 126, 227, 209, 255, 127, 227, 209, 255, 125, 227, 209, 255, 123, 227, 209, 255, 117, 227, 209, 255, 108, 227, 209, 255, 112, 227, 209, 255, 135, 227, 209, 255, 141, 225, 211, 255, 138, 225, 211, 255, 141, 225, 211, 255, 137, 225, 211, 255, 125, 225, 211, 255, 120, 225, 211, 255, 121, 225, 211, 255, 114, 225, 211, 255, 126, 225, 211, 255, 131, 225, 211, 255, 123, 227, 209, 255, 125, 227, 209, 255, 119, 227, 209, 255, 120, 227, 209, 255, 125, 227, 209, 255, 118, 227, 209, 255, 99, 227, 209, 255, 96, 227, 209, 255, 98, 227, 209, 255, 104, 227, 209, 255, 93, 227, 209, 255, 95, 227, 209, 255, 104, 227, 209, 255, 109, 227, 209, 255, 103, 227, 209, 255, 93, 227, 209, 255, 92, 227, 209, 255, 109, 227, 209, 255, 107, 227, 209, 255, 92, 227, 209, 255, 94, 229, 209, 255, 98, 229, 209, 255, 87, 229, 209, 255, 92, 229, 209, 255, 105, 229, 209, 255, 114, 229, 209, 255, 108, 229, 209, 255, 93, 229, 209, 255, 82, 229, 209, 255, 94, 229, 211, 255, 111, 229, 214, 255, 111, 229, 216, 255, 94, 229, 214, 255, 98, 229, 214, 255, 96, 229, 213, 255, 84, 229, 211, 255, 85, 229, 209, 255, 98, 229, 209, 255, 114, 229, 209, 255, 137, 229, 209, 255, 118, 227, 211, 255, 103, 227, 211, 255, 98, 227, 211, 255, 96, 227, 211, 255, 108, 227, 211, 255, 105, 227, 211, 255, 98, 227, 211, 255, 99, 227, 211, 255, 102, 227, 211, 255, 107, 227, 211, 255, 120, 227, 209, 255, 132, 227, 209, 255, 152, 227, 209, 255, 158, 227, 209, 255, 153, 227, 209, 255, 141, 227, 209, 255, 133, 227, 209, 255, 114, 227, 209, 255, 103, 227, 209, 255, 109, 227, 209, 255, 112, 227, 209, 255, 101, 227, 209, 255, 96, 227, 209, 255, 99, 227, 209, 255, 101, 227, 209, 255, 99, 227, 209, 255, 101, 227, 209, 255, 126, 227, 209, 255, 144, 227, 209, 255, 137, 227, 209, 255, 150, 227, 211, 255, 157, 227, 211, 255, 138, 227, 211, 255, 124, 227, 211, 255, 117, 227, 211, 255, 119, 227, 211, 255, 126, 227, 211, 255, 127, 227, 211, 255, 123, 227, 211, 255, 123, 227, 211, 255, 129, 227, 209, 255, 135, 227, 209, 255, 139, 227, 209, 255, 137, 227, 209, 255, 131, 227, 209, 255, 126, 227, 209, 255, 124, 227, 209, 255, 117, 227, 209, 255, 110, 227, 209, 255, 108, 227, 209, 255, 108, 227, 209, 255, 105, 227, 209, 255, 102, 227, 209, 255, 102, 227, 209, 255, 110, 227, 209, 255, 120, 227, 209, 255, 124, 227, 209, 255, 117, 227, 209, 255, 109, 227, 209, 255, 109, 227, 209, 255, 115, 227, 211, 255, 120, 227, 211, 255, 116, 227, 211, 255, 107, 227, 211, 255, 102, 227, 211, 255, 107, 227, 211, 255, 115, 227, 211, 255, 117, 227, 211, 255, 115, 227, 211, 255, 116, 227, 211, 255, 122, 225, 211, 255, 132, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 139, 225, 211, 255, 140, 225, 211, 255, 136, 225, 211, 255, 134, 225, 211, 255, 133, 227, 211, 255, 130, 233, 211, 255, 129, 233, 213, 255, 133, 227, 214, 255, 134, 221, 214, 255, 129, 218, 216, 255, 128, 218, 216, 255, 132, 218, 217, 255, 132, 220, 217, 255, 133, 221, 219, 255, 138, 223, 219, 255, 85, 249, 208, 255, 82, 244, 209, 255, 81, 236, 211, 255, 79, 231, 216, 255, 78, 223, 219, 255, 82, 216, 224, 255, 101, 207, 229, 255, 128, 195, 232, 255, 155, 184, 235, 255, 174, 175, 234, 255, 173, 175, 219, 255, 158, 188, 216, 255, 135, 205, 216, 255, 122, 216, 216, 255, 122, 218, 216, 255, 136, 218, 216, 255, 148, 218, 216, 255, 153, 227, 216, 255, 150, 238, 216, 255, 141, 244, 214, 255, 135, 231, 213, 255, 134, 225, 211, 255, 131, 225, 211, 255, 128, 225, 211, 255, 122, 225, 211, 255, 119, 225, 211, 255, 125, 225, 211, 255, 129, 225, 211, 255, 130, 225, 211, 255, 131, 225, 211, 255, 134, 227, 211, 255, 133, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 126, 227, 211, 255, 128, 227, 211, 255, 133, 227, 211, 255, 136, 227, 211, 255, 135, 227, 211, 255, 133, 227, 211, 255, 137, 227, 211, 255, 139, 227, 211, 255, 135, 227, 211, 255, 128, 227, 211, 255, 127, 227, 211, 255, 131, 227, 211, 255, 134, 227, 211, 255, 137, 227, 211, 255, 135, 227, 211, 255, 131, 227, 211, 255, 128, 227, 209, 255, 132, 227, 209, 255, 134, 227, 209, 255, 128, 227, 209, 255, 124, 227, 209, 255, 124, 227, 209, 255, 119, 227, 209, 255, 110, 227, 209, 255, 111, 227, 209, 255, 119, 227, 209, 255, 118, 227, 211, 255, 122, 227, 211, 255, 127, 227, 211, 255, 122, 227, 211, 255, 117, 227, 211, 255, 120, 227, 211, 255, 113, 227, 211, 255, 115, 227, 211, 255, 139, 227, 211, 255, 127, 227, 211, 255, 120, 227, 209, 255, 128, 227, 209, 255, 122, 227, 209, 255, 109, 227, 209, 255, 117, 227, 209, 255, 114, 227, 209, 255, 100, 227, 209, 255, 99, 227, 209, 255, 101, 227, 209, 255, 103, 227, 209, 255, 97, 227, 209, 255, 101, 227, 209, 255, 99, 227, 209, 255, 98, 227, 209, 255, 97, 227, 209, 255, 94, 227, 209, 255, 93, 227, 209, 255, 105, 227, 209, 255, 98, 227, 209, 255, 84, 227, 209, 255, 91, 229, 209, 255, 108, 229, 209, 255, 100, 229, 209, 255, 95, 229, 209, 255, 100, 229, 209, 255, 98, 229, 209, 255, 96, 229, 209, 255, 86, 229, 209, 255, 85, 229, 209, 255, 101, 229, 211, 255, 118, 229, 214, 255, 123, 229, 216, 255, 103, 229, 214, 255, 113, 229, 214, 255, 120, 229, 213, 255, 95, 229, 211, 255, 92, 229, 209, 255, 100, 229, 209, 255, 108, 229, 209, 255, 120, 229, 209, 255, 110, 227, 211, 255, 101, 227, 211, 255, 95, 227, 211, 255, 93, 227, 211, 255, 107, 227, 211, 255, 101, 227, 211, 255, 98, 227, 211, 255, 99, 227, 211, 255, 101, 227, 211, 255, 109, 227, 211, 255, 123, 227, 209, 255, 129, 227, 209, 255, 147, 227, 209, 255, 163, 227, 209, 255, 156, 227, 209, 255, 146, 227, 209, 255, 144, 227, 209, 255, 124, 227, 209, 255, 105, 227, 209, 255, 104, 227, 209, 255, 112, 227, 209, 255, 115, 227, 209, 255, 107, 227, 209, 255, 109, 227, 209, 255, 112, 227, 209, 255, 110, 227, 209, 255, 100, 227, 209, 255, 120, 227, 209, 255, 152, 227, 209, 255, 134, 227, 209, 255, 140, 227, 211, 255, 161, 227, 211, 255, 143, 227, 211, 255, 121, 227, 211, 255, 114, 227, 211, 255, 119, 227, 211, 255, 131, 227, 211, 255, 138, 227, 211, 255, 137, 227, 211, 255, 136, 227, 211, 255, 133, 227, 209, 255, 133, 227, 209, 255, 135, 227, 209, 255, 135, 227, 209, 255, 131, 227, 209, 255, 128, 227, 209, 255, 127, 227, 209, 255, 122, 227, 209, 255, 114, 227, 209, 255, 103, 227, 209, 255, 101, 227, 209, 255, 103, 227, 209, 255, 104, 227, 209, 255, 109, 227, 209, 255, 113, 227, 209, 255, 118, 227, 209, 255, 125, 227, 209, 255, 129, 227, 209, 255, 123, 227, 209, 255, 113, 227, 209, 255, 110, 227, 211, 255, 114, 227, 211, 255, 121, 227, 211, 255, 120, 227, 211, 255, 109, 227, 211, 255, 104, 227, 211, 255, 110, 227, 211, 255, 116, 227, 211, 255, 119, 227, 211, 255, 118, 227, 211, 255, 116, 225, 211, 255, 119, 225, 211, 255, 127, 225, 211, 255, 134, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 139, 225, 211, 255, 137, 225, 211, 255, 133, 225, 211, 255, 130, 227, 211, 255, 127, 233, 211, 255, 129, 233, 211, 255, 126, 233, 211, 255, 125, 229, 211, 255, 128, 227, 213, 255, 130, 227, 214, 255, 133, 225, 214, 255, 133, 223, 216, 255, 128, 223, 216, 255, 123, 223, 216, 255, 81, 238, 211, 255, 82, 238, 213, 255, 80, 233, 214, 255, 81, 221, 217, 255, 97, 201, 221, 255, 121, 182, 224, 255, 152, 169, 229, 255, 175, 168, 230, 255, 177, 175, 234, 255, 163, 184, 230, 255, 141, 195, 216, 255, 123, 203, 213, 255, 116, 210, 213, 255, 124, 220, 213, 255, 138, 225, 213, 255, 150, 227, 213, 255, 157, 227, 213, 255, 148, 227, 213, 255, 139, 229, 213, 255, 134, 229, 211, 255, 132, 225, 211, 255, 129, 225, 211, 255, 121, 225, 211, 255, 115, 225, 211, 255, 114, 225, 211, 255, 121, 225, 211, 255, 130, 225, 211, 255, 131, 225, 211, 255, 130, 225, 211, 255, 136, 225, 211, 255, 139, 227, 211, 255, 141, 227, 211, 255, 139, 227, 211, 255, 136, 227, 211, 255, 135, 227, 211, 255, 138, 227, 211, 255, 137, 227, 211, 255, 136, 227, 211, 255, 140, 227, 211, 255, 144, 227, 211, 255, 146, 227, 211, 255, 141, 227, 211, 255, 136, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 136, 227, 211, 255, 144, 227, 211, 255, 141, 227, 211, 255, 132, 227, 211, 255, 129, 227, 211, 255, 132, 227, 209, 255, 140, 227, 209, 255, 145, 227, 209, 255, 133, 227, 209, 255, 124, 227, 209, 255, 125, 227, 209, 255, 121, 227, 209, 255, 120, 227, 209, 255, 128, 227, 209, 255, 120, 227, 209, 255, 113, 227, 211, 255, 121, 227, 211, 255, 124, 227, 211, 255, 117, 227, 211, 255, 119, 227, 211, 255, 115, 227, 211, 255, 107, 227, 211, 255, 123, 227, 211, 255, 131, 227, 211, 255, 119, 227, 211, 255, 128, 227, 209, 255, 135, 227, 209, 255, 120, 227, 209, 255, 105, 227, 209, 255, 117, 227, 209, 255, 112, 227, 209, 255, 103, 227, 209, 255, 109, 227, 209, 255, 110, 227, 209, 255, 109, 227, 209, 255, 111, 227, 209, 255, 109, 227, 209, 255, 97, 227, 209, 255, 95, 227, 209, 255, 92, 227, 209, 255, 94, 227, 209, 255, 95, 227, 209, 255, 101, 227, 209, 255, 95, 227, 209, 255, 88, 227, 209, 255, 90, 229, 209, 255, 103, 229, 209, 255, 100, 229, 209, 255, 90, 229, 209, 255, 92, 229, 209, 255, 92, 229, 209, 255, 91, 229, 209, 255, 87, 229, 209, 255, 90, 229, 209, 255, 101, 229, 209, 255, 112, 229, 214, 255, 125, 229, 216, 255, 111, 229, 214, 255, 112, 229, 214, 255, 124, 229, 213, 255, 105, 229, 211, 255, 107, 229, 209, 255, 105, 229, 209, 255, 97, 229, 209, 255, 97, 229, 209, 255, 101, 227, 211, 255, 105, 227, 211, 255, 99, 227, 211, 255, 97, 227, 211, 255, 104, 227, 211, 255, 103, 227, 211, 255, 104, 227, 211, 255, 99, 227, 211, 255, 95, 227, 211, 255, 109, 227, 211, 255, 127, 227, 209, 255, 123, 227, 209, 255, 126, 227, 209, 255, 137, 227, 209, 255, 132, 227, 209, 255, 129, 227, 209, 255, 143, 227, 209, 255, 132, 227, 209, 255, 112, 227, 209, 255, 111, 227, 209, 255, 112, 227, 209, 255, 119, 227, 209, 255, 112, 227, 209, 255, 109, 227, 209, 255, 121, 227, 209, 255, 126, 227, 209, 255, 117, 227, 209, 255, 117, 227, 209, 255, 140, 227, 209, 255, 135, 227, 209, 255, 125, 227, 211, 255, 140, 227, 211, 255, 150, 227, 211, 255, 135, 227, 211, 255, 123, 227, 211, 255, 125, 227, 211, 255, 136, 227, 211, 255, 145, 227, 211, 255, 152, 227, 211, 255, 153, 227, 211, 255, 139, 227, 209, 255, 133, 227, 209, 255, 135, 227, 209, 255, 133, 227, 209, 255, 125, 227, 209, 255, 121, 227, 209, 255, 121, 227, 209, 255, 124, 227, 209, 255, 121, 227, 209, 255, 110, 227, 209, 255, 104, 227, 209, 255, 104, 227, 209, 255, 108, 227, 209, 255, 111, 227, 209, 255, 114, 227, 209, 255, 117, 227, 209, 255, 116, 227, 209, 255, 125, 227, 209, 255, 133, 227, 209, 255, 128, 227, 209, 255, 117, 227, 211, 255, 110, 227, 211, 255, 115, 227, 211, 255, 123, 227, 211, 255, 122, 227, 211, 255, 115, 227, 211, 255, 109, 227, 211, 255, 112, 227, 211, 255, 120, 227, 211, 255, 125, 227, 211, 255, 122, 225, 211, 255, 117, 225, 211, 255, 117, 225, 211, 255, 124, 225, 211, 255, 132, 225, 211, 255, 137, 225, 211, 255, 138, 225, 211, 255, 134, 225, 211, 255, 129, 225, 211, 255, 126, 227, 211, 255, 124, 229, 209, 255, 125, 233, 209, 255, 123, 233, 209, 255, 122, 235, 211, 255, 123, 235, 211, 255, 128, 235, 211, 255, 131, 231, 211, 255, 135, 227, 213, 255, 135, 225, 214, 255, 131, 223, 214, 255, 83, 214, 219, 255, 87, 210, 219, 255, 101, 201, 221, 255, 124, 190, 221, 255, 151, 175, 222, 255, 172, 168, 224, 255, 174, 168, 222, 255, 164, 177, 224, 255, 147, 190, 226, 255, 132, 203, 222, 255, 119, 220, 213, 255, 119, 221, 209, 255, 127, 218, 209, 255, 139, 220, 209, 255, 150, 229, 209, 255, 153, 238, 209, 255, 147, 238, 209, 255, 141, 231, 209, 255, 134, 216, 209, 255, 133, 207, 209, 255, 130, 221, 211, 255, 125, 225, 211, 255, 117, 225, 211, 255, 115, 225, 211, 255, 121, 225, 211, 255, 131, 225, 211, 255, 135, 225, 211, 255, 134, 225, 211, 255, 138, 225, 211, 255, 145, 225, 211, 255, 148, 227, 211, 255, 145, 227, 211, 255, 139, 227, 211, 255, 138, 227, 211, 255, 142, 227, 211, 255, 143, 227, 211, 255, 140, 227, 211, 255, 140, 227, 211, 255, 145, 227, 211, 255, 146, 227, 211, 255, 142, 227, 211, 255, 137, 227, 211, 255, 132, 227, 211, 255, 132, 227, 211, 255, 138, 227, 211, 255, 145, 227, 211, 255, 144, 227, 211, 255, 131, 227, 211, 255, 125, 227, 211, 255, 129, 227, 211, 255, 137, 227, 209, 255, 145, 227, 209, 255, 155, 227, 209, 255, 145, 227, 209, 255, 134, 227, 209, 255, 130, 227, 209, 255, 124, 227, 209, 255, 131, 227, 209, 255, 138, 227, 209, 255, 119, 227, 209, 255, 116, 227, 211, 255, 130, 227, 211, 255, 133, 227, 211, 255, 127, 227, 211, 255, 123, 227, 211, 255, 113, 227, 211, 255, 115, 227, 211, 255, 126, 227, 211, 255, 118, 227, 211, 255, 126, 227, 211, 255, 142, 227, 209, 255, 137, 227, 209, 255, 122, 227, 209, 255, 111, 227, 209, 255, 121, 227, 209, 255, 112, 227, 209, 255, 107, 227, 209, 255, 113, 227, 209, 255, 108, 227, 209, 255, 108, 227, 209, 255, 116, 227, 209, 255, 110, 227, 209, 255, 101, 227, 209, 255, 103, 227, 209, 255, 91, 227, 209, 255, 89, 227, 209, 255, 94, 227, 209, 255, 102, 227, 209, 255, 94, 227, 209, 255, 88, 227, 209, 255, 86, 229, 209, 255, 94, 229, 209, 255, 91, 229, 209, 255, 82, 229, 209, 255, 87, 229, 209, 255, 97, 229, 209, 255, 97, 229, 209, 255, 90, 229, 209, 255, 89, 229, 209, 255, 90, 229, 209, 255, 103, 227, 214, 255, 121, 227, 216, 255, 115, 227, 214, 255, 104, 227, 214, 255, 111, 227, 213, 255, 109, 227, 211, 255, 112, 227, 209, 255, 108, 227, 209, 255, 93, 227, 209, 255, 89, 227, 209, 255, 102, 227, 211, 255, 115, 227, 211, 255, 118, 227, 211, 255, 108, 227, 211, 255, 105, 227, 211, 255, 108, 227, 211, 255, 113, 227, 211, 255, 109, 227, 211, 255, 97, 227, 211, 255, 105, 227, 211, 255, 113, 227, 209, 255, 116, 227, 209, 255, 116, 227, 209, 255, 126, 227, 209, 255, 129, 227, 209, 255, 122, 227, 209, 255, 129, 227, 209, 255, 127, 227, 209, 255, 119, 227, 209, 255, 126, 227, 209, 255, 122, 227, 209, 255, 112, 227, 209, 255, 107, 227, 209, 255, 104, 227, 209, 255, 124, 227, 209, 255, 123, 227, 209, 255, 125, 227, 209, 255, 125, 227, 209, 255, 130, 227, 209, 255, 141, 227, 209, 255, 136, 227, 211, 255, 128, 227, 211, 255, 142, 227, 211, 255, 143, 227, 211, 255, 131, 227, 211, 255, 132, 227, 211, 255, 140, 227, 211, 255, 152, 227, 211, 255, 157, 227, 211, 255, 152, 227, 211, 255, 140, 227, 209, 255, 139, 227, 209, 255, 147, 227, 209, 255, 145, 227, 209, 255, 129, 227, 209, 255, 117, 227, 209, 255, 112, 227, 209, 255, 117, 227, 209, 255, 119, 227, 209, 255, 118, 227, 209, 255, 113, 227, 209, 255, 108, 227, 209, 255, 107, 227, 209, 255, 109, 227, 209, 255, 113, 227, 209, 255, 116, 227, 209, 255, 114, 227, 209, 255, 117, 227, 209, 255, 126, 227, 209, 255, 131, 227, 209, 255, 127, 227, 211, 255, 118, 227, 211, 255, 112, 227, 211, 255, 112, 227, 211, 255, 115, 227, 211, 255, 119, 227, 211, 255, 118, 227, 211, 255, 117, 227, 211, 255, 121, 227, 211, 255, 127, 227, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 126, 225, 211, 255, 121, 225, 211, 255, 122, 225, 211, 255, 131, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 133, 225, 211, 255, 131, 225, 211, 255, 128, 225, 209, 255, 125, 227, 209, 255, 125, 231, 209, 255, 125, 235, 209, 255, 121, 236, 209, 255, 121, 235, 209, 255, 124, 233, 209, 255, 130, 227, 211, 255, 135, 223, 211, 255, 135, 221, 211, 255, 111, 192, 227, 255, 130, 182, 227, 255, 153, 169, 226, 255, 172, 164, 226, 255, 172, 168, 222, 255, 164, 181, 221, 255, 151, 195, 219, 255, 135, 208, 217, 255, 128, 214, 216, 255, 127, 218, 214, 255, 127, 225, 209, 255, 134, 227, 209, 255, 142, 227, 209, 255, 147, 229, 209, 255, 150, 235, 209, 255, 145, 238, 209, 255, 140, 236, 209, 255, 139, 225, 209, 255, 137, 212, 209, 255, 132, 208, 209, 255, 128, 221, 211, 255, 122, 225, 211, 255, 118, 225, 211, 255, 122, 225, 211, 255, 130, 225, 211, 255, 136, 225, 211, 255, 137, 225, 211, 255, 141, 225, 211, 255, 146, 225, 211, 255, 150, 225, 211, 255, 147, 227, 211, 255, 141, 227, 211, 255, 142, 227, 211, 255, 145, 227, 211, 255, 143, 227, 211, 255, 141, 227, 211, 255, 140, 227, 211, 255, 141, 227, 211, 255, 140, 227, 211, 255, 133, 227, 211, 255, 127, 227, 211, 255, 126, 227, 211, 255, 126, 227, 211, 255, 132, 227, 211, 255, 141, 227, 211, 255, 138, 227, 211, 255, 125, 227, 211, 255, 120, 227, 211, 255, 124, 227, 211, 255, 127, 227, 211, 255, 136, 227, 209, 255, 147, 227, 209, 255, 151, 227, 209, 255, 137, 227, 209, 255, 128, 227, 209, 255, 123, 227, 209, 255, 119, 227, 209, 255, 130, 227, 209, 255, 128, 227, 209, 255, 114, 227, 209, 255, 125, 227, 211, 255, 141, 227, 211, 255, 141, 227, 211, 255, 142, 227, 211, 255, 135, 227, 211, 255, 126, 227, 211, 255, 124, 227, 211, 255, 121, 227, 211, 255, 113, 227, 211, 255, 127, 227, 211, 255, 142, 227, 209, 255, 136, 227, 209, 255, 127, 227, 209, 255, 123, 227, 209, 255, 127, 227, 209, 255, 117, 227, 209, 255, 117, 227, 209, 255, 109, 227, 209, 255, 99, 227, 209, 255, 104, 227, 209, 255, 114, 227, 209, 255, 109, 227, 209, 255, 110, 227, 209, 255, 111, 227, 209, 255, 93, 227, 209, 255, 90, 227, 209, 255, 99, 227, 209, 255, 102, 227, 209, 255, 90, 227, 209, 255, 84, 227, 209, 255, 82, 229, 209, 255, 89, 229, 209, 255, 95, 229, 209, 255, 89, 229, 209, 255, 89, 229, 209, 255, 104, 229, 209, 255, 102, 229, 209, 255, 92, 229, 209, 255, 86, 229, 209, 255, 86, 229, 211, 255, 94, 227, 214, 255, 109, 227, 216, 255, 114, 227, 214, 255, 107, 227, 214, 255, 112, 227, 213, 255, 119, 227, 211, 255, 110, 227, 209, 255, 105, 227, 209, 255, 94, 227, 209, 255, 96, 227, 209, 255, 114, 227, 211, 255, 136, 227, 211, 255, 141, 227, 211, 255, 122, 227, 211, 255, 117, 227, 211, 255, 112, 227, 211, 255, 112, 227, 211, 255, 118, 227, 211, 255, 113, 227, 211, 255, 119, 227, 211, 255, 111, 227, 209, 255, 104, 227, 209, 255, 107, 227, 209, 255, 120, 227, 209, 255, 128, 227, 209, 255, 126, 227, 209, 255, 125, 227, 209, 255, 121, 227, 209, 255, 118, 227, 209, 255, 122, 227, 209, 255, 120, 227, 209, 255, 111, 227, 209, 255, 108, 227, 209, 255, 113, 227, 209, 255, 129, 227, 209, 255, 119, 227, 209, 255, 119, 227, 209, 255, 129, 227, 209, 255, 134, 227, 209, 255, 151, 227, 209, 255, 153, 227, 211, 255, 133, 227, 211, 255, 130, 227, 211, 255, 134, 227, 211, 255, 129, 227, 211, 255, 126, 227, 211, 255, 126, 227, 211, 255, 142, 227, 211, 255, 152, 227, 211, 255, 143, 227, 211, 255, 136, 227, 209, 255, 136, 227, 209, 255, 154, 227, 209, 255, 159, 227, 209, 255, 139, 227, 209, 255, 126, 227, 209, 255, 119, 227, 209, 255, 118, 227, 209, 255, 116, 227, 209, 255, 116, 227, 209, 255, 117, 227, 209, 255, 115, 227, 209, 255, 110, 227, 209, 255, 109, 227, 209, 255, 110, 227, 209, 255, 114, 227, 209, 255, 118, 227, 209, 255, 118, 227, 209, 255, 120, 227, 209, 255, 126, 227, 209, 255, 126, 227, 211, 255, 121, 227, 211, 255, 114, 227, 211, 255, 109, 227, 211, 255, 108, 227, 211, 255, 112, 227, 211, 255, 123, 227, 211, 255, 128, 227, 211, 255, 127, 227, 211, 255, 127, 227, 211, 255, 133, 225, 211, 255, 141, 225, 211, 255, 142, 225, 211, 255, 136, 225, 211, 255, 128, 225, 211, 255, 124, 225, 211, 255, 126, 225, 211, 255, 133, 225, 211, 255, 136, 225, 211, 255, 133, 225, 211, 255, 130, 223, 209, 255, 129, 223, 209, 255, 129, 227, 209, 255, 126, 231, 209, 255, 122, 235, 209, 255, 122, 233, 209, 255, 123, 231, 209, 255, 127, 225, 209, 255, 132, 221, 209, 255, 132, 220, 209, 255, 163, 171, 232, 255, 175, 169, 230, 255, 172, 171, 229, 255, 163, 177, 226, 255, 148, 186, 222, 255, 139, 201, 217, 255, 136, 216, 214, 255, 134, 225, 211, 255, 136, 233, 209, 255, 140, 229, 208, 255, 144, 218, 209, 255, 146, 223, 209, 255, 146, 235, 209, 255, 145, 240, 209, 255, 143, 240, 209, 255, 140, 233, 209, 255, 139, 225, 209, 255, 138, 221, 209, 255, 134, 221, 209, 255, 129, 223, 209, 255, 126, 225, 211, 255, 122, 225, 211, 255, 124, 225, 211, 255, 132, 225, 211, 255, 138, 225, 211, 255, 140, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 140, 225, 211, 255, 139, 225, 211, 255, 139, 227, 211, 255, 143, 227, 211, 255, 148, 227, 211, 255, 147, 227, 211, 255, 140, 227, 211, 255, 139, 227, 211, 255, 138, 227, 211, 255, 131, 227, 211, 255, 122, 227, 211, 255, 115, 227, 211, 255, 114, 227, 211, 255, 120, 227, 211, 255, 123, 227, 211, 255, 128, 227, 211, 255, 126, 227, 211, 255, 111, 227, 211, 255, 104, 227, 211, 255, 118, 227, 211, 255, 121, 227, 211, 255, 118, 227, 211, 255, 127, 227, 209, 255, 141, 227, 209, 255, 132, 227, 209, 255, 119, 227, 209, 255, 119, 227, 209, 255, 120, 227, 209, 255, 119, 227, 209, 255, 124, 227, 209, 255, 120, 227, 209, 255, 123, 227, 209, 255, 137, 229, 211, 255, 141, 229, 211, 255, 140, 229, 211, 255, 148, 229, 211, 255, 144, 229, 211, 255, 129, 229, 211, 255, 114, 229, 211, 255, 110, 229, 211, 255, 111, 229, 211, 255, 122, 229, 211, 255, 136, 227, 209, 255, 131, 227, 209, 255, 121, 227, 209, 255, 127, 227, 209, 255, 131, 227, 209, 255, 121, 227, 209, 255, 120, 227, 209, 255, 100, 227, 209, 255, 98, 227, 209, 255, 110, 227, 209, 255, 112, 227, 209, 255, 107, 227, 209, 255, 112, 227, 209, 255, 111, 227, 209, 255, 93, 227, 209, 255, 91, 227, 209, 255, 105, 227, 209, 255, 101, 227, 209, 255, 86, 227, 209, 255, 83, 227, 209, 255, 77, 229, 209, 255, 85, 229, 209, 255, 105, 229, 209, 255, 104, 229, 209, 255, 94, 229, 209, 255, 109, 229, 209, 255, 105, 229, 209, 255, 91, 229, 209, 255, 86, 229, 209, 255, 99, 229, 211, 255, 97, 227, 214, 255, 98, 227, 216, 255, 111, 227, 214, 255, 107, 227, 214, 255, 115, 227, 213, 255, 134, 227, 211, 255, 118, 227, 209, 255, 104, 227, 209, 255, 101, 227, 209, 255, 114, 227, 209, 255, 133, 227, 211, 255, 154, 227, 211, 255, 150, 227, 211, 255, 127, 227, 211, 255, 130, 227, 211, 255, 123, 227, 211, 255, 109, 227, 211, 255, 112, 227, 211, 255, 125, 227, 211, 255, 133, 227, 211, 255, 116, 227, 209, 255, 93, 227, 209, 255, 91, 227, 209, 255, 105, 227, 209, 255, 114, 227, 209, 255, 121, 227, 209, 255, 132, 227, 209, 255, 115, 227, 209, 255, 104, 227, 209, 255, 103, 227, 209, 255, 109, 227, 209, 255, 112, 227, 209, 255, 118, 227, 209, 255, 124, 227, 209, 255, 131, 227, 209, 255, 126, 227, 209, 255, 118, 227, 209, 255, 123, 227, 209, 255, 131, 227, 209, 255, 155, 227, 209, 255, 159, 227, 211, 255, 137, 227, 211, 255, 127, 227, 211, 255, 123, 227, 211, 255, 123, 227, 211, 255, 117, 227, 211, 255, 107, 227, 211, 255, 123, 227, 211, 255, 141, 227, 211, 255, 147, 227, 211, 255, 144, 227, 209, 255, 135, 227, 209, 255, 146, 227, 209, 255, 159, 227, 209, 255, 148, 227, 209, 255, 137, 227, 209, 255, 134, 227, 209, 255, 133, 227, 209, 255, 120, 227, 209, 255, 109, 227, 209, 255, 112, 227, 209, 255, 119, 227, 209, 255, 119, 227, 209, 255, 114, 227, 209, 255, 111, 227, 209, 255, 112, 227, 209, 255, 116, 227, 209, 255, 119, 227, 209, 255, 123, 227, 209, 255, 123, 227, 209, 255, 121, 227, 211, 255, 117, 227, 211, 255, 112, 227, 211, 255, 107, 227, 211, 255, 105, 227, 211, 255, 108, 227, 211, 255, 118, 227, 211, 255, 130, 227, 211, 255, 136, 227, 211, 255, 134, 227, 211, 255, 133, 225, 211, 255, 137, 225, 211, 255, 143, 225, 211, 255, 146, 225, 211, 255, 143, 225, 211, 255, 134, 225, 211, 255, 125, 225, 211, 255, 124, 225, 211, 255, 129, 225, 211, 255, 131, 223, 211, 255, 130, 221, 211, 255, 128, 221, 211, 255, 130, 225, 211, 255, 130, 227, 209, 255, 126, 231, 209, 255, 125, 229, 209, 255, 124, 227, 209, 255, 126, 223, 208, 255, 131, 220, 208, 255, 132, 218, 208, 255, 173, 171, 230, 255, 161, 182, 230, 255, 145, 197, 227, 255, 137, 212, 224, 255, 136, 218, 221, 255, 141, 221, 216, 255, 143, 221, 211, 255, 146, 227, 208, 255, 147, 233, 204, 255, 148, 231, 206, 255, 148, 212, 208, 255, 143, 216, 209, 255, 142, 229, 209, 255, 141, 238, 209, 255, 140, 236, 209, 255, 140, 231, 209, 255, 137, 225, 209, 255, 132, 225, 209, 255, 129, 231, 209, 255, 128, 235, 209, 255, 126, 227, 211, 255, 127, 225, 211, 255, 135, 225, 211, 255, 143, 225, 211, 255, 144, 225, 211, 255, 140, 225, 211, 255, 134, 225, 211, 255, 128, 225, 211, 255, 129, 225, 211, 255, 137, 225, 211, 255, 142, 227, 211, 255, 148, 227, 211, 255, 148, 227, 211, 255, 143, 227, 211, 255, 138, 227, 211, 255, 135, 227, 211, 255, 129, 227, 211, 255, 116, 227, 211, 255, 104, 227, 211, 255, 108, 227, 211, 255, 114, 227, 211, 255, 114, 227, 211, 255, 115, 227, 211, 255, 114, 227, 211, 255, 105, 227, 211, 255, 91, 227, 211, 255, 98, 227, 211, 255, 116, 227, 211, 255, 115, 227, 211, 255, 116, 227, 211, 255, 129, 227, 209, 255, 135, 227, 209, 255, 125, 227, 209, 255, 118, 227, 209, 255, 124, 227, 209, 255, 126, 227, 209, 255, 127, 227, 209, 255, 127, 227, 209, 255, 126, 227, 209, 255, 134, 227, 209, 255, 141, 229, 211, 255, 128, 229, 211, 255, 129, 229, 211, 255, 143, 229, 211, 255, 135, 229, 211, 255, 116, 229, 211, 255, 109, 229, 211, 255, 108, 229, 211, 255, 113, 229, 211, 255, 126, 229, 211, 255, 136, 227, 209, 255, 125, 227, 209, 255, 112, 227, 209, 255, 124, 227, 209, 255, 125, 227, 209, 255, 114, 227, 209, 255, 111, 227, 209, 255, 96, 227, 209, 255, 105, 227, 209, 255, 114, 227, 209, 255, 107, 227, 209, 255, 101, 227, 209, 255, 108, 227, 209, 255, 104, 227, 209, 255, 92, 227, 209, 255, 100, 227, 209, 255, 119, 227, 209, 255, 103, 227, 209, 255, 87, 227, 209, 255, 87, 227, 209, 255, 77, 229, 209, 255, 86, 229, 209, 255, 109, 229, 209, 255, 111, 229, 209, 255, 100, 229, 209, 255, 113, 229, 209, 255, 114, 229, 209, 255, 94, 229, 209, 255, 88, 229, 209, 255, 118, 229, 211, 255, 108, 227, 214, 255, 98, 225, 216, 255, 105, 225, 214, 255, 99, 225, 214, 255, 103, 225, 213, 255, 133, 225, 211, 255, 127, 225, 209, 255, 107, 225, 209, 255, 115, 225, 209, 255, 127, 225, 209, 255, 140, 227, 211, 255, 151, 227, 211, 255, 135, 227, 211, 255, 118, 227, 211, 255, 124, 227, 211, 255, 125, 227, 211, 255, 112, 227, 211, 255, 107, 227, 211, 255, 129, 227, 211, 255, 138, 227, 211, 255, 116, 227, 209, 255, 86, 227, 209, 255, 77, 227, 209, 255, 90, 227, 209, 255, 111, 227, 209, 255, 119, 227, 209, 255, 134, 227, 209, 255, 117, 227, 209, 255, 93, 227, 209, 255, 94, 227, 209, 255, 102, 227, 209, 255, 119, 227, 209, 255, 131, 227, 209, 255, 130, 227, 209, 255, 125, 227, 209, 255, 126, 227, 209, 255, 122, 227, 209, 255, 119, 227, 209, 255, 118, 227, 209, 255, 137, 227, 209, 255, 152, 227, 211, 255, 137, 227, 211, 255, 130, 227, 211, 255, 129, 227, 211, 255, 118, 227, 211, 255, 112, 227, 211, 255, 103, 227, 211, 255, 111, 227, 211, 255, 140, 227, 211, 255, 160, 227, 211, 255, 165, 227, 209, 255, 151, 227, 209, 255, 141, 227, 209, 255, 150, 227, 209, 255, 157, 227, 209, 255, 144, 227, 209, 255, 134, 227, 209, 255, 138, 227, 209, 255, 131, 227, 209, 255, 109, 227, 209, 255, 110, 227, 209, 255, 123, 227, 209, 255, 129, 227, 209, 255, 124, 227, 209, 255, 118, 227, 209, 255, 114, 227, 209, 255, 115, 227, 209, 255, 117, 227, 209, 255, 125, 227, 209, 255, 124, 227, 209, 255, 122, 227, 211, 255, 119, 227, 211, 255, 114, 227, 211, 255, 108, 227, 211, 255, 105, 227, 211, 255, 105, 227, 211, 255, 111, 227, 211, 255, 123, 227, 211, 255, 136, 227, 211, 255, 142, 227, 211, 255, 139, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 139, 225, 211, 255, 142, 225, 211, 255, 143, 225, 211, 255, 137, 225, 211, 255, 127, 225, 211, 255, 122, 225, 211, 255, 125, 223, 211, 255, 129, 221, 213, 255, 127, 221, 213, 255, 125, 221, 213, 255, 126, 223, 211, 255, 128, 225, 211, 255, 126, 225, 209, 255, 124, 223, 209, 255, 125, 221, 208, 255, 129, 220, 208, 255, 133, 220, 208, 255, 140, 201, 224, 255, 132, 208, 222, 255, 132, 220, 222, 255, 136, 231, 221, 255, 143, 235, 217, 255, 150, 235, 214, 255, 150, 229, 213, 255, 150, 225, 209, 255, 147, 223, 208, 255, 144, 221, 208, 255, 141, 218, 209, 255, 138, 218, 209, 255, 140, 218, 209, 255, 142, 221, 209, 255, 139, 227, 209, 255, 134, 233, 209, 255, 129, 236, 209, 255, 131, 236, 209, 255, 134, 235, 209, 255, 134, 231, 209, 255, 133, 225, 211, 255, 139, 225, 211, 255, 146, 225, 211, 255, 147, 225, 211, 255, 139, 225, 211, 255, 128, 225, 211, 255, 123, 225, 211, 255, 126, 225, 211, 255, 135, 225, 211, 255, 145, 225, 211, 255, 150, 227, 211, 255, 148, 227, 211, 255, 144, 227, 211, 255, 138, 227, 211, 255, 134, 227, 211, 255, 124, 227, 211, 255, 115, 227, 211, 255, 104, 227, 211, 255, 103, 227, 211, 255, 112, 227, 211, 255, 117, 227, 211, 255, 110, 227, 211, 255, 108, 227, 211, 255, 101, 227, 211, 255, 100, 227, 211, 255, 101, 227, 211, 255, 108, 227, 211, 255, 114, 227, 211, 255, 117, 227, 211, 255, 125, 227, 211, 255, 138, 227, 209, 255, 136, 227, 209, 255, 126, 227, 209, 255, 128, 227, 209, 255, 125, 227, 209, 255, 125, 227, 209, 255, 132, 227, 209, 255, 130, 227, 209, 255, 129, 227, 209, 255, 138, 227, 209, 255, 132, 229, 211, 255, 118, 229, 211, 255, 120, 229, 211, 255, 125, 229, 211, 255, 114, 229, 211, 255, 118, 229, 211, 255, 125, 229, 211, 255, 115, 229, 211, 255, 110, 229, 211, 255, 123, 229, 211, 255, 132, 227, 209, 255, 121, 227, 209, 255, 109, 227, 209, 255, 116, 227, 209, 255, 109, 227, 209, 255, 97, 227, 209, 255, 98, 227, 209, 255, 104, 227, 209, 255, 116, 227, 209, 255, 108, 227, 209, 255, 98, 227, 209, 255, 98, 227, 209, 255, 105, 227, 209, 255, 103, 227, 209, 255, 95, 227, 209, 255, 111, 227, 209, 255, 131, 227, 209, 255, 111, 227, 209, 255, 93, 227, 209, 255, 94, 227, 209, 255, 83, 229, 209, 255, 87, 229, 209, 255, 98, 229, 209, 255, 110, 229, 209, 255, 107, 229, 209, 255, 114, 229, 209, 255, 121, 229, 209, 255, 100, 229, 209, 255, 95, 229, 209, 255, 129, 229, 211, 255, 117, 225, 214, 255, 109, 225, 216, 255, 100, 225, 214, 255, 95, 225, 214, 255, 95, 225, 213, 255, 122, 225, 211, 255, 129, 225, 209, 255, 110, 225, 209, 255, 121, 225, 209, 255, 123, 225, 209, 255, 129, 227, 211, 255, 134, 227, 211, 255, 114, 227, 211, 255, 104, 227, 211, 255, 107, 227, 211, 255, 119, 227, 211, 255, 114, 227, 211, 255, 105, 227, 211, 255, 130, 227, 211, 255, 138, 227, 211, 255, 112, 227, 209, 255, 84, 227, 209, 255, 72, 227, 209, 255, 85, 227, 209, 255, 119, 227, 209, 255, 127, 227, 209, 255, 135, 227, 209, 255, 119, 227, 209, 255, 97, 227, 209, 255, 94, 227, 209, 255, 100, 227, 209, 255, 126, 227, 209, 255, 146, 227, 209, 255, 130, 227, 209, 255, 117, 227, 209, 255, 119, 227, 209, 255, 126, 227, 209, 255, 127, 227, 209, 255, 115, 227, 209, 255, 115, 227, 209, 255, 134, 227, 211, 255, 138, 227, 211, 255, 130, 227, 211, 255, 133, 227, 211, 255, 124, 227, 211, 255, 114, 227, 211, 255, 113, 227, 211, 255, 105, 227, 211, 255, 129, 227, 211, 255, 161, 227, 211, 255, 165, 227, 209, 255, 151, 227, 209, 255, 144, 227, 209, 255, 144, 227, 209, 255, 155, 227, 209, 255, 151, 227, 209, 255, 131, 227, 209, 255, 130, 227, 209, 255, 132, 227, 209, 255, 116, 227, 209, 255, 110, 227, 209, 255, 124, 227, 209, 255, 133, 227, 209, 255, 130, 227, 209, 255, 124, 227, 209, 255, 119, 227, 209, 255, 116, 227, 209, 255, 114, 227, 209, 255, 123, 227, 209, 255, 126, 227, 209, 255, 125, 227, 211, 255, 123, 227, 211, 255, 120, 227, 211, 255, 117, 227, 211, 255, 115, 227, 211, 255, 111, 227, 211, 255, 109, 227, 211, 255, 117, 227, 211, 255, 131, 227, 211, 255, 138, 227, 211, 255, 139, 225, 211, 255, 138, 225, 211, 255, 136, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 137, 225, 211, 255, 140, 225, 211, 255, 136, 225, 211, 255, 126, 225, 211, 255, 120, 225, 213, 255, 123, 223, 216, 255, 127, 223, 216, 255, 125, 221, 216, 255, 121, 221, 214, 255, 122, 221, 213, 255, 125, 221, 211, 255, 127, 223, 209, 255, 125, 223, 209, 255, 127, 223, 209, 255, 132, 225, 208, 255, 127, 233, 214, 255, 132, 231, 213, 255, 139, 225, 213, 255, 143, 223, 214, 255, 148, 229, 214, 255, 148, 235, 214, 255, 145, 236, 214, 255, 143, 231, 213, 255, 141, 220, 214, 255, 139, 216, 214, 255, 140, 227, 211, 255, 141, 223, 211, 255, 142, 214, 211, 255, 138, 210, 211, 255, 131, 220, 211, 255, 129, 231, 211, 255, 137, 240, 211, 255, 139, 236, 211, 255, 139, 231, 211, 255, 139, 223, 211, 255, 144, 223, 211, 255, 148, 225, 211, 255, 150, 225, 211, 255, 140, 225, 211, 255, 130, 225, 211, 255, 124, 225, 211, 255, 130, 225, 211, 255, 141, 225, 211, 255, 150, 225, 211, 255, 151, 225, 211, 255, 150, 227, 211, 255, 146, 227, 211, 255, 141, 227, 211, 255, 131, 227, 211, 255, 120, 227, 211, 255, 112, 227, 211, 255, 104, 227, 211, 255, 105, 227, 211, 255, 112, 227, 211, 255, 118, 227, 211, 255, 118, 227, 211, 255, 118, 227, 211, 255, 117, 227, 211, 255, 109, 227, 211, 255, 117, 227, 211, 255, 124, 227, 211, 255, 122, 227, 211, 255, 118, 227, 211, 255, 120, 227, 211, 255, 122, 227, 211, 255, 131, 227, 209, 255, 123, 227, 209, 255, 118, 227, 209, 255, 119, 227, 209, 255, 111, 227, 209, 255, 119, 227, 209, 255, 130, 227, 209, 255, 124, 227, 209, 255, 125, 227, 209, 255, 134, 227, 209, 255, 126, 229, 211, 255, 121, 231, 211, 255, 117, 231, 211, 255, 107, 231, 211, 255, 104, 231, 211, 255, 123, 231, 211, 255, 129, 231, 211, 255, 109, 231, 211, 255, 99, 231, 211, 255, 108, 229, 211, 255, 119, 227, 209, 255, 116, 227, 209, 255, 110, 227, 209, 255, 110, 227, 209, 255, 92, 227, 209, 255, 88, 227, 209, 255, 98, 227, 209, 255, 121, 227, 209, 255, 124, 227, 209, 255, 102, 227, 209, 255, 97, 227, 209, 255, 104, 227, 209, 255, 116, 227, 209, 255, 119, 227, 209, 255, 108, 227, 209, 255, 113, 227, 209, 255, 130, 227, 209, 255, 119, 227, 209, 255, 102, 227, 209, 255, 98, 227, 209, 255, 87, 229, 209, 255, 83, 229, 209, 255, 94, 229, 209, 255, 120, 229, 209, 255, 115, 229, 209, 255, 121, 229, 209, 255, 117, 229, 209, 255, 102, 229, 209, 255, 109, 229, 209, 255, 138, 229, 209, 255, 130, 227, 214, 255, 113, 225, 216, 255, 96, 225, 214, 255, 100, 225, 214, 255, 99, 225, 213, 255, 123, 225, 211, 255, 128, 225, 209, 255, 112, 225, 209, 255, 105, 225, 209, 255, 103, 225, 209, 255, 125, 227, 211, 255, 129, 227, 211, 255, 111, 227, 211, 255, 102, 227, 211, 255, 96, 227, 211, 255, 117, 227, 211, 255, 115, 227, 211, 255, 99, 227, 211, 255, 117, 227, 211, 255, 130, 227, 211, 255, 105, 227, 209, 255, 83, 227, 209, 255, 77, 227, 209, 255, 86, 227, 209, 255, 118, 227, 209, 255, 126, 227, 209, 255, 124, 227, 209, 255, 113, 227, 209, 255, 105, 227, 209, 255, 101, 227, 209, 255, 100, 227, 209, 255, 119, 227, 209, 255, 148, 227, 209, 255, 133, 227, 209, 255, 108, 227, 209, 255, 110, 227, 209, 255, 124, 227, 209, 255, 137, 227, 209, 255, 126, 227, 209, 255, 108, 227, 209, 255, 114, 227, 211, 255, 130, 227, 211, 255, 128, 227, 211, 255, 126, 227, 211, 255, 130, 227, 211, 255, 119, 227, 211, 255, 120, 227, 211, 255, 111, 227, 211, 255, 117, 227, 211, 255, 146, 227, 211, 255, 157, 227, 209, 255, 143, 227, 209, 255, 134, 227, 209, 255, 135, 227, 209, 255, 139, 227, 209, 255, 147, 227, 209, 255, 142, 227, 209, 255, 130, 227, 209, 255, 123, 227, 209, 255, 117, 227, 209, 255, 105, 227, 209, 255, 113, 227, 209, 255, 122, 227, 209, 255, 123, 227, 209, 255, 118, 227, 209, 255, 116, 227, 209, 255, 114, 227, 209, 255, 111, 227, 209, 255, 114, 227, 209, 255, 122, 227, 209, 255, 125, 227, 211, 255, 122, 227, 211, 255, 121, 227, 211, 255, 123, 227, 211, 255, 125, 227, 211, 255, 123, 227, 211, 255, 118, 227, 211, 255, 117, 227, 211, 255, 123, 227, 211, 255, 131, 227, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 135, 225, 211, 255, 136, 225, 211, 255, 136, 225, 211, 255, 133, 225, 211, 255, 131, 225, 211, 255, 134, 225, 211, 255, 132, 225, 211, 255, 123, 227, 213, 255, 118, 227, 216, 255, 122, 227, 217, 255, 128, 223, 217, 255, 126, 221, 216, 255, 119, 221, 214, 255, 120, 221, 213, 255, 126, 223, 211, 255, 127, 225, 209, 255, 126, 231, 209, 255, 129, 231, 209, 255, 135, 240, 203, 255, 141, 235, 203, 255, 144, 223, 204, 255, 145, 216, 208, 255, 143, 216, 211, 255, 140, 218, 214, 255, 138, 223, 217, 255, 138, 227, 219, 255, 140, 227, 221, 255, 142, 227, 219, 255, 143, 233, 213, 255, 143, 233, 211, 255, 139, 227, 211, 255, 134, 223, 211, 255, 131, 221, 211, 255, 138, 221, 211, 255, 146, 223, 211, 255, 141, 223, 211, 255, 136, 223, 211, 255, 144, 223, 211, 255, 153, 225, 211, 255, 153, 225, 211, 255, 142, 225, 211, 255, 132, 225, 211, 255, 131, 225, 211, 255, 138, 225, 211, 255, 150, 225, 211, 255, 155, 225, 211, 255, 154, 225, 211, 255, 150, 225, 211, 255, 144, 227, 211, 255, 140, 227, 211, 255, 131, 227, 211, 255, 117, 227, 211, 255, 109, 227, 211, 255, 110, 227, 211, 255, 108, 227, 211, 255, 109, 227, 211, 255, 114, 227, 211, 255, 119, 227, 211, 255, 127, 227, 211, 255, 133, 227, 211, 255, 133, 227, 211, 255, 131, 227, 211, 255, 134, 227, 211, 255, 134, 227, 211, 255, 129, 227, 211, 255, 120, 227, 211, 255, 113, 227, 211, 255, 118, 227, 211, 255, 121, 227, 209, 255, 105, 227, 209, 255, 102, 227, 209, 255, 99, 227, 209, 255, 100, 227, 209, 255, 120, 227, 209, 255, 129, 227, 209, 255, 119, 227, 209, 255, 122, 227, 209, 255, 132, 229, 209, 255, 133, 231, 211, 255, 130, 231, 211, 255, 118, 231, 211, 255, 101, 231, 211, 255, 104, 231, 211, 255, 111, 231, 211, 255, 108, 231, 211, 255, 98, 231, 211, 255, 104, 231, 211, 255, 108, 231, 211, 255, 110, 229, 209, 255, 107, 227, 209, 255, 108, 227, 209, 255, 107, 227, 209, 255, 93, 227, 209, 255, 104, 227, 209, 255, 118, 227, 209, 255, 129, 227, 209, 255, 120, 227, 209, 255, 102, 227, 209, 255, 110, 227, 209, 255, 119, 227, 209, 255, 134, 227, 209, 255, 145, 227, 209, 255, 124, 227, 209, 255, 112, 227, 209, 255, 118, 227, 209, 255, 123, 227, 209, 255, 122, 227, 209, 255, 113, 227, 209, 255, 90, 229, 209, 255, 81, 229, 209, 255, 112, 229, 209, 255, 146, 229, 209, 255, 128, 229, 209, 255, 127, 229, 209, 255, 102, 229, 209, 255, 97, 229, 209, 255, 110, 229, 209, 255, 138, 229, 209, 255, 136, 227, 214, 255, 109, 225, 216, 255, 95, 225, 214, 255, 103, 225, 214, 255, 101, 225, 213, 255, 116, 225, 211, 255, 113, 225, 209, 255, 102, 225, 209, 255, 83, 225, 209, 255, 83, 225, 209, 255, 113, 227, 211, 255, 129, 227, 211, 255, 127, 227, 211, 255, 115, 227, 211, 255, 99, 227, 211, 255, 116, 227, 211, 255, 118, 227, 211, 255, 97, 227, 211, 255, 97, 227, 211, 255, 112, 227, 211, 255, 98, 227, 209, 255, 85, 227, 209, 255, 87, 227, 209, 255, 90, 227, 209, 255, 113, 227, 209, 255, 122, 227, 209, 255, 110, 227, 209, 255, 108, 227, 209, 255, 111, 227, 209, 255, 119, 227, 209, 255, 115, 227, 209, 255, 116, 227, 209, 255, 134, 227, 209, 255, 133, 227, 209, 255, 101, 227, 209, 255, 98, 227, 209, 255, 113, 227, 209, 255, 137, 227, 209, 255, 139, 227, 209, 255, 115, 227, 209, 255, 102, 227, 211, 255, 118, 227, 211, 255, 138, 227, 211, 255, 135, 227, 211, 255, 131, 227, 211, 255, 121, 227, 211, 255, 120, 227, 211, 255, 126, 227, 211, 255, 129, 227, 211, 255, 146, 227, 211, 255, 160, 227, 209, 255, 153, 227, 209, 255, 123, 227, 209, 255, 108, 227, 209, 255, 108, 227, 209, 255, 119, 227, 209, 255, 134, 227, 209, 255, 134, 227, 209, 255, 127, 227, 209, 255, 119, 227, 209, 255, 102, 227, 209, 255, 96, 227, 209, 255, 102, 227, 209, 255, 109, 227, 209, 255, 110, 227, 209, 255, 108, 227, 209, 255, 109, 227, 209, 255, 111, 227, 209, 255, 107, 227, 209, 255, 114, 227, 209, 255, 120, 227, 211, 255, 118, 227, 211, 255, 117, 227, 211, 255, 121, 227, 211, 255, 126, 227, 211, 255, 128, 227, 211, 255, 124, 227, 211, 255, 119, 227, 211, 255, 119, 227, 211, 255, 125, 227, 211, 255, 130, 225, 211, 255, 132, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 136, 225, 211, 255, 138, 225, 211, 255, 131, 225, 211, 255, 126, 225, 211, 255, 126, 225, 211, 255, 127, 227, 211, 255, 124, 231, 217, 255, 118, 231, 219, 255, 120, 227, 217, 255, 124, 223, 217, 255, 126, 221, 216, 255, 123, 221, 213, 255, 124, 223, 211, 255, 126, 229, 209, 255, 128, 235, 209, 255, 128, 236, 209, 255, 142, 231, 201, 255, 146, 229, 203, 255, 143, 225, 204, 255, 138, 221, 206, 255, 134, 214, 211, 255, 136, 210, 213, 255, 139, 212, 216, 255, 144, 221, 217, 255, 146, 233, 219, 255, 146, 238, 219, 255, 143, 233, 211, 255, 140, 235, 211, 255, 138, 235, 211, 255, 141, 233, 211, 255, 143, 227, 211, 255, 142, 218, 211, 255, 134, 212, 211, 255, 131, 214, 211, 255, 138, 221, 211, 255, 146, 227, 211, 255, 150, 225, 211, 255, 144, 225, 211, 255, 137, 225, 211, 255, 135, 225, 211, 255, 144, 225, 211, 255, 155, 225, 211, 255, 164, 227, 211, 255, 156, 227, 211, 255, 147, 227, 211, 255, 150, 227, 211, 255, 143, 227, 209, 255, 132, 227, 209, 255, 124, 227, 211, 255, 116, 227, 211, 255, 114, 227, 211, 255, 118, 227, 211, 255, 112, 227, 211, 255, 105, 227, 211, 255, 109, 227, 211, 255, 126, 227, 211, 255, 136, 227, 211, 255, 133, 227, 211, 255, 134, 227, 211, 255, 145, 227, 211, 255, 140, 227, 211, 255, 134, 227, 211, 255, 127, 227, 211, 255, 117, 225, 211, 255, 118, 225, 211, 255, 137, 225, 211, 255, 130, 227, 209, 255, 107, 227, 209, 255, 100, 227, 209, 255, 102, 227, 209, 255, 113, 227, 209, 255, 129, 227, 209, 255, 124, 227, 209, 255, 112, 227, 209, 255, 126, 227, 209, 255, 144, 227, 209, 255, 138, 231, 209, 255, 129, 231, 209, 255, 120, 231, 211, 255, 109, 231, 211, 255, 114, 231, 211, 255, 112, 231, 211, 255, 105, 231, 211, 255, 109, 231, 211, 255, 119, 231, 211, 255, 112, 231, 211, 255, 104, 225, 211, 255, 101, 225, 209, 255, 108, 225, 209, 255, 118, 225, 209, 255, 119, 225, 209, 255, 129, 225, 209, 255, 128, 225, 209, 255, 121, 227, 209, 255, 110, 227, 209, 255, 109, 227, 209, 255, 120, 229, 209, 255, 123, 229, 209, 255, 135, 229, 209, 255, 143, 229, 209, 255, 116, 229, 209, 255, 98, 229, 209, 255, 97, 229, 209, 255, 121, 229, 209, 255, 144, 229, 209, 255, 129, 229, 209, 255, 100, 229, 209, 255, 96, 229, 209, 255, 125, 229, 209, 255, 151, 229, 209, 255, 125, 229, 209, 255, 114, 229, 209, 255, 98, 229, 209, 255, 98, 229, 209, 255, 110, 229, 209, 255, 139, 229, 211, 255, 143, 227, 213, 255, 117, 227, 214, 255, 97, 227, 213, 255, 95, 227, 213, 255, 99, 227, 211, 255, 103, 227, 211, 255, 92, 227, 209, 255, 88, 227, 209, 255, 74, 227, 209, 255, 73, 227, 209, 255, 88, 227, 211, 255, 119, 227, 211, 255, 128, 227, 211, 255, 113, 227, 211, 255, 115, 227, 211, 255, 114, 227, 211, 255, 107, 229, 211, 255, 99, 229, 211, 255, 98, 229, 211, 255, 104, 229, 211, 255, 93, 227, 209, 255, 86, 227, 209, 255, 95, 227, 209, 255, 97, 227, 209, 255, 122, 227, 209, 255, 136, 227, 209, 255, 119, 227, 209, 255, 115, 227, 209, 255, 114, 227, 209, 255, 128, 227, 209, 255, 134, 227, 209, 255, 127, 227, 209, 255, 125, 227, 209, 255, 126, 227, 209, 255, 111, 227, 209, 255, 101, 227, 209, 255, 103, 227, 209, 255, 130, 227, 209, 255, 141, 227, 209, 255, 117, 227, 209, 255, 100, 227, 211, 255, 107, 227, 211, 255, 143, 227, 211, 255, 157, 227, 211, 255, 142, 227, 211, 255, 131, 227, 211, 255, 131, 227, 211, 255, 139, 227, 211, 255, 150, 227, 211, 255, 157, 227, 211, 255, 155, 227, 209, 255, 157, 227, 209, 255, 138, 227, 209, 255, 107, 227, 209, 255, 89, 227, 209, 255, 90, 227, 211, 255, 104, 227, 211, 255, 119, 227, 211, 255, 130, 227, 211, 255, 125, 227, 211, 255, 110, 227, 209, 255, 93, 227, 209, 255, 92, 227, 209, 255, 104, 227, 209, 255, 117, 227, 209, 255, 115, 227, 209, 255, 111, 227, 209, 255, 112, 227, 209, 255, 111, 227, 209, 255, 112, 227, 209, 255, 116, 227, 211, 255, 120, 227, 211, 255, 125, 227, 211, 255, 127, 227, 211, 255, 125, 227, 211, 255, 126, 227, 211, 255, 122, 227, 211, 255, 117, 227, 211, 255, 118, 227, 211, 255, 120, 227, 211, 255, 122, 225, 211, 255, 123, 225, 211, 255, 125, 225, 211, 255, 130, 225, 211, 255, 132, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 130, 225, 211, 255, 121, 225, 211, 255, 120, 227, 211, 255, 122, 231, 216, 255, 119, 231, 217, 255, 115, 227, 216, 255, 116, 223, 216, 255, 124, 223, 214, 255, 129, 223, 214, 255, 130, 225, 211, 255, 129, 229, 211, 255, 128, 233, 209, 255, 128, 233, 209, 255, 141, 225, 209, 255, 140, 227, 209, 255, 136, 225, 209, 255, 134, 225, 209, 255, 135, 221, 211, 255, 138, 220, 211, 255, 142, 220, 213, 255, 145, 223, 214, 255, 147, 229, 214, 255, 146, 231, 214, 255, 143, 229, 211, 255, 144, 229, 209, 255, 144, 231, 209, 255, 143, 229, 209, 255, 137, 227, 209, 255, 127, 223, 209, 255, 121, 221, 209, 255, 127, 221, 209, 255, 138, 225, 209, 255, 141, 227, 209, 255, 141, 225, 209, 255, 140, 225, 209, 255, 142, 225, 209, 255, 152, 227, 209, 255, 159, 227, 209, 255, 160, 227, 209, 255, 154, 229, 209, 255, 140, 229, 209, 255, 138, 229, 209, 255, 145, 229, 209, 255, 140, 229, 208, 255, 133, 229, 208, 255, 129, 229, 209, 255, 123, 229, 209, 255, 122, 229, 209, 255, 119, 229, 209, 255, 111, 229, 211, 255, 101, 229, 211, 255, 111, 229, 211, 255, 130, 229, 213, 255, 124, 227, 211, 255, 119, 227, 211, 255, 132, 227, 211, 255, 144, 225, 211, 255, 139, 225, 211, 255, 132, 225, 211, 255, 121, 225, 211, 255, 119, 223, 211, 255, 132, 223, 211, 255, 145, 223, 211, 255, 132, 227, 209, 255, 113, 229, 209, 255, 110, 229, 209, 255, 116, 229, 209, 255, 132, 229, 209, 255, 131, 229, 209, 255, 112, 229, 209, 255, 116, 229, 209, 255, 141, 229, 209, 255, 147, 229, 209, 255, 126, 231, 208, 255, 114, 233, 208, 255, 119, 233, 209, 255, 124, 233, 209, 255, 126, 233, 209, 255, 124, 233, 209, 255, 119, 233, 211, 255, 120, 233, 211, 255, 118, 233, 211, 255, 110, 231, 213, 255, 107, 225, 211, 255, 108, 223, 211, 255, 118, 221, 211, 255, 133, 221, 211, 255, 138, 221, 211, 255, 137, 221, 211, 255, 125, 223, 211, 255, 112, 225, 211, 255, 109, 229, 211, 255, 116, 229, 211, 255, 116, 231, 211, 255, 112, 231, 211, 255, 116, 231, 211, 255, 112, 231, 211, 255, 94, 231, 211, 255, 87, 231, 211, 255, 88, 231, 211, 255, 121, 231, 211, 255, 153, 231, 211, 255, 129, 229, 211, 255, 117, 229, 211, 255, 115, 227, 211, 255, 118, 227, 211, 255, 143, 227, 211, 255, 129, 227, 211, 255, 103, 227, 211, 255, 104, 227, 211, 255, 108, 227, 211, 255, 116, 227, 211, 255, 140, 229, 211, 255, 150, 229, 209, 255, 127, 229, 209, 255, 96, 229, 209, 255, 91, 229, 209, 255, 114, 229, 209, 255, 112, 229, 209, 255, 85, 229, 208, 255, 75, 229, 208, 255, 69, 229, 208, 255, 70, 229, 209, 255, 82, 227, 211, 255, 112, 227, 211, 255, 123, 227, 211, 255, 112, 229, 211, 255, 114, 229, 211, 255, 102, 229, 211, 255, 83, 231, 211, 255, 86, 231, 211, 255, 101, 231, 211, 255, 110, 231, 211, 255, 97, 229, 209, 255, 83, 229, 209, 255, 95, 229, 209, 255, 105, 227, 209, 255, 134, 227, 209, 255, 157, 227, 209, 255, 141, 225, 209, 255, 131, 225, 209, 255, 124, 225, 209, 255, 122, 227, 209, 255, 134, 227, 209, 255, 133, 229, 209, 255, 126, 229, 209, 255, 129, 229, 209, 255, 124, 229, 209, 255, 116, 229, 209, 255, 104, 229, 209, 255, 121, 229, 209, 255, 132, 229, 209, 255, 114, 227, 209, 255, 100, 227, 209, 255, 100, 225, 209, 255, 129, 225, 209, 255, 148, 225, 209, 255, 140, 225, 209, 255, 136, 225, 209, 255, 140, 225, 209, 255, 146, 225, 209, 255, 151, 225, 209, 255, 155, 225, 209, 255, 142, 225, 209, 255, 144, 225, 209, 255, 144, 225, 209, 255, 122, 227, 211, 255, 94, 227, 211, 255, 88, 227, 213, 255, 92, 229, 213, 255, 98, 229, 214, 255, 109, 229, 214, 255, 116, 229, 213, 255, 110, 227, 211, 255, 97, 227, 211, 255, 94, 227, 211, 255, 102, 227, 211, 255, 121, 227, 211, 255, 131, 227, 211, 255, 127, 227, 211, 255, 116, 227, 211, 255, 111, 227, 211, 255, 114, 227, 211, 255, 116, 227, 211, 255, 115, 227, 211, 255, 125, 227, 211, 255, 130, 227, 211, 255, 124, 227, 211, 255, 121, 227, 211, 255, 125, 227, 211, 255, 123, 227, 211, 255, 115, 227, 211, 255, 117, 227, 211, 255, 120, 225, 211, 255, 118, 225, 211, 255, 118, 225, 211, 255, 124, 225, 211, 255, 127, 225, 211, 255, 135, 225, 211, 255, 140, 225, 211, 255, 136, 225, 211, 255, 127, 225, 211, 255, 118, 225, 211, 255, 114, 227, 213, 255, 114, 227, 213, 255, 114, 225, 213, 255, 115, 225, 213, 255, 118, 225, 213, 255, 124, 225, 213, 255, 131, 225, 211, 255, 132, 227, 211, 255, 127, 229, 211, 255, 126, 229, 211, 255, 136, 225, 211, 255, 133, 225, 211, 255, 131, 225, 211, 255, 133, 225, 211, 255, 138, 225, 211, 255, 140, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 144, 225, 211, 255, 145, 227, 209, 255, 147, 227, 209, 255, 140, 227, 209, 255, 128, 227, 209, 255, 117, 227, 209, 255, 112, 227, 209, 255, 117, 227, 209, 255, 129, 227, 209, 255, 139, 227, 209, 255, 141, 227, 209, 255, 142, 225, 209, 255, 143, 225, 209, 255, 150, 225, 209, 255, 164, 227, 209, 255, 156, 227, 209, 255, 142, 227, 209, 255, 128, 229, 209, 255, 123, 229, 209, 255, 124, 231, 209, 255, 129, 231, 208, 255, 128, 229, 206, 255, 128, 229, 208, 255, 126, 229, 208, 255, 121, 229, 208, 255, 119, 229, 209, 255, 116, 229, 209, 255, 109, 229, 211, 255, 102, 229, 211, 255, 119, 229, 213, 255, 120, 229, 214, 255, 108, 227, 213, 255, 117, 227, 211, 255, 134, 227, 211, 255, 139, 225, 211, 255, 134, 225, 211, 255, 127, 225, 211, 255, 119, 223, 211, 255, 124, 223, 211, 255, 131, 221, 211, 255, 135, 221, 211, 255, 129, 227, 209, 255, 116, 229, 209, 255, 112, 229, 209, 255, 128, 229, 209, 255, 140, 229, 209, 255, 122, 229, 209, 255, 107, 229, 209, 255, 128, 229, 209, 255, 152, 229, 209, 255, 134, 231, 208, 255, 105, 233, 206, 255, 99, 233, 208, 255, 121, 233, 208, 255, 131, 233, 208, 255, 129, 233, 209, 255, 129, 233, 209, 255, 121, 233, 211, 255, 117, 233, 211, 255, 112, 233, 213, 255, 111, 231, 214, 255, 113, 223, 213, 255, 117, 221, 211, 255, 124, 220, 211, 255, 130, 220, 211, 255, 142, 220, 211, 255, 135, 221, 211, 255, 114, 223, 211, 255, 104, 225, 211, 255, 110, 229, 211, 255, 114, 231, 211, 255, 103, 231, 211, 255, 98, 231, 211, 255, 96, 231, 211, 255, 97, 231, 211, 255, 100, 231, 211, 255, 89, 231, 211, 255, 88, 231, 211, 255, 115, 231, 211, 255, 137, 231, 211, 255, 130, 229, 211, 255, 130, 227, 211, 255, 113, 225, 211, 255, 111, 225, 211, 255, 151, 225, 211, 255, 139, 225, 211, 255, 107, 225, 211, 255, 115, 225, 211, 255, 132, 225, 211, 255, 115, 225, 211, 255, 118, 227, 211, 255, 129, 229, 209, 255, 117, 231, 208, 255, 88, 231, 208, 255, 84, 231, 208, 255, 122, 231, 208, 255, 125, 231, 208, 255, 88, 231, 208, 255, 70, 231, 208, 255, 70, 231, 208, 255, 71, 231, 209, 255, 84, 229, 211, 255, 105, 227, 211, 255, 124, 229, 211, 255, 124, 229, 211, 255, 94, 229, 211, 255, 81, 231, 211, 255, 69, 231, 211, 255, 71, 233, 211, 255, 93, 233, 211, 255, 107, 233, 211, 255, 100, 231, 209, 255, 85, 229, 209, 255, 87, 229, 209, 255, 95, 227, 209, 255, 126, 227, 209, 255, 158, 227, 209, 255, 146, 227, 209, 255, 140, 225, 209, 255, 134, 225, 209, 255, 116, 227, 209, 255, 120, 229, 209, 255, 126, 229, 209, 255, 126, 229, 209, 255, 136, 229, 209, 255, 133, 229, 209, 255, 124, 229, 209, 255, 111, 229, 209, 255, 114, 229, 209, 255, 122, 229, 209, 255, 112, 229, 209, 255, 101, 227, 209, 255, 98, 225, 209, 255, 110, 225, 209, 255, 130, 225, 209, 255, 134, 225, 209, 255, 137, 225, 209, 255, 143, 225, 209, 255, 144, 225, 209, 255, 142, 225, 209, 255, 145, 225, 209, 255, 136, 225, 209, 255, 134, 225, 209, 255, 138, 227, 209, 255, 126, 227, 211, 255, 102, 227, 211, 255, 97, 227, 214, 255, 101, 229, 214, 255, 97, 229, 216, 255, 97, 229, 216, 255, 101, 229, 214, 255, 100, 227, 213, 255, 101, 227, 211, 255, 107, 227, 211, 255, 111, 227, 211, 255, 117, 227, 211, 255, 129, 227, 211, 255, 135, 227, 211, 255, 129, 227, 211, 255, 113, 227, 211, 255, 113, 227, 211, 255, 115, 227, 211, 255, 107, 227, 211, 255, 110, 227, 211, 255, 120, 227, 211, 255, 122, 227, 211, 255, 118, 227, 211, 255, 123, 227, 211, 255, 129, 227, 211, 255, 125, 227, 211, 255, 121, 227, 211, 255, 121, 225, 211, 255, 122, 225, 211, 255, 123, 225, 211, 255, 119, 225, 211, 255, 122, 225, 211, 255, 132, 225, 211, 255, 141, 225, 211, 255, 140, 225, 211, 255, 132, 225, 211, 255, 125, 225, 211, 255, 116, 225, 211, 255, 112, 225, 211, 255, 109, 225, 211, 255, 111, 225, 211, 255, 115, 225, 211, 255, 120, 225, 211, 255, 125, 225, 211, 255, 129, 225, 211, 255, 127, 225, 211, 255, 123, 225, 211, 255, 130, 225, 211, 255, 130, 225, 211, 255, 132, 225, 211, 255, 135, 225, 211, 255, 137, 225, 211, 255, 137, 225, 211, 255, 138, 225, 211, 255, 138, 225, 211, 255, 139, 225, 211, 255, 142, 225, 211, 255, 143, 227, 209, 255, 137, 227, 209, 255, 124, 227, 209, 255, 109, 227, 209, 255, 109, 227, 209, 255, 115, 227, 209, 255, 126, 227, 209, 255, 137, 227, 209, 255, 144, 227, 209, 255, 147, 227, 209, 255, 148, 225, 209, 255, 150, 225, 209, 255, 158, 225, 209, 255, 158, 227, 209, 255, 140, 227, 209, 255, 126, 227, 209, 255, 121, 229, 209, 255, 115, 229, 209, 255, 114, 231, 209, 255, 113, 231, 208, 255, 113, 229, 206, 255, 115, 229, 208, 255, 117, 229, 208, 255, 117, 229, 208, 255, 116, 229, 209, 255, 116, 229, 209, 255, 113, 229, 211, 255, 111, 229, 211, 255, 115, 229, 213, 255, 108, 229, 214, 255, 108, 227, 213, 255, 123, 227, 211, 255, 132, 227, 211, 255, 128, 227, 211, 255, 126, 225, 211, 255, 125, 225, 211, 255, 133, 223, 211, 255, 133, 223, 211, 255, 127, 223, 211, 255, 132, 223, 211, 255, 129, 227, 209, 255, 113, 229, 209, 255, 116, 229, 209, 255, 139, 229, 209, 255, 133, 229, 209, 255, 110, 229, 209, 255, 111, 229, 209, 255, 138, 229, 209, 255, 148, 229, 209, 255, 116, 229, 208, 255, 91, 233, 206, 255, 101, 233, 208, 255, 121, 233, 208, 255, 120, 233, 208, 255, 129, 233, 209, 255, 128, 233, 209, 255, 110, 233, 211, 255, 110, 233, 211, 255, 112, 233, 213, 255, 105, 231, 214, 255, 104, 225, 213, 255, 113, 223, 211, 255, 115, 221, 211, 255, 122, 221, 211, 255, 139, 221, 211, 255, 125, 221, 211, 255, 99, 223, 211, 255, 98, 227, 211, 255, 112, 229, 211, 255, 119, 231, 211, 255, 101, 231, 211, 255, 90, 231, 211, 255, 94, 231, 211, 255, 135, 231, 211, 255, 131, 231, 211, 255, 105, 231, 211, 255, 98, 231, 211, 255, 101, 231, 211, 255, 114, 231, 211, 255, 122, 229, 211, 255, 127, 227, 211, 255, 114, 225, 211, 255, 116, 225, 211, 255, 142, 225, 211, 255, 134, 225, 211, 255, 116, 225, 211, 255, 132, 225, 211, 255, 168, 225, 211, 255, 125, 225, 211, 255, 94, 227, 211, 255, 100, 229, 209, 255, 92, 231, 208, 255, 83, 231, 208, 255, 83, 231, 208, 255, 110, 231, 208, 255, 120, 231, 208, 255, 93, 231, 208, 255, 76, 231, 208, 255, 75, 231, 208, 255, 74, 231, 209, 255, 82, 229, 211, 255, 93, 227, 211, 255, 121, 229, 211, 255, 128, 229, 211, 255, 86, 231, 211, 255, 68, 231, 211, 255, 63, 233, 211, 255, 69, 233, 211, 255, 88, 233, 211, 255, 97, 233, 211, 255, 98, 231, 209, 255, 92, 229, 209, 255, 82, 229, 209, 255, 82, 229, 209, 255, 109, 229, 209, 255, 134, 227, 209, 255, 129, 227, 209, 255, 134, 227, 209, 255, 134, 227, 209, 255, 113, 227, 209, 255, 109, 229, 209, 255, 117, 229, 209, 255, 122, 229, 209, 255, 132, 229, 209, 255, 135, 229, 209, 255, 122, 229, 209, 255, 114, 229, 209, 255, 112, 229, 209, 255, 115, 229, 209, 255, 112, 229, 209, 255, 105, 227, 209, 255, 103, 225, 209, 255, 103, 225, 209, 255, 123, 225, 209, 255, 139, 225, 209, 255, 150, 225, 209, 255, 153, 225, 209, 255, 148, 225, 209, 255, 142, 225, 209, 255, 139, 225, 209, 255, 133, 225, 209, 255, 127, 227, 209, 255, 133, 227, 209, 255, 127, 227, 209, 255, 112, 227, 211, 255, 101, 227, 213, 255, 107, 227, 214, 255, 105, 229, 214, 255, 103, 229, 216, 255, 102, 229, 214, 255, 102, 227, 213, 255, 105, 227, 211, 255, 122, 227, 211, 255, 133, 227, 211, 255, 121, 227, 211, 255, 118, 227, 211, 255, 129, 227, 211, 255, 135, 227, 211, 255, 123, 227, 211, 255, 113, 227, 211, 255, 112, 227, 211, 255, 109, 227, 211, 255, 104, 227, 211, 255, 112, 227, 211, 255, 123, 227, 211, 255, 124, 227, 211, 255, 117, 227, 211, 255, 122, 227, 211, 255, 130, 227, 211, 255, 134, 227, 211, 255, 129, 225, 211, 255, 123, 225, 211, 255, 129, 225, 211, 255, 130, 225, 211, 255, 129, 225, 211, 255, 133, 225, 211, 255, 139, 225, 211, 255, 142, 225, 211, 255, 139, 225, 211, 255, 132, 225, 211, 255, 123, 225, 211, 255, 116, 225, 211, 255, 111, 225, 211, 255, 109, 225, 211, 255, 112, 225, 211, 255, 117, 225, 211, 255, 123, 225, 211, 255, 130, 225, 211, 255, 130, 225, 211, 255, 127, 225, 211, 255, 126, 225, 211, 255, 131, 225, 211, 255, 135, 225, 211, 255, 135, 225, 211, 255, 133, 225, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 136, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 136, 227, 209, 255, 122, 227, 209, 255, 113, 227, 209, 255, 109, 227, 209, 255, 120, 227, 209, 255, 131, 227, 209, 255, 141, 227, 209, 255, 147, 227, 209, 255, 150, 227, 209, 255, 152, 227, 209, 255, 157, 225, 209, 255, 163, 225, 209, 255, 157, 225, 209, 255, 140, 227, 209, 255, 130, 227, 209, 255, 126, 227, 209, 255, 122, 229, 209, 255, 112, 229, 209, 255, 112, 231, 209, 255, 109, 231, 208, 255, 108, 229, 206, 255, 111, 229, 208, 255, 115, 229, 208, 255, 116, 229, 208, 255, 125, 229, 209, 255, 128, 229, 209, 255, 118, 229, 211, 255, 111, 229, 211, 255, 102, 229, 213, 255, 108, 229, 214, 255, 119, 229, 211, 255, 127, 229, 211, 255, 127, 227, 211, 255, 121, 227, 211, 255, 124, 225, 211, 255, 136, 225, 211, 255, 150, 225, 211, 255, 141, 223, 211, 255, 132, 223, 211, 255, 137, 223, 211, 255, 127, 227, 209, 255, 117, 229, 209, 255, 125, 229, 209, 255, 135, 229, 209, 255, 119, 229, 209, 255, 109, 229, 209, 255, 121, 229, 209, 255, 140, 229, 209, 255, 133, 229, 209, 255, 99, 229, 208, 255, 91, 231, 206, 255, 104, 231, 208, 255, 107, 231, 208, 255, 110, 231, 208, 255, 123, 231, 209, 255, 116, 231, 209, 255, 105, 231, 211, 255, 110, 231, 211, 255, 107, 231, 213, 255, 94, 231, 214, 255, 90, 227, 213, 255, 96, 225, 211, 255, 103, 223, 211, 255, 124, 223, 211, 255, 134, 221, 211, 255, 110, 223, 211, 255, 93, 225, 211, 255, 93, 227, 211, 255, 118, 231, 211, 255, 127, 233, 211, 255, 111, 231, 211, 255, 89, 229, 211, 255, 105, 229, 211, 255, 173, 229, 211, 255, 142, 229, 211, 255, 125, 229, 211, 255, 113, 229, 211, 255, 93, 229, 211, 255, 110, 229, 211, 255, 115, 229, 211, 255, 122, 225, 211, 255, 129, 225, 211, 255, 112, 225, 211, 255, 110, 225, 211, 255, 122, 225, 211, 255, 121, 225, 211, 255, 135, 225, 211, 255, 171, 225, 211, 255, 133, 225, 211, 255, 89, 225, 211, 255, 84, 229, 209, 255, 80, 229, 209, 255, 86, 229, 209, 255, 88, 229, 209, 255, 101, 229, 209, 255, 115, 229, 209, 255, 100, 229, 209, 255, 82, 229, 209, 255, 79, 229, 209, 255, 78, 229, 209, 255, 83, 229, 211, 255, 84, 229, 211, 255, 103, 229, 211, 255, 108, 231, 211, 255, 91, 231, 211, 255, 72, 233, 211, 255, 59, 233, 211, 255, 73, 235, 211, 255, 90, 235, 211, 255, 87, 235, 211, 255, 92, 231, 209, 255, 97, 231, 209, 255, 90, 229, 209, 255, 85, 229, 209, 255, 98, 229, 209, 255, 112, 229, 209, 255, 115, 229, 209, 255, 118, 229, 209, 255, 121, 229, 209, 255, 107, 229, 209, 255, 102, 229, 209, 255, 113, 229, 209, 255, 122, 229, 209, 255, 124, 229, 209, 255, 131, 229, 209, 255, 120, 229, 209, 255, 116, 229, 209, 255, 116, 229, 209, 255, 116, 229, 209, 255, 115, 229, 209, 255, 113, 225, 209, 255, 113, 225, 209, 255, 111, 225, 209, 255, 124, 225, 209, 255, 142, 225, 209, 255, 152, 225, 209, 255, 158, 225, 209, 255, 158, 225, 209, 255, 148, 225, 209, 255, 139, 225, 209, 255, 129, 227, 208, 255, 118, 227, 209, 255, 123, 227, 209, 255, 123, 227, 209, 255, 117, 227, 211, 255, 111, 227, 211, 255, 107, 227, 213, 255, 105, 227, 214, 255, 105, 227, 214, 255, 104, 227, 214, 255, 104, 227, 211, 255, 105, 227, 211, 255, 121, 227, 211, 255, 138, 227, 211, 255, 129, 227, 211, 255, 116, 227, 211, 255, 120, 227, 211, 255, 131, 227, 211, 255, 129, 227, 211, 255, 117, 227, 211, 255, 111, 227, 211, 255, 108, 227, 211, 255, 105, 227, 211, 255, 107, 227, 211, 255, 116, 227, 211, 255, 125, 227, 211, 255, 123, 227, 211, 255, 120, 227, 211, 255, 123, 227, 211, 255, 138, 227, 211, 255, 141, 225, 211, 255, 130, 225, 211, 255, 126, 225, 211, 255, 135, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 141, 225, 211, 255, 145, 225, 211, 255, 147, 225, 211, 255, 140, 225, 211, 255, 130, 225, 211, 255, 122, 225, 211, 255, 116, 225, 211, 255, 113, 225, 211, 255, 113, 225, 211, 255, 116, 225, 211, 255, 122, 225, 211, 255, 132, 225, 211, 255, 137, 225, 211, 255, 135, 225, 211, 255, 132, 225, 211, 255, 133, 225, 211, 255, 133, 225, 211, 255, 131, 225, 211, 255, 128, 225, 211, 255, 130, 225, 211, 255, 134, 225, 211, 255, 138, 225, 211, 255, 137, 225, 211, 255, 132, 225, 211, 255, 127, 227, 209, 255, 120, 227, 209, 255, 121, 227, 209, 255, 126, 227, 209, 255, 134, 227, 209, 255, 142, 227, 209, 255, 146, 227, 209, 255, 148, 227, 209, 255, 152, 227, 209, 255, 159, 227, 209, 255, 165, 225, 209, 255, 159, 225, 209, 255, 138, 225, 209, 255, 132, 227, 209, 255, 128, 227, 209, 255, 124, 227, 209, 255, 115, 229, 209, 255, 114, 229, 209, 255, 114, 231, 209, 255, 110, 231, 208, 255, 111, 229, 206, 255, 118, 229, 208, 255, 123, 229, 208, 255, 128, 229, 208, 255, 133, 229, 209, 255, 126, 229, 209, 255, 108, 229, 211, 255, 99, 229, 211, 255, 101, 229, 213, 255, 119, 229, 214, 255, 130, 229, 213, 255, 130, 229, 211, 255, 125, 229, 211, 255, 121, 227, 211, 255, 127, 227, 211, 255, 140, 225, 211, 255, 146, 225, 211, 255, 145, 223, 211, 255, 146, 223, 211, 255, 139, 225, 211, 255, 125, 227, 209, 255, 121, 229, 209, 255, 125, 229, 209, 255, 123, 229, 209, 255, 118, 229, 209, 255, 118, 229, 209, 255, 127, 229, 209, 255, 130, 229, 209, 255, 111, 229, 209, 255, 88, 229, 208, 255, 88, 231, 206, 255, 91, 231, 208, 255, 91, 231, 208, 255, 103, 231, 208, 255, 108, 231, 209, 255, 103, 231, 209, 255, 108, 231, 211, 255, 108, 231, 211, 255, 95, 231, 213, 255, 88, 231, 214, 255, 90, 229, 214, 255, 92, 227, 214, 255, 109, 225, 214, 255, 133, 225, 214, 255, 128, 223, 214, 255, 102, 223, 214, 255, 91, 225, 214, 255, 84, 229, 214, 255, 104, 233, 214, 255, 120, 233, 214, 255, 113, 231, 214, 255, 93, 229, 214, 255, 109, 229, 214, 255, 147, 229, 214, 255, 125, 229, 214, 255, 133, 229, 214, 255, 112, 229, 214, 255, 91, 229, 214, 255, 114, 229, 214, 255, 131, 227, 214, 255, 121, 225, 214, 255, 123, 225, 214, 255, 98, 225, 214, 255, 93, 225, 214, 255, 124, 225, 214, 255, 130, 225, 214, 255, 128, 225, 214, 255, 134, 225, 214, 255, 122, 225, 214, 255, 90, 225, 213, 255, 78, 227, 211, 255, 82, 229, 211, 255, 89, 229, 211, 255, 89, 229, 211, 255, 101, 229, 211, 255, 128, 229, 211, 255, 119, 229, 211, 255, 90, 229, 211, 255, 82, 229, 211, 255, 83, 229, 211, 255, 88, 229, 213, 255, 93, 231, 214, 255, 96, 231, 214, 255, 85, 231, 214, 255, 90, 233, 214, 255, 80, 233, 214, 255, 63, 235, 214, 255, 84, 235, 214, 255, 100, 235, 214, 255, 83, 235, 213, 255, 88, 233, 209, 255, 100, 231, 209, 255, 104, 231, 209, 255, 96, 231, 209, 255, 93, 231, 209, 255, 100, 231, 209, 255, 107, 231, 209, 255, 104, 231, 209, 255, 103, 231, 209, 255, 100, 231, 209, 255, 100, 229, 209, 255, 110, 229, 209, 255, 130, 229, 209, 255, 133, 229, 209, 255, 128, 229, 209, 255, 119, 229, 209, 255, 116, 229, 209, 255, 118, 229, 209, 255, 120, 229, 209, 255, 119, 229, 209, 255, 120, 227, 209, 255, 117, 227, 209, 255, 120, 227, 209, 255, 127, 227, 209, 255, 136, 227, 209, 255, 139, 227, 209, 255, 148, 227, 209, 255, 155, 227, 209, 255, 152, 227, 209, 255, 142, 227, 209, 255, 133, 229, 208, 255, 120, 229, 208, 255, 115, 227, 209, 255, 116, 227, 209, 255, 115, 227, 211, 255, 118, 227, 211, 255, 114, 227, 213, 255, 108, 227, 214, 255, 100, 227, 214, 255, 99, 227, 214, 255, 98, 227, 213, 255, 99, 227, 211, 255, 103, 227, 211, 255, 117, 227, 211, 255, 125, 227, 211, 255, 118, 227, 211, 255, 116, 227, 211, 255, 125, 227, 211, 255, 130, 227, 211, 255, 121, 227, 211, 255, 111, 227, 211, 255, 109, 227, 211, 255, 108, 227, 211, 255, 104, 227, 211, 255, 99, 227, 211, 255, 107, 227, 211, 255, 121, 227, 211, 255, 126, 227, 211, 255, 121, 227, 211, 255, 127, 227, 211, 255, 139, 227, 211, 255, 140, 227, 211, 255, 129, 227, 211, 255, 131, 227, 211, 255, 140, 227, 211, 255, 145, 227, 211, 255, 148, 227, 211, 255, 148, 227, 211, 255, 148, 227, 211, 255, 148, 227, 211, 255, 141, 225, 211, 255, 131, 225, 211, 255, 122, 225, 211, 255, 117, 225, 211, 255, 117, 225, 211, 255, 119, 225, 211, 255, 121, 225, 211, 255, 129, 225, 211, 255, 139, 225, 211, 255, 144, 225, 211, 255, 137, 225, 211, 255, 135, 225, 211, 255, 131, 225, 211, 255, 128, 225, 211, 255, 127, 225, 211, 255, 130, 225, 211, 255, 139, 225, 211, 255, 140, 225, 211, 255, 132, 225, 211, 255, 123, 225, 211, 255, 123, 227, 209, 255, 125, 227, 209, 255, 130, 227, 209, 255, 137, 227, 209, 255, 140, 227, 209, 255, 145, 227, 209, 255, 144, 227, 209, 255, 144, 227, 209, 255, 154, 227, 209, 255, 165, 227, 209, 255, 162, 225, 209, 255, 140, 225, 209, 255, 129, 225, 209, 255, 131, 227, 209, 255, 127, 227, 209, 255, 117, 227, 209, 255, 110, 229, 209, 255, 117, 229, 209, 255, 115, 231, 209, 255, 110, 231, 208, 255, 116, 229, 206, 255, 127, 229, 208, 255, 127, 229, 208, 255, 141, 229, 208, 255, 132, 229, 209, 255, 111, 229, 209, 255, 95, 229, 211, 255, 95, 229, 211, 255, 110, 229, 213, 255, 125, 229, 214, 255, 131, 229, 213, 255, 129, 229, 211, 255, 126, 229, 211, 255, 121, 229, 211, 255, 124, 227, 211, 255, 133, 227, 211, 255, 140, 225, 211, 255, 153, 223, 211, 255, 159, 223, 211, 255, 140, 225, 211, 255, 127, 227, 209, 255, 121, 229, 209, 255, 122, 229, 209, 255, 121, 229, 209, 255, 124, 229, 209, 255, 122, 229, 209, 255, 125, 229, 209, 255, 120, 229, 209, 255, 97, 229, 209, 255, 84, 229, 208, 255, 81, 231, 206, 255, 79, 231, 208, 255, 86, 231, 208, 255, 95, 231, 208, 255, 96, 231, 209, 255, 100, 231, 209, 255, 107, 231, 211, 255, 100, 231, 211, 255, 87, 231, 213, 255, 89, 231, 214, 255, 95, 229, 214, 255, 95, 229, 214, 255, 116, 227, 214, 255, 137, 225, 214, 255, 125, 225, 214, 255, 100, 225, 214, 255, 87, 227, 214, 255, 79, 229, 214, 255, 88, 233, 214, 255, 108, 233, 214, 255, 108, 229, 214, 255, 97, 229, 214, 255, 107, 229, 214, 255, 115, 229, 214, 255, 109, 229, 214, 255, 128, 229, 214, 255, 109, 229, 214, 255, 91, 229, 214, 255, 118, 229, 214, 255, 148, 227, 214, 255, 119, 225, 214, 255, 108, 225, 214, 255, 93, 225, 214, 255, 94, 225, 214, 255, 130, 225, 214, 255, 142, 225, 214, 255, 129, 225, 214, 255, 109, 225, 214, 255, 110, 225, 214, 255, 91, 225, 214, 255, 78, 227, 213, 255, 85, 229, 211, 255, 91, 229, 211, 255, 89, 229, 211, 255, 100, 229, 211, 255, 140, 229, 211, 255, 131, 229, 211, 255, 97, 229, 211, 255, 87, 229, 211, 255, 86, 229, 213, 255, 93, 229, 214, 255, 108, 231, 214, 255, 101, 231, 214, 255, 77, 231, 214, 255, 83, 233, 214, 255, 80, 233, 214, 255, 70, 235, 214, 255, 96, 235, 214, 255, 110, 235, 214, 255, 84, 235, 213, 255, 88, 233, 211, 255, 104, 231, 211, 255, 115, 231, 211, 255, 104, 231, 211, 255, 96, 231, 211, 255, 96, 231, 211, 255, 99, 233, 211, 255, 99, 233, 211, 255, 92, 233, 211, 255, 98, 231, 209, 255, 102, 229, 209, 255, 107, 229, 209, 255, 135, 229, 209, 255, 145, 229, 209, 255, 128, 229, 209, 255, 116, 229, 209, 255, 113, 229, 209, 255, 116, 229, 209, 255, 120, 229, 209, 255, 119, 229, 209, 255, 121, 227, 209, 255, 118, 227, 209, 255, 125, 227, 209, 255, 130, 227, 209, 255, 128, 227, 209, 255, 131, 227, 209, 255, 138, 227, 209, 255, 147, 227, 209, 255, 152, 227, 209, 255, 143, 227, 209, 255, 139, 229, 208, 255, 127, 229, 208, 255, 116, 229, 209, 255, 114, 227, 209, 255, 112, 227, 211, 255, 116, 227, 211, 255, 122, 227, 211, 255, 114, 227, 213, 255, 98, 227, 214, 255, 97, 227, 214, 255, 95, 227, 213, 255, 92, 227, 211, 255, 93, 227, 211, 255, 103, 227, 211, 255, 115, 227, 211, 255, 114, 227, 211, 255, 117, 227, 211, 255, 121, 227, 211, 255, 129, 227, 211, 255, 123, 227, 211, 255, 109, 227, 211, 255, 112, 227, 211, 255, 112, 227, 211, 255, 104, 227, 211, 255, 95, 227, 211, 255, 92, 227, 211, 255, 110, 227, 211, 255, 127, 227, 211, 255, 124, 227, 211, 255, 121, 227, 211, 255, 130, 227, 211, 255, 141, 227, 211, 255, 135, 227, 211, 255, 131, 227, 211, 255, 135, 227, 211, 255, 144, 227, 211, 255, 151, 227, 211, 255, 148, 227, 211, 255, 146, 227, 211, 255, 153, 227, 211, 255, 150, 225, 211, 255, 138, 225, 211, 255, 126, 225, 211, 255, 120, 225, 211, 255, 119, 225, 211, 255, 120, 225, 211, 255, 123, 225, 211, 255, 126, 225, 211, 255, 135, 225, 211, 255, 147, 225, 211, 255], "height": 66, "width": 200}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DataData", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16050693467600": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069435590", "dst_var": "input"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "Data", "testInfoIsInput": true, "accessProperties": {"Columns": [], "Dataset_size": 3000, "Category": "Local", "Type": "Data", "Sources": [], "PathFake": [], "Partition_list": [], "Shuffle_data": true}}}, "1605069435590": {"layerId": "1605069435590", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_1", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 24, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_1(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_1'        \n        self._patch_size = 5\n        self._feature_maps = 24\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 11.333333333333334, "left": 113.33333333333334}, "tutorialId": "", "OutputDim": "31x98x24", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 3038, "series": [{"type": "rgba", "x_data": null, "data": [191, 191, 191, 255, 179, 179, 179, 255, 190, 190, 190, 255, 186, 186, 186, 255, 187, 187, 187, 255, 178, 178, 178, 255, 182, 182, 182, 255, 183, 183, 183, 255, 181, 181, 181, 255, 182, 182, 182, 255, 195, 195, 195, 255, 201, 201, 201, 255, 208, 208, 208, 255, 221, 221, 221, 255, 233, 233, 233, 255, 211, 211, 211, 255, 189, 189, 189, 255, 187, 187, 187, 255, 187, 187, 187, 255, 178, 178, 178, 255, 170, 170, 170, 255, 123, 123, 123, 255, 107, 107, 107, 255, 125, 125, 125, 255, 133, 133, 133, 255, 127, 127, 127, 255, 123, 123, 123, 255, 100, 100, 100, 255, 78, 78, 78, 255, 101, 101, 101, 255, 71, 71, 71, 255, 113, 113, 113, 255, 77, 77, 77, 255, 85, 85, 85, 255, 96, 96, 96, 255, 107, 107, 107, 255, 93, 93, 93, 255, 119, 119, 119, 255, 128, 128, 128, 255, 110, 110, 110, 255, 149, 149, 149, 255, 145, 145, 145, 255, 91, 91, 91, 255, 85, 85, 85, 255, 84, 84, 84, 255, 85, 85, 85, 255, 60, 60, 60, 255, 139, 139, 139, 255, 88, 88, 88, 255, 118, 118, 118, 255, 136, 136, 136, 255, 110, 110, 110, 255, 88, 88, 88, 255, 80, 80, 80, 255, 94, 94, 94, 255, 92, 92, 92, 255, 103, 103, 103, 255, 106, 106, 106, 255, 142, 142, 142, 255, 162, 162, 162, 255, 180, 180, 180, 255, 177, 177, 177, 255, 173, 173, 173, 255, 169, 169, 169, 255, 164, 164, 164, 255, 152, 152, 152, 255, 155, 155, 155, 255, 156, 156, 156, 255, 148, 148, 148, 255, 144, 144, 144, 255, 139, 139, 139, 255, 135, 135, 135, 255, 132, 132, 132, 255, 129, 129, 129, 255, 124, 124, 124, 255, 119, 119, 119, 255, 120, 120, 120, 255, 121, 121, 121, 255, 123, 123, 123, 255, 126, 126, 126, 255, 136, 136, 136, 255, 131, 131, 131, 255, 121, 121, 121, 255, 113, 113, 113, 255, 120, 120, 120, 255, 121, 121, 121, 255, 119, 119, 119, 255, 108, 108, 108, 255, 103, 103, 103, 255, 121, 121, 121, 255, 129, 129, 129, 255, 151, 151, 151, 255, 175, 175, 175, 255, 181, 181, 181, 255, 168, 168, 168, 255, 158, 158, 158, 255, 184, 184, 184, 255, 200, 200, 200, 255, 193, 193, 193, 255, 180, 180, 180, 255, 178, 178, 178, 255, 178, 178, 178, 255, 169, 169, 169, 255, 163, 163, 163, 255, 182, 182, 182, 255, 182, 182, 182, 255, 190, 190, 190, 255, 196, 196, 196, 255, 208, 208, 208, 255, 217, 217, 217, 255, 223, 223, 223, 255, 214, 214, 214, 255, 206, 206, 206, 255, 168, 168, 168, 255, 107, 107, 107, 255, 121, 121, 121, 255, 160, 160, 160, 255, 154, 154, 154, 255, 94, 94, 94, 255, 21, 21, 21, 255, 38, 38, 38, 255, 8, 8, 8, 255, 27, 27, 27, 255, 22, 22, 22, 255, 38, 38, 38, 255, 10, 10, 10, 255, 53, 53, 53, 255, 23, 23, 23, 255, 14, 14, 14, 255, 51, 51, 51, 255, 12, 12, 12, 255, 63, 63, 63, 255, 49, 49, 49, 255, 2, 2, 2, 255, 54, 54, 54, 255, 66, 66, 66, 255, 55, 55, 55, 255, 117, 117, 117, 255, 109, 109, 109, 255, 83, 83, 83, 255, 77, 77, 77, 255, 52, 52, 52, 255, 64, 64, 64, 255, 53, 53, 53, 255, 55, 55, 55, 255, 122, 122, 122, 255, 102, 102, 102, 255, 127, 127, 127, 255, 127, 127, 127, 255, 115, 115, 115, 255, 127, 127, 127, 255, 137, 137, 137, 255, 168, 168, 168, 255, 173, 173, 173, 255, 184, 184, 184, 255, 185, 185, 185, 255, 172, 172, 172, 255, 180, 180, 180, 255, 186, 186, 186, 255, 183, 183, 183, 255, 183, 183, 183, 255, 185, 185, 185, 255, 188, 188, 188, 255, 182, 182, 182, 255, 177, 177, 177, 255, 174, 174, 174, 255, 182, 182, 182, 255, 182, 182, 182, 255, 186, 186, 186, 255, 182, 182, 182, 255, 178, 178, 178, 255, 174, 174, 174, 255, 179, 179, 179, 255, 176, 176, 176, 255, 169, 169, 169, 255, 168, 168, 168, 255, 172, 172, 172, 255, 175, 175, 175, 255, 178, 178, 178, 255, 174, 174, 174, 255, 169, 169, 169, 255, 182, 182, 182, 255, 177, 177, 177, 255, 184, 184, 184, 255, 180, 180, 180, 255, 160, 160, 160, 255, 138, 138, 138, 255, 130, 130, 130, 255, 114, 114, 114, 255, 89, 89, 89, 255, 109, 109, 109, 255, 135, 135, 135, 255, 135, 135, 135, 255, 156, 156, 156, 255, 162, 162, 162, 255, 179, 179, 179, 255, 165, 165, 165, 255, 160, 160, 160, 255, 161, 161, 161, 255, 164, 164, 164, 255, 166, 166, 166, 255, 173, 173, 173, 255, 165, 165, 165, 255, 159, 159, 159, 255, 128, 128, 128, 255, 149, 149, 149, 255, 163, 163, 163, 255, 189, 189, 189, 255, 191, 191, 191, 255, 194, 194, 194, 255, 189, 189, 189, 255, 103, 103, 103, 255, 73, 73, 73, 255, 39, 39, 39, 255, 81, 81, 81, 255, 78, 78, 78, 255, 68, 68, 68, 255, 64, 64, 64, 255, 59, 59, 59, 255, 69, 69, 69, 255, 87, 87, 87, 255, 71, 71, 71, 255, 71, 71, 71, 255, 88, 88, 88, 255, 105, 105, 105, 255, 81, 81, 81, 255, 85, 85, 85, 255, 87, 87, 87, 255, 118, 118, 118, 255, 135, 135, 135, 255, 105, 105, 105, 255, 87, 87, 87, 255, 120, 120, 120, 255, 164, 164, 164, 255, 164, 164, 164, 255, 222, 222, 222, 255, 177, 177, 177, 255, 175, 175, 175, 255, 182, 182, 182, 255, 195, 195, 195, 255, 169, 169, 169, 255, 176, 176, 176, 255, 198, 198, 198, 255, 209, 209, 209, 255, 204, 204, 204, 255, 210, 210, 210, 255, 209, 209, 209, 255, 217, 217, 217, 255, 241, 241, 241, 255, 218, 218, 218, 255, 221, 221, 221, 255, 202, 202, 202, 255, 207, 207, 207, 255, 204, 204, 204, 255, 185, 185, 185, 255, 161, 161, 161, 255, 169, 169, 169, 255, 170, 170, 170, 255, 171, 171, 171, 255, 170, 170, 170, 255, 162, 162, 162, 255, 151, 151, 151, 255, 149, 149, 149, 255, 144, 144, 144, 255, 149, 149, 149, 255, 161, 161, 161, 255, 162, 162, 162, 255, 155, 155, 155, 255, 118, 118, 118, 255, 139, 139, 139, 255, 157, 157, 157, 255, 166, 166, 166, 255, 165, 165, 165, 255, 172, 172, 172, 255, 184, 184, 184, 255, 186, 186, 186, 255, 190, 190, 190, 255, 186, 186, 186, 255, 197, 197, 197, 255, 196, 196, 196, 255, 204, 204, 204, 255, 205, 205, 205, 255, 195, 195, 195, 255, 155, 155, 155, 255, 133, 133, 133, 255, 115, 115, 115, 255, 82, 82, 82, 255, 117, 117, 117, 255, 112, 112, 112, 255, 118, 118, 118, 255, 132, 132, 132, 255, 149, 149, 149, 255, 140, 140, 140, 255, 156, 156, 156, 255, 163, 163, 163, 255, 159, 159, 159, 255, 158, 158, 158, 255, 160, 160, 160, 255, 170, 170, 170, 255, 169, 169, 169, 255, 161, 161, 161, 255, 75, 75, 75, 255, 55, 55, 55, 255, 32, 32, 32, 255, 72, 72, 72, 255, 84, 84, 84, 255, 106, 106, 106, 255, 114, 114, 114, 255, 125, 125, 125, 255, 115, 115, 115, 255, 149, 149, 149, 255, 102, 102, 102, 255, 140, 140, 140, 255, 79, 79, 79, 255, 159, 159, 159, 255, 115, 115, 115, 255, 127, 127, 127, 255, 165, 165, 165, 255, 168, 168, 168, 255, 169, 169, 169, 255, 186, 186, 186, 255, 191, 191, 191, 255, 174, 174, 174, 255, 195, 195, 195, 255, 178, 178, 178, 255, 202, 202, 202, 255, 183, 183, 183, 255, 204, 204, 204, 255, 216, 216, 216, 255, 229, 229, 229, 255, 225, 225, 225, 255, 195, 195, 195, 255, 204, 204, 204, 255, 218, 218, 218, 255, 221, 221, 221, 255, 226, 226, 226, 255, 239, 239, 239, 255, 227, 227, 227, 255, 216, 216, 216, 255, 233, 233, 233, 255, 223, 223, 223, 255, 178, 178, 178, 255, 176, 176, 176, 255, 165, 165, 165, 255, 155, 155, 155, 255, 148, 148, 148, 255, 144, 144, 144, 255, 139, 139, 139, 255, 124, 124, 124, 255, 122, 122, 122, 255, 111, 111, 111, 255, 110, 110, 110, 255, 122, 122, 122, 255, 118, 118, 118, 255, 114, 114, 114, 255, 114, 114, 114, 255, 113, 113, 113, 255, 113, 113, 113, 255, 116, 116, 116, 255, 123, 123, 123, 255, 130, 130, 130, 255, 133, 133, 133, 255, 138, 138, 138, 255, 162, 162, 162, 255, 165, 165, 165, 255, 106, 106, 106, 255, 106, 106, 106, 255, 91, 91, 91, 255, 97, 97, 97, 255, 128, 128, 128, 255, 152, 152, 152, 255, 170, 170, 170, 255, 165, 165, 165, 255, 166, 166, 166, 255, 155, 155, 155, 255, 154, 154, 154, 255, 154, 154, 154, 255, 158, 158, 158, 255, 152, 152, 152, 255, 162, 162, 162, 255, 159, 159, 159, 255, 163, 163, 163, 255, 170, 170, 170, 255, 163, 163, 163, 255, 136, 136, 136, 255, 144, 144, 144, 255, 100, 100, 100, 255, 108, 108, 108, 255, 90, 90, 90, 255, 116, 116, 116, 255, 124, 124, 124, 255, 138, 138, 138, 255, 174, 174, 174, 255, 160, 160, 160, 255, 128, 128, 128, 255, 131, 131, 131, 255, 130, 130, 130, 255, 124, 124, 124, 255, 104, 104, 104, 255, 77, 77, 77, 255, 52, 52, 52, 255, 18, 18, 18, 255, 19, 19, 19, 255, 11, 11, 11, 255, 41, 41, 41, 255, 58, 58, 58, 255, 119, 119, 119, 255, 176, 176, 176, 255, 203, 203, 203, 255, 210, 210, 210, 255, 203, 203, 203, 255, 178, 178, 178, 255, 220, 220, 220, 255, 197, 197, 197, 255, 209, 209, 209, 255, 186, 186, 186, 255, 190, 190, 190, 255, 201, 201, 201, 255, 204, 204, 204, 255, 197, 197, 197, 255, 204, 204, 204, 255, 208, 208, 208, 255, 212, 212, 212, 255, 218, 218, 218, 255, 216, 216, 216, 255, 222, 222, 222, 255, 236, 236, 236, 255, 238, 238, 238, 255, 244, 244, 244, 255, 251, 251, 251, 255, 234, 234, 234, 255, 232, 232, 232, 255, 203, 203, 203, 255, 199, 199, 199, 255, 184, 184, 184, 255, 167, 167, 167, 255, 149, 149, 149, 255, 141, 141, 141, 255, 119, 119, 119, 255, 124, 124, 124, 255, 112, 112, 112, 255, 128, 128, 128, 255, 126, 126, 126, 255, 124, 124, 124, 255, 121, 121, 121, 255, 119, 119, 119, 255, 119, 119, 119, 255, 124, 124, 124, 255, 121, 121, 121, 255, 121, 121, 121, 255, 124, 124, 124, 255, 124, 124, 124, 255, 121, 121, 121, 255, 119, 119, 119, 255, 120, 120, 120, 255, 120, 120, 120, 255, 121, 121, 121, 255, 124, 124, 124, 255, 126, 126, 126, 255, 130, 130, 130, 255, 138, 138, 138, 255, 119, 119, 119, 255, 101, 101, 101, 255, 107, 107, 107, 255, 96, 96, 96, 255, 68, 68, 68, 255, 74, 74, 74, 255, 86, 86, 86, 255, 109, 109, 109, 255, 126, 126, 126, 255, 141, 141, 141, 255, 150, 150, 150, 255, 151, 151, 151, 255, 151, 151, 151, 255, 153, 153, 153, 255, 153, 153, 153, 255, 156, 156, 156, 255, 156, 156, 156, 255, 154, 154, 154, 255, 152, 152, 152, 255, 151, 151, 151, 255, 147, 147, 147, 255, 150, 150, 150, 255, 149, 149, 149, 255, 143, 143, 143, 255, 152, 152, 152, 255, 122, 122, 122, 255, 152, 152, 152, 255, 111, 111, 111, 255, 127, 127, 127, 255, 162, 162, 162, 255, 98, 98, 98, 255, 73, 73, 73, 255, 70, 70, 70, 255, 64, 64, 64, 255, 67, 67, 67, 255, 81, 81, 81, 255, 73, 73, 73, 255, 55, 55, 55, 255, 59, 59, 59, 255, 68, 68, 68, 255, 69, 69, 69, 255, 69, 69, 69, 255, 85, 85, 85, 255, 136, 136, 136, 255, 165, 165, 165, 255, 188, 188, 188, 255, 190, 190, 190, 255, 191, 191, 191, 255, 196, 196, 196, 255, 202, 202, 202, 255, 201, 201, 201, 255, 206, 206, 206, 255, 211, 211, 211, 255, 213, 213, 213, 255, 216, 216, 216, 255, 213, 213, 213, 255, 224, 224, 224, 255, 225, 225, 225, 255, 238, 238, 238, 255, 241, 241, 241, 255, 248, 248, 248, 255, 253, 253, 253, 255, 241, 241, 241, 255, 243, 243, 243, 255, 223, 223, 223, 255, 211, 211, 211, 255, 197, 197, 197, 255, 180, 180, 180, 255, 157, 157, 157, 255, 146, 146, 146, 255, 139, 139, 139, 255, 127, 127, 127, 255, 134, 134, 134, 255, 125, 125, 125, 255, 130, 130, 130, 255, 118, 118, 118, 255, 122, 122, 122, 255, 118, 118, 118, 255, 119, 119, 119, 255, 119, 119, 119, 255, 117, 117, 117, 255, 117, 117, 117, 255, 117, 117, 117, 255, 115, 115, 115, 255, 114, 114, 114, 255, 118, 118, 118, 255, 116, 116, 116, 255, 117, 117, 117, 255, 119, 119, 119, 255, 118, 118, 118, 255, 115, 115, 115, 255, 114, 114, 114, 255, 117, 117, 117, 255, 117, 117, 117, 255, 121, 121, 121, 255, 124, 124, 124, 255, 125, 125, 125, 255, 125, 125, 125, 255, 120, 120, 120, 255, 121, 121, 121, 255, 117, 117, 117, 255, 104, 104, 104, 255, 99, 99, 99, 255, 94, 94, 94, 255, 82, 82, 82, 255, 88, 88, 88, 255, 104, 104, 104, 255, 122, 122, 122, 255, 123, 123, 123, 255, 126, 126, 126, 255, 127, 127, 127, 255, 133, 133, 133, 255, 133, 133, 133, 255, 132, 132, 132, 255, 131, 131, 131, 255, 131, 131, 131, 255, 133, 133, 133, 255, 137, 137, 137, 255, 138, 138, 138, 255, 140, 140, 140, 255, 140, 140, 140, 255, 138, 138, 138, 255, 137, 137, 137, 255, 132, 132, 132, 255, 136, 136, 136, 255, 127, 127, 127, 255, 128, 128, 128, 255, 142, 142, 142, 255, 94, 94, 94, 255, 69, 69, 69, 255, 38, 38, 38, 255, 38, 38, 38, 255, 69, 69, 69, 255, 91, 91, 91, 255, 73, 73, 73, 255, 123, 123, 123, 255, 142, 142, 142, 255, 160, 160, 160, 255, 149, 149, 149, 255, 166, 166, 166, 255, 163, 163, 163, 255, 184, 184, 184, 255, 179, 179, 179, 255, 202, 202, 202, 255, 206, 206, 206, 255, 206, 206, 206, 255, 204, 204, 204, 255, 213, 213, 213, 255, 215, 215, 215, 255, 228, 228, 228, 255, 235, 235, 235, 255, 251, 251, 251, 255, 244, 244, 244, 255, 251, 251, 251, 255, 250, 250, 250, 255, 238, 238, 238, 255, 243, 243, 243, 255, 225, 225, 225, 255, 218, 218, 218, 255, 206, 206, 206, 255, 196, 196, 196, 255, 186, 186, 186, 255, 175, 175, 175, 255, 155, 155, 155, 255, 126, 126, 126, 255, 114, 114, 114, 255, 111, 111, 111, 255, 128, 128, 128, 255, 141, 141, 141, 255, 138, 138, 138, 255, 136, 136, 136, 255, 125, 125, 125, 255, 119, 119, 119, 255, 116, 116, 116, 255, 111, 111, 111, 255, 108, 108, 108, 255, 111, 111, 111, 255, 112, 112, 112, 255, 114, 114, 114, 255, 115, 115, 115, 255, 113, 113, 113, 255, 111, 111, 111, 255, 110, 110, 110, 255, 108, 108, 108, 255, 108, 108, 108, 255, 111, 111, 111, 255, 109, 109, 109, 255, 106, 106, 106, 255, 106, 106, 106, 255, 109, 109, 109, 255, 109, 109, 109, 255, 113, 113, 113, 255, 116, 116, 116, 255, 117, 117, 117, 255, 116, 116, 116, 255, 121, 121, 121, 255, 123, 123, 123, 255, 128, 128, 128, 255, 120, 120, 120, 255, 111, 111, 111, 255, 105, 105, 105, 255, 101, 101, 101, 255, 103, 103, 103, 255, 111, 111, 111, 255, 107, 107, 107, 255, 94, 94, 94, 255, 108, 108, 108, 255, 103, 103, 103, 255, 114, 114, 114, 255, 100, 100, 100, 255, 103, 103, 103, 255, 102, 102, 102, 255, 114, 114, 114, 255, 119, 119, 119, 255, 126, 126, 126, 255, 125, 125, 125, 255, 130, 130, 130, 255, 129, 129, 129, 255, 129, 129, 129, 255, 129, 129, 129, 255, 130, 130, 130, 255, 131, 131, 131, 255, 128, 128, 128, 255, 127, 127, 127, 255, 128, 128, 128, 255, 148, 148, 148, 255, 164, 164, 164, 255, 123, 123, 123, 255, 107, 107, 107, 255, 109, 109, 109, 255, 102, 102, 102, 255, 148, 148, 148, 255, 106, 106, 106, 255, 206, 206, 206, 255, 175, 175, 175, 255, 212, 212, 212, 255, 217, 217, 217, 255, 221, 221, 221, 255, 220, 220, 220, 255, 216, 216, 216, 255, 219, 219, 219, 255, 228, 228, 228, 255, 239, 239, 239, 255, 242, 242, 242, 255, 255, 255, 255, 255, 243, 243, 243, 255, 253, 253, 253, 255, 236, 236, 236, 255, 237, 237, 237, 255, 234, 234, 234, 255, 227, 227, 227, 255, 224, 224, 224, 255, 217, 217, 217, 255, 205, 205, 205, 255, 199, 199, 199, 255, 190, 190, 190, 255, 176, 176, 176, 255, 161, 161, 161, 255, 136, 136, 136, 255, 115, 115, 115, 255, 114, 114, 114, 255, 108, 108, 108, 255, 119, 119, 119, 255, 116, 116, 116, 255, 124, 124, 124, 255, 134, 134, 134, 255, 127, 127, 127, 255, 123, 123, 123, 255, 121, 121, 121, 255, 116, 116, 116, 255, 115, 115, 115, 255, 110, 110, 110, 255, 105, 105, 105, 255, 108, 108, 108, 255, 112, 112, 112, 255, 115, 115, 115, 255, 112, 112, 112, 255, 110, 110, 110, 255, 109, 109, 109, 255, 112, 112, 112, 255, 112, 112, 112, 255, 105, 105, 105, 255, 105, 105, 105, 255, 105, 105, 105, 255, 102, 102, 102, 255, 100, 100, 100, 255, 106, 106, 106, 255, 106, 106, 106, 255, 105, 105, 105, 255, 105, 105, 105, 255, 107, 107, 107, 255, 111, 111, 111, 255, 112, 112, 112, 255, 115, 115, 115, 255, 120, 120, 120, 255, 127, 127, 127, 255, 131, 131, 131, 255, 126, 126, 126, 255, 110, 110, 110, 255, 101, 101, 101, 255, 98, 98, 98, 255, 105, 105, 105, 255, 109, 109, 109, 255, 119, 119, 119, 255, 120, 120, 120, 255, 112, 112, 112, 255, 92, 92, 92, 255, 91, 91, 91, 255, 78, 78, 78, 255, 104, 104, 104, 255, 97, 97, 97, 255, 105, 105, 105, 255, 104, 104, 104, 255, 114, 114, 114, 255, 120, 120, 120, 255, 126, 126, 126, 255, 123, 123, 123, 255, 123, 123, 123, 255, 123, 123, 123, 255, 123, 123, 123, 255, 126, 126, 126, 255, 127, 127, 127, 255, 124, 124, 124, 255, 181, 181, 181, 255, 215, 215, 215, 255, 202, 202, 202, 255, 211, 211, 211, 255, 204, 204, 204, 255, 198, 198, 198, 255, 222, 222, 222, 255, 201, 201, 201, 255, 233, 233, 233, 255, 207, 207, 207, 255, 228, 228, 228, 255, 227, 227, 227, 255, 237, 237, 237, 255, 238, 238, 238, 255, 251, 251, 251, 255, 240, 240, 240, 255, 249, 249, 249, 255, 235, 235, 235, 255, 233, 233, 233, 255, 230, 230, 230, 255, 227, 227, 227, 255, 227, 227, 227, 255, 226, 226, 226, 255, 221, 221, 221, 255, 216, 216, 216, 255, 206, 206, 206, 255, 191, 191, 191, 255, 177, 177, 177, 255, 166, 166, 166, 255, 146, 146, 146, 255, 129, 129, 129, 255, 111, 111, 111, 255, 116, 116, 116, 255, 108, 108, 108, 255, 119, 119, 119, 255, 123, 123, 123, 255, 118, 118, 118, 255, 125, 125, 125, 255, 132, 132, 132, 255, 132, 132, 132, 255, 122, 122, 122, 255, 112, 112, 112, 255, 108, 108, 108, 255, 104, 104, 104, 255, 107, 107, 107, 255, 105, 105, 105, 255, 101, 101, 101, 255, 106, 106, 106, 255, 110, 110, 110, 255, 111, 111, 111, 255, 108, 108, 108, 255, 103, 103, 103, 255, 99, 99, 99, 255, 97, 97, 97, 255, 98, 98, 98, 255, 103, 103, 103, 255, 99, 99, 99, 255, 94, 94, 94, 255, 97, 97, 97, 255, 105, 105, 105, 255, 107, 107, 107, 255, 98, 98, 98, 255, 101, 101, 101, 255, 104, 104, 104, 255, 105, 105, 105, 255, 104, 104, 104, 255, 112, 112, 112, 255, 110, 110, 110, 255, 110, 110, 110, 255, 112, 112, 112, 255, 122, 122, 122, 255, 130, 130, 130, 255, 125, 125, 125, 255, 123, 123, 123, 255, 108, 108, 108, 255, 98, 98, 98, 255, 94, 94, 94, 255, 96, 96, 96, 255, 104, 104, 104, 255, 110, 110, 110, 255, 111, 111, 111, 255, 113, 113, 113, 255, 109, 109, 109, 255, 98, 98, 98, 255, 82, 82, 82, 255, 71, 71, 71, 255, 73, 73, 73, 255, 91, 91, 91, 255, 89, 89, 89, 255, 100, 100, 100, 255, 95, 95, 95, 255, 99, 99, 99, 255, 108, 108, 108, 255, 114, 114, 114, 255, 120, 120, 120, 255, 119, 119, 119, 255, 115, 115, 115, 255, 114, 114, 114, 255, 180, 180, 180, 255, 207, 207, 207, 255, 215, 215, 215, 255, 208, 208, 208, 255, 211, 211, 211, 255, 220, 220, 220, 255, 227, 227, 227, 255, 237, 237, 237, 255, 242, 242, 242, 255, 248, 248, 248, 255, 246, 246, 246, 255, 241, 241, 241, 255, 238, 238, 238, 255, 228, 228, 228, 255, 232, 232, 232, 255, 233, 233, 233, 255, 230, 230, 230, 255, 229, 229, 229, 255, 227, 227, 227, 255, 223, 223, 223, 255, 217, 217, 217, 255, 210, 210, 210, 255, 198, 198, 198, 255, 187, 187, 187, 255, 172, 172, 172, 255, 149, 149, 149, 255, 129, 129, 129, 255, 118, 118, 118, 255, 99, 99, 99, 255, 116, 116, 116, 255, 113, 113, 113, 255, 120, 120, 120, 255, 118, 118, 118, 255, 115, 115, 115, 255, 116, 116, 116, 255, 131, 131, 131, 255, 136, 136, 136, 255, 128, 128, 128, 255, 121, 121, 121, 255, 113, 113, 113, 255, 113, 113, 113, 255, 107, 107, 107, 255, 97, 97, 97, 255, 91, 91, 91, 255, 94, 94, 94, 255, 96, 96, 96, 255, 97, 97, 97, 255, 102, 102, 102, 255, 108, 108, 108, 255, 103, 103, 103, 255, 91, 91, 91, 255, 95, 95, 95, 255, 91, 91, 91, 255, 90, 90, 90, 255, 92, 92, 92, 255, 89, 89, 89, 255, 96, 96, 96, 255, 93, 93, 93, 255, 94, 94, 94, 255, 102, 102, 102, 255, 106, 106, 106, 255, 104, 104, 104, 255, 103, 103, 103, 255, 105, 105, 105, 255, 106, 106, 106, 255, 107, 107, 107, 255, 110, 110, 110, 255, 109, 109, 109, 255, 110, 110, 110, 255, 110, 110, 110, 255, 117, 117, 117, 255, 123, 123, 123, 255, 129, 129, 129, 255, 127, 127, 127, 255, 116, 116, 116, 255, 107, 107, 107, 255, 104, 104, 104, 255, 101, 101, 101, 255, 97, 97, 97, 255, 88, 88, 88, 255, 96, 96, 96, 255, 100, 100, 100, 255, 104, 104, 104, 255, 105, 105, 105, 255, 106, 106, 106, 255, 105, 105, 105, 255, 94, 94, 94, 255, 79, 79, 79, 255, 62, 62, 62, 255, 65, 65, 65, 255, 62, 62, 62, 255, 88, 88, 88, 255, 92, 92, 92, 255, 90, 90, 90, 255, 89, 89, 89, 255, 97, 97, 97, 255, 101, 101, 101, 255, 114, 114, 114, 255, 192, 192, 192, 255, 226, 226, 226, 255, 233, 233, 233, 255, 249, 249, 249, 255, 237, 237, 237, 255, 251, 251, 251, 255, 237, 237, 237, 255, 239, 239, 239, 255, 229, 229, 229, 255, 228, 228, 228, 255, 228, 228, 228, 255, 225, 225, 225, 255, 220, 220, 220, 255, 227, 227, 227, 255, 231, 231, 231, 255, 227, 227, 227, 255, 223, 223, 223, 255, 216, 216, 216, 255, 208, 208, 208, 255, 196, 196, 196, 255, 183, 183, 183, 255, 172, 172, 172, 255, 146, 146, 146, 255, 117, 117, 117, 255, 106, 106, 106, 255, 95, 95, 95, 255, 107, 107, 107, 255, 109, 109, 109, 255, 121, 121, 121, 255, 118, 118, 118, 255, 115, 115, 115, 255, 105, 105, 105, 255, 118, 118, 118, 255, 135, 135, 135, 255, 137, 137, 137, 255, 126, 126, 126, 255, 122, 122, 122, 255, 120, 120, 120, 255, 116, 116, 116, 255, 113, 113, 113, 255, 110, 110, 110, 255, 105, 105, 105, 255, 96, 96, 96, 255, 91, 91, 91, 255, 98, 98, 98, 255, 94, 94, 94, 255, 95, 95, 95, 255, 104, 104, 104, 255, 97, 97, 97, 255, 96, 96, 96, 255, 97, 97, 97, 255, 94, 94, 94, 255, 101, 101, 101, 255, 96, 96, 96, 255, 92, 92, 92, 255, 95, 95, 95, 255, 95, 95, 95, 255, 95, 95, 95, 255, 96, 96, 96, 255, 98, 98, 98, 255, 99, 99, 99, 255, 103, 103, 103, 255, 112, 112, 112, 255, 109, 109, 109, 255, 111, 111, 111, 255, 108, 108, 108, 255, 106, 106, 106, 255, 104, 104, 104, 255, 102, 102, 102, 255, 103, 103, 103, 255, 105, 105, 105, 255, 111, 111, 111, 255, 114, 114, 114, 255, 119, 119, 119, 255, 129, 129, 129, 255, 129, 129, 129, 255, 118, 118, 118, 255, 108, 108, 108, 255, 102, 102, 102, 255, 101, 101, 101, 255, 98, 98, 98, 255, 90, 90, 90, 255, 92, 92, 92, 255, 96, 96, 96, 255, 98, 98, 98, 255, 98, 98, 98, 255, 97, 97, 97, 255, 98, 98, 98, 255, 93, 93, 93, 255, 87, 87, 87, 255, 74, 74, 74, 255, 60, 60, 60, 255, 50, 50, 50, 255, 47, 47, 47, 255, 77, 77, 77, 255, 74, 74, 74, 255, 99, 99, 99, 255, 98, 98, 98, 255, 231, 231, 231, 255, 240, 240, 240, 255, 224, 224, 224, 255, 229, 229, 229, 255, 222, 222, 222, 255, 229, 229, 229, 255, 228, 228, 228, 255, 227, 227, 227, 255, 224, 224, 224, 255, 223, 223, 223, 255, 224, 224, 224, 255, 223, 223, 223, 255, 227, 227, 227, 255, 222, 222, 222, 255, 215, 215, 215, 255, 201, 201, 201, 255, 192, 192, 192, 255, 177, 177, 177, 255, 162, 162, 162, 255, 138, 138, 138, 255, 119, 119, 119, 255, 108, 108, 108, 255, 103, 103, 103, 255, 122, 122, 122, 255, 117, 117, 117, 255, 107, 107, 107, 255, 116, 116, 116, 255, 117, 117, 117, 255, 109, 109, 109, 255, 119, 119, 119, 255, 122, 122, 122, 255, 132, 132, 132, 255, 129, 129, 129, 255, 116, 116, 116, 255, 116, 116, 116, 255, 121, 121, 121, 255, 121, 121, 121, 255, 117, 117, 117, 255, 111, 111, 111, 255, 107, 107, 107, 255, 98, 98, 98, 255, 101, 101, 101, 255, 105, 105, 105, 255, 107, 107, 107, 255, 93, 93, 93, 255, 93, 93, 93, 255, 96, 96, 96, 255, 93, 93, 93, 255, 85, 85, 85, 255, 96, 96, 96, 255, 101, 101, 101, 255, 97, 97, 97, 255, 97, 97, 97, 255, 94, 94, 94, 255, 93, 93, 93, 255, 97, 97, 97, 255, 94, 94, 94, 255, 100, 100, 100, 255, 97, 97, 97, 255, 95, 95, 95, 255, 96, 96, 96, 255, 101, 101, 101, 255, 103, 103, 103, 255, 97, 97, 97, 255, 101, 101, 101, 255, 102, 102, 102, 255, 107, 107, 107, 255, 97, 97, 97, 255, 96, 96, 96, 255, 99, 99, 99, 255, 100, 100, 100, 255, 101, 101, 101, 255, 104, 104, 104, 255, 113, 113, 113, 255, 118, 118, 118, 255, 125, 125, 125, 255, 133, 133, 133, 255, 120, 120, 120, 255, 102, 102, 102, 255, 100, 100, 100, 255, 102, 102, 102, 255, 102, 102, 102, 255, 98, 98, 98, 255, 87, 87, 87, 255, 82, 82, 82, 255, 91, 91, 91, 255, 96, 96, 96, 255, 94, 94, 94, 255, 93, 93, 93, 255, 88, 88, 88, 255, 86, 86, 86, 255, 82, 82, 82, 255, 79, 79, 79, 255, 72, 72, 72, 255, 58, 58, 58, 255, 42, 42, 42, 255, 41, 41, 41, 255, 34, 34, 34, 255, 222, 222, 222, 255, 223, 223, 223, 255, 223, 223, 223, 255, 226, 226, 226, 255, 229, 229, 229, 255, 228, 228, 228, 255, 225, 225, 225, 255, 221, 221, 221, 255, 219, 219, 219, 255, 217, 217, 217, 255, 216, 216, 216, 255, 211, 211, 211, 255, 205, 205, 205, 255, 191, 191, 191, 255, 171, 171, 171, 255, 154, 154, 154, 255, 125, 125, 125, 255, 114, 114, 114, 255, 112, 112, 112, 255, 110, 110, 110, 255, 124, 124, 124, 255, 117, 117, 117, 255, 110, 110, 110, 255, 110, 110, 110, 255, 114, 114, 114, 255, 117, 117, 117, 255, 117, 117, 117, 255, 133, 133, 133, 255, 145, 145, 145, 255, 131, 131, 131, 255, 118, 118, 118, 255, 113, 113, 113, 255, 108, 108, 108, 255, 116, 116, 116, 255, 122, 122, 122, 255, 120, 120, 120, 255, 115, 115, 115, 255, 100, 100, 100, 255, 96, 96, 96, 255, 94, 94, 94, 255, 91, 91, 91, 255, 95, 95, 95, 255, 92, 92, 92, 255, 91, 91, 91, 255, 88, 88, 88, 255, 87, 87, 87, 255, 86, 86, 86, 255, 82, 82, 82, 255, 81, 81, 81, 255, 90, 90, 90, 255, 96, 96, 96, 255, 103, 103, 103, 255, 100, 100, 100, 255, 96, 96, 96, 255, 97, 97, 97, 255, 98, 98, 98, 255, 97, 97, 97, 255, 102, 102, 102, 255, 110, 110, 110, 255, 111, 111, 111, 255, 103, 103, 103, 255, 97, 97, 97, 255, 93, 93, 93, 255, 95, 95, 95, 255, 103, 103, 103, 255, 106, 106, 106, 255, 104, 104, 104, 255, 103, 103, 103, 255, 107, 107, 107, 255, 103, 103, 103, 255, 109, 109, 109, 255, 99, 99, 99, 255, 103, 103, 103, 255, 102, 102, 102, 255, 99, 99, 99, 255, 112, 112, 112, 255, 120, 120, 120, 255, 128, 128, 128, 255, 122, 122, 122, 255, 107, 107, 107, 255, 98, 98, 98, 255, 103, 103, 103, 255, 101, 101, 101, 255, 102, 102, 102, 255, 96, 96, 96, 255, 92, 92, 92, 255, 87, 87, 87, 255, 85, 85, 85, 255, 90, 90, 90, 255, 90, 90, 90, 255, 93, 93, 93, 255, 90, 90, 90, 255, 86, 86, 86, 255, 83, 83, 83, 255, 77, 77, 77, 255, 75, 75, 75, 255, 66, 66, 66, 255, 53, 53, 53, 255, 225, 225, 225, 255, 222, 222, 222, 255, 221, 221, 221, 255, 224, 224, 224, 255, 225, 225, 225, 255, 222, 222, 222, 255, 222, 222, 222, 255, 221, 221, 221, 255, 209, 209, 209, 255, 203, 203, 203, 255, 189, 189, 189, 255, 175, 175, 175, 255, 153, 153, 153, 255, 127, 127, 127, 255, 102, 102, 102, 255, 100, 100, 100, 255, 113, 113, 113, 255, 123, 123, 123, 255, 124, 124, 124, 255, 121, 121, 121, 255, 114, 114, 114, 255, 102, 102, 102, 255, 99, 99, 99, 255, 101, 101, 101, 255, 117, 117, 117, 255, 144, 144, 144, 255, 150, 150, 150, 255, 135, 135, 135, 255, 112, 112, 112, 255, 111, 111, 111, 255, 107, 107, 107, 255, 111, 111, 111, 255, 120, 120, 120, 255, 125, 125, 125, 255, 116, 116, 116, 255, 112, 112, 112, 255, 101, 101, 101, 255, 94, 94, 94, 255, 93, 93, 93, 255, 91, 91, 91, 255, 85, 85, 85, 255, 82, 82, 82, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 85, 85, 85, 255, 85, 85, 85, 255, 76, 76, 76, 255, 81, 81, 81, 255, 82, 82, 82, 255, 79, 79, 79, 255, 81, 81, 81, 255, 88, 88, 88, 255, 95, 95, 95, 255, 100, 100, 100, 255, 104, 104, 104, 255, 102, 102, 102, 255, 105, 105, 105, 255, 106, 106, 106, 255, 92, 92, 92, 255, 105, 105, 105, 255, 101, 101, 101, 255, 105, 105, 105, 255, 104, 104, 104, 255, 103, 103, 103, 255, 104, 104, 104, 255, 99, 99, 99, 255, 100, 100, 100, 255, 100, 100, 100, 255, 97, 97, 97, 255, 104, 104, 104, 255, 104, 104, 104, 255, 104, 104, 104, 255, 101, 101, 101, 255, 96, 96, 96, 255, 87, 87, 87, 255, 87, 87, 87, 255, 98, 98, 98, 255, 112, 112, 112, 255, 117, 117, 117, 255, 121, 121, 121, 255, 104, 104, 104, 255, 104, 104, 104, 255, 100, 100, 100, 255, 99, 99, 99, 255, 98, 98, 98, 255, 98, 98, 98, 255, 90, 90, 90, 255, 81, 81, 81, 255, 82, 82, 82, 255, 88, 88, 88, 255, 89, 89, 89, 255, 88, 88, 88, 255, 87, 87, 87, 255, 80, 80, 80, 255, 74, 74, 74, 255, 72, 72, 72, 255, 69, 69, 69, 255, 228, 228, 228, 255, 224, 224, 224, 255, 222, 222, 222, 255, 224, 224, 224, 255, 224, 224, 224, 255, 222, 222, 222, 255, 211, 211, 211, 255, 194, 194, 194, 255, 180, 180, 180, 255, 161, 161, 161, 255, 136, 136, 136, 255, 102, 102, 102, 255, 95, 95, 95, 255, 96, 96, 96, 255, 108, 108, 108, 255, 113, 113, 113, 255, 118, 118, 118, 255, 119, 119, 119, 255, 116, 116, 116, 255, 103, 103, 103, 255, 89, 89, 89, 255, 88, 88, 88, 255, 112, 112, 112, 255, 138, 138, 138, 255, 142, 142, 142, 255, 132, 132, 132, 255, 121, 121, 121, 255, 107, 107, 107, 255, 107, 107, 107, 255, 98, 98, 98, 255, 105, 105, 105, 255, 114, 114, 114, 255, 116, 116, 116, 255, 111, 111, 111, 255, 107, 107, 107, 255, 105, 105, 105, 255, 86, 86, 86, 255, 96, 96, 96, 255, 102, 102, 102, 255, 91, 91, 91, 255, 82, 82, 82, 255, 87, 87, 87, 255, 87, 87, 87, 255, 87, 87, 87, 255, 88, 88, 88, 255, 80, 80, 80, 255, 78, 78, 78, 255, 88, 88, 88, 255, 89, 89, 89, 255, 78, 78, 78, 255, 77, 77, 77, 255, 74, 74, 74, 255, 89, 89, 89, 255, 91, 91, 91, 255, 102, 102, 102, 255, 98, 98, 98, 255, 104, 104, 104, 255, 97, 97, 97, 255, 80, 80, 80, 255, 73, 73, 73, 255, 88, 88, 88, 255, 87, 87, 87, 255, 104, 104, 104, 255, 109, 109, 109, 255, 99, 99, 99, 255, 99, 99, 99, 255, 91, 91, 91, 255, 105, 105, 105, 255, 112, 112, 112, 255, 106, 106, 106, 255, 114, 114, 114, 255, 119, 119, 119, 255, 112, 112, 112, 255, 99, 99, 99, 255, 91, 91, 91, 255, 83, 83, 83, 255, 77, 77, 77, 255, 84, 84, 84, 255, 97, 97, 97, 255, 103, 103, 103, 255, 111, 111, 111, 255, 115, 115, 115, 255, 119, 119, 119, 255, 108, 108, 108, 255, 103, 103, 103, 255, 98, 98, 98, 255, 98, 98, 98, 255, 98, 98, 98, 255, 96, 96, 96, 255, 90, 90, 90, 255, 85, 85, 85, 255, 80, 80, 80, 255, 87, 87, 87, 255, 85, 85, 85, 255, 87, 87, 87, 255, 81, 81, 81, 255, 80, 80, 80, 255, 76, 76, 76, 255, 227, 227, 227, 255, 223, 223, 223, 255, 218, 218, 218, 255, 211, 211, 211, 255, 203, 203, 203, 255, 189, 189, 189, 255, 167, 167, 167, 255, 134, 134, 134, 255, 111, 111, 111, 255, 102, 102, 102, 255, 91, 91, 91, 255, 120, 120, 120, 255, 123, 123, 123, 255, 125, 125, 125, 255, 120, 120, 120, 255, 119, 119, 119, 255, 110, 110, 110, 255, 90, 90, 90, 255, 74, 74, 74, 255, 79, 79, 79, 255, 108, 108, 108, 255, 136, 136, 136, 255, 134, 134, 134, 255, 113, 113, 113, 255, 110, 110, 110, 255, 111, 111, 111, 255, 108, 108, 108, 255, 103, 103, 103, 255, 96, 96, 96, 255, 95, 95, 95, 255, 104, 104, 104, 255, 104, 104, 104, 255, 102, 102, 102, 255, 99, 99, 99, 255, 99, 99, 99, 255, 88, 88, 88, 255, 100, 100, 100, 255, 114, 114, 114, 255, 105, 105, 105, 255, 104, 104, 104, 255, 94, 94, 94, 255, 86, 86, 86, 255, 82, 82, 82, 255, 93, 93, 93, 255, 99, 99, 99, 255, 92, 92, 92, 255, 90, 90, 90, 255, 90, 90, 90, 255, 87, 87, 87, 255, 86, 86, 86, 255, 78, 78, 78, 255, 79, 79, 79, 255, 89, 89, 89, 255, 76, 76, 76, 255, 93, 93, 93, 255, 103, 103, 103, 255, 101, 101, 101, 255, 81, 81, 81, 255, 85, 85, 85, 255, 93, 93, 93, 255, 74, 74, 74, 255, 99, 99, 99, 255, 95, 95, 95, 255, 104, 104, 104, 255, 115, 115, 115, 255, 93, 93, 93, 255, 87, 87, 87, 255, 88, 88, 88, 255, 96, 96, 96, 255, 108, 108, 108, 255, 107, 107, 107, 255, 103, 103, 103, 255, 105, 105, 105, 255, 92, 92, 92, 255, 88, 88, 88, 255, 91, 91, 91, 255, 90, 90, 90, 255, 85, 85, 85, 255, 86, 86, 86, 255, 94, 94, 94, 255, 103, 103, 103, 255, 101, 101, 101, 255, 109, 109, 109, 255, 116, 116, 116, 255, 123, 123, 123, 255, 106, 106, 106, 255, 104, 104, 104, 255, 100, 100, 100, 255, 94, 94, 94, 255, 101, 101, 101, 255, 102, 102, 102, 255, 97, 97, 97, 255, 92, 92, 92, 255, 87, 87, 87, 255, 82, 82, 82, 255, 83, 83, 83, 255, 83, 83, 83, 255, 85, 85, 85, 255, 213, 213, 213, 255, 199, 199, 199, 255, 185, 185, 185, 255, 162, 162, 162, 255, 141, 141, 141, 255, 114, 114, 114, 255, 100, 100, 100, 255, 109, 109, 109, 255, 108, 108, 108, 255, 107, 107, 107, 255, 110, 110, 110, 255, 117, 117, 117, 255, 116, 116, 116, 255, 120, 120, 120, 255, 110, 110, 110, 255, 88, 88, 88, 255, 74, 74, 74, 255, 78, 78, 78, 255, 101, 101, 101, 255, 131, 131, 131, 255, 114, 114, 114, 255, 94, 94, 94, 255, 92, 92, 92, 255, 110, 110, 110, 255, 106, 106, 106, 255, 98, 98, 98, 255, 99, 99, 99, 255, 101, 101, 101, 255, 95, 95, 95, 255, 94, 94, 94, 255, 101, 101, 101, 255, 105, 105, 105, 255, 95, 95, 95, 255, 96, 96, 96, 255, 95, 95, 95, 255, 99, 99, 99, 255, 111, 111, 111, 255, 91, 91, 91, 255, 97, 97, 97, 255, 88, 88, 88, 255, 80, 80, 80, 255, 76, 76, 76, 255, 77, 77, 77, 255, 89, 89, 89, 255, 90, 90, 90, 255, 95, 95, 95, 255, 91, 91, 91, 255, 97, 97, 97, 255, 102, 102, 102, 255, 98, 98, 98, 255, 106, 106, 106, 255, 90, 90, 90, 255, 77, 77, 77, 255, 74, 74, 74, 255, 84, 84, 84, 255, 89, 89, 89, 255, 79, 79, 79, 255, 86, 86, 86, 255, 92, 92, 92, 255, 84, 84, 84, 255, 71, 71, 71, 255, 88, 88, 88, 255, 86, 86, 86, 255, 106, 106, 106, 255, 89, 89, 89, 255, 81, 81, 81, 255, 91, 91, 91, 255, 108, 108, 108, 255, 93, 93, 93, 255, 107, 107, 107, 255, 102, 102, 102, 255, 104, 104, 104, 255, 93, 93, 93, 255, 85, 85, 85, 255, 82, 82, 82, 255, 91, 91, 91, 255, 98, 98, 98, 255, 95, 95, 95, 255, 92, 92, 92, 255, 88, 88, 88, 255, 91, 91, 91, 255, 94, 94, 94, 255, 96, 96, 96, 255, 99, 99, 99, 255, 108, 108, 108, 255, 128, 128, 128, 255, 112, 112, 112, 255, 98, 98, 98, 255, 99, 99, 99, 255, 95, 95, 95, 255, 94, 94, 94, 255, 99, 99, 99, 255, 102, 102, 102, 255, 99, 99, 99, 255, 88, 88, 88, 255, 87, 87, 87, 255, 86, 86, 86, 255, 87, 87, 87, 255, 167, 167, 167, 255, 138, 138, 138, 255, 105, 105, 105, 255, 102, 102, 102, 255, 99, 99, 99, 255, 98, 98, 98, 255, 104, 104, 104, 255, 108, 108, 108, 255, 116, 116, 116, 255, 115, 115, 115, 255, 121, 121, 121, 255, 116, 116, 116, 255, 101, 101, 101, 255, 77, 77, 77, 255, 72, 72, 72, 255, 77, 77, 77, 255, 110, 110, 110, 255, 145, 145, 145, 255, 129, 129, 129, 255, 76, 76, 76, 255, 79, 79, 79, 255, 87, 87, 87, 255, 101, 101, 101, 255, 98, 98, 98, 255, 96, 96, 96, 255, 96, 96, 96, 255, 92, 92, 92, 255, 91, 91, 91, 255, 98, 98, 98, 255, 105, 105, 105, 255, 105, 105, 105, 255, 103, 103, 103, 255, 91, 91, 91, 255, 109, 109, 109, 255, 100, 100, 100, 255, 91, 91, 91, 255, 88, 88, 88, 255, 84, 84, 84, 255, 95, 95, 95, 255, 77, 77, 77, 255, 86, 86, 86, 255, 67, 67, 67, 255, 75, 75, 75, 255, 76, 76, 76, 255, 67, 67, 67, 255, 77, 77, 77, 255, 92, 92, 92, 255, 101, 101, 101, 255, 85, 85, 85, 255, 92, 92, 92, 255, 91, 91, 91, 255, 77, 77, 77, 255, 78, 78, 78, 255, 79, 79, 79, 255, 69, 69, 69, 255, 69, 69, 69, 255, 86, 86, 86, 255, 95, 95, 95, 255, 90, 90, 90, 255, 86, 86, 86, 255, 78, 78, 78, 255, 83, 83, 83, 255, 91, 91, 91, 255, 89, 89, 89, 255, 82, 82, 82, 255, 93, 93, 93, 255, 97, 97, 97, 255, 100, 100, 100, 255, 105, 105, 105, 255, 105, 105, 105, 255, 107, 107, 107, 255, 103, 103, 103, 255, 90, 90, 90, 255, 83, 83, 83, 255, 90, 90, 90, 255, 93, 93, 93, 255, 101, 101, 101, 255, 97, 97, 97, 255, 91, 91, 91, 255, 86, 86, 86, 255, 84, 84, 84, 255, 84, 84, 84, 255, 84, 84, 84, 255, 89, 89, 89, 255, 94, 94, 94, 255, 97, 97, 97, 255, 117, 117, 117, 255, 114, 114, 114, 255, 99, 99, 99, 255, 95, 95, 95, 255, 104, 104, 104, 255, 92, 92, 92, 255, 86, 86, 86, 255, 93, 93, 93, 255, 108, 108, 108, 255, 103, 103, 103, 255, 98, 98, 98, 255, 90, 90, 90, 255, 88, 88, 88, 255, 88, 88, 88, 255, 102, 102, 102, 255, 101, 101, 101, 255, 98, 98, 98, 255, 108, 108, 108, 255, 114, 114, 114, 255, 120, 120, 120, 255, 121, 121, 121, 255, 113, 113, 113, 255, 93, 93, 93, 255, 71, 71, 71, 255, 66, 66, 66, 255, 83, 83, 83, 255, 108, 108, 108, 255, 150, 150, 150, 255, 143, 143, 143, 255, 104, 104, 104, 255, 101, 101, 101, 255, 113, 113, 113, 255, 97, 97, 97, 255, 104, 104, 104, 255, 101, 101, 101, 255, 97, 97, 97, 255, 88, 88, 88, 255, 84, 84, 84, 255, 88, 88, 88, 255, 101, 101, 101, 255, 115, 115, 115, 255, 96, 96, 96, 255, 98, 98, 98, 255, 93, 93, 93, 255, 109, 109, 109, 255, 98, 98, 98, 255, 93, 93, 93, 255, 86, 86, 86, 255, 80, 80, 80, 255, 82, 82, 82, 255, 78, 78, 78, 255, 74, 74, 74, 255, 65, 65, 65, 255, 58, 58, 58, 255, 71, 71, 71, 255, 61, 61, 61, 255, 68, 68, 68, 255, 81, 81, 81, 255, 91, 91, 91, 255, 82, 82, 82, 255, 78, 78, 78, 255, 82, 82, 82, 255, 71, 71, 71, 255, 85, 85, 85, 255, 80, 80, 80, 255, 81, 81, 81, 255, 83, 83, 83, 255, 82, 82, 82, 255, 85, 85, 85, 255, 83, 83, 83, 255, 65, 65, 65, 255, 82, 82, 82, 255, 77, 77, 77, 255, 83, 83, 83, 255, 82, 82, 82, 255, 78, 78, 78, 255, 91, 91, 91, 255, 114, 114, 114, 255, 93, 93, 93, 255, 102, 102, 102, 255, 96, 96, 96, 255, 104, 104, 104, 255, 106, 106, 106, 255, 99, 99, 99, 255, 96, 96, 96, 255, 84, 84, 84, 255, 90, 90, 90, 255, 88, 88, 88, 255, 92, 92, 92, 255, 97, 97, 97, 255, 97, 97, 97, 255, 84, 84, 84, 255, 83, 83, 83, 255, 83, 83, 83, 255, 86, 86, 86, 255, 87, 87, 87, 255, 89, 89, 89, 255, 91, 91, 91, 255, 89, 89, 89, 255, 96, 96, 96, 255, 115, 115, 115, 255, 121, 121, 121, 255, 106, 106, 106, 255, 90, 90, 90, 255, 84, 84, 84, 255, 83, 83, 83, 255, 91, 91, 91, 255, 105, 105, 105, 255, 107, 107, 107, 255, 101, 101, 101, 255, 96, 96, 96, 255, 100, 100, 100, 255, 97, 97, 97, 255, 103, 103, 103, 255, 112, 112, 112, 255, 121, 121, 121, 255, 121, 121, 121, 255, 114, 114, 114, 255, 87, 87, 87, 255, 70, 70, 70, 255, 59, 59, 59, 255, 79, 79, 79, 255, 115, 115, 115, 255, 138, 138, 138, 255, 133, 133, 133, 255, 112, 112, 112, 255, 109, 109, 109, 255, 128, 128, 128, 255, 118, 118, 118, 255, 113, 113, 113, 255, 110, 110, 110, 255, 96, 96, 96, 255, 94, 94, 94, 255, 85, 85, 85, 255, 86, 86, 86, 255, 94, 94, 94, 255, 98, 98, 98, 255, 95, 95, 95, 255, 86, 86, 86, 255, 89, 89, 89, 255, 89, 89, 89, 255, 95, 95, 95, 255, 100, 100, 100, 255, 97, 97, 97, 255, 111, 111, 111, 255, 96, 96, 96, 255, 102, 102, 102, 255, 95, 95, 95, 255, 91, 91, 91, 255, 80, 80, 80, 255, 77, 77, 77, 255, 70, 70, 70, 255, 72, 72, 72, 255, 64, 64, 64, 255, 62, 62, 62, 255, 83, 83, 83, 255, 89, 89, 89, 255, 67, 67, 67, 255, 84, 84, 84, 255, 73, 73, 73, 255, 70, 70, 70, 255, 86, 86, 86, 255, 71, 71, 71, 255, 81, 81, 81, 255, 76, 76, 76, 255, 87, 87, 87, 255, 77, 77, 77, 255, 82, 82, 82, 255, 74, 74, 74, 255, 84, 84, 84, 255, 85, 85, 85, 255, 87, 87, 87, 255, 83, 83, 83, 255, 65, 65, 65, 255, 86, 86, 86, 255, 79, 79, 79, 255, 91, 91, 91, 255, 101, 101, 101, 255, 98, 98, 98, 255, 97, 97, 97, 255, 101, 101, 101, 255, 90, 90, 90, 255, 84, 84, 84, 255, 80, 80, 80, 255, 92, 92, 92, 255, 89, 89, 89, 255, 87, 87, 87, 255, 89, 89, 89, 255, 92, 92, 92, 255, 91, 91, 91, 255, 83, 83, 83, 255, 88, 88, 88, 255, 87, 87, 87, 255, 89, 89, 89, 255, 88, 88, 88, 255, 88, 88, 88, 255, 95, 95, 95, 255, 100, 100, 100, 255, 102, 102, 102, 255, 111, 111, 111, 255, 123, 123, 123, 255, 125, 125, 125, 255, 105, 105, 105, 255, 79, 79, 79, 255, 74, 74, 74, 255, 83, 83, 83, 255, 99, 99, 99, 255, 105, 105, 105, 255, 96, 96, 96, 255, 100, 100, 100, 255, 106, 106, 106, 255, 117, 117, 117, 255, 121, 121, 121, 255, 112, 112, 112, 255, 85, 85, 85, 255, 68, 68, 68, 255, 67, 67, 67, 255, 87, 87, 87, 255, 121, 121, 121, 255, 143, 143, 143, 255, 130, 130, 130, 255, 107, 107, 107, 255, 111, 111, 111, 255, 107, 107, 107, 255, 111, 111, 111, 255, 114, 114, 114, 255, 111, 111, 111, 255, 115, 115, 115, 255, 94, 94, 94, 255, 103, 103, 103, 255, 96, 96, 96, 255, 85, 85, 85, 255, 98, 98, 98, 255, 87, 87, 87, 255, 92, 92, 92, 255, 85, 85, 85, 255, 75, 75, 75, 255, 75, 75, 75, 255, 81, 81, 81, 255, 89, 89, 89, 255, 94, 94, 94, 255, 108, 108, 108, 255, 103, 103, 103, 255, 91, 91, 91, 255, 105, 105, 105, 255, 91, 91, 91, 255, 74, 74, 74, 255, 82, 82, 82, 255, 82, 82, 82, 255, 70, 70, 70, 255, 65, 65, 65, 255, 43, 43, 43, 255, 60, 60, 60, 255, 75, 75, 75, 255, 68, 68, 68, 255, 68, 68, 68, 255, 83, 83, 83, 255, 81, 81, 81, 255, 98, 98, 98, 255, 69, 69, 69, 255, 70, 70, 70, 255, 73, 73, 73, 255, 73, 73, 73, 255, 75, 75, 75, 255, 70, 70, 70, 255, 83, 83, 83, 255, 83, 83, 83, 255, 91, 91, 91, 255, 79, 79, 79, 255, 82, 82, 82, 255, 85, 85, 85, 255, 88, 88, 88, 255, 85, 85, 85, 255, 89, 89, 89, 255, 87, 87, 87, 255, 88, 88, 88, 255, 85, 85, 85, 255, 93, 93, 93, 255, 97, 97, 97, 255, 92, 92, 92, 255, 88, 88, 88, 255, 87, 87, 87, 255, 82, 82, 82, 255, 96, 96, 96, 255, 96, 96, 96, 255, 87, 87, 87, 255, 84, 84, 84, 255, 85, 85, 85, 255, 78, 78, 78, 255, 86, 86, 86, 255, 95, 95, 95, 255, 98, 98, 98, 255, 96, 96, 96, 255, 88, 88, 88, 255, 85, 85, 85, 255, 92, 92, 92, 255, 93, 93, 93, 255, 97, 97, 97, 255, 110, 110, 110, 255, 125, 125, 125, 255, 136, 136, 136, 255, 122, 122, 122, 255, 102, 102, 102, 255, 81, 81, 81, 255, 75, 75, 75, 255, 87, 87, 87, 255, 96, 96, 96, 255, 104, 104, 104, 255, 118, 118, 118, 255, 109, 109, 109, 255, 82, 82, 82, 255, 58, 58, 58, 255, 69, 69, 69, 255, 91, 91, 91, 255, 123, 123, 123, 255, 147, 147, 147, 255, 134, 134, 134, 255, 113, 113, 113, 255, 111, 111, 111, 255, 114, 114, 114, 255, 103, 103, 103, 255, 94, 94, 94, 255, 103, 103, 103, 255, 100, 100, 100, 255, 99, 99, 99, 255, 97, 97, 97, 255, 105, 105, 105, 255, 105, 105, 105, 255, 89, 89, 89, 255, 100, 100, 100, 255, 92, 92, 92, 255, 88, 88, 88, 255, 89, 89, 89, 255, 78, 78, 78, 255, 73, 73, 73, 255, 75, 75, 75, 255, 83, 83, 83, 255, 88, 88, 88, 255, 102, 102, 102, 255, 99, 99, 99, 255, 81, 81, 81, 255, 99, 99, 99, 255, 97, 97, 97, 255, 69, 69, 69, 255, 74, 74, 74, 255, 68, 68, 68, 255, 74, 74, 74, 255, 72, 72, 72, 255, 71, 71, 71, 255, 75, 75, 75, 255, 74, 74, 74, 255, 71, 71, 71, 255, 56, 56, 56, 255, 77, 77, 77, 255, 74, 74, 74, 255, 96, 96, 96, 255, 79, 79, 79, 255, 61, 61, 61, 255, 48, 48, 48, 255, 58, 58, 58, 255, 91, 91, 91, 255, 75, 75, 75, 255, 80, 80, 80, 255, 85, 85, 85, 255, 78, 78, 78, 255, 95, 95, 95, 255, 75, 75, 75, 255, 78, 78, 78, 255, 83, 83, 83, 255, 85, 85, 85, 255, 76, 76, 76, 255, 89, 89, 89, 255, 83, 83, 83, 255, 81, 81, 81, 255, 78, 78, 78, 255, 86, 86, 86, 255, 86, 86, 86, 255, 89, 89, 89, 255, 88, 88, 88, 255, 106, 106, 106, 255, 108, 108, 108, 255, 101, 101, 101, 255, 106, 106, 106, 255, 91, 91, 91, 255, 86, 86, 86, 255, 76, 76, 76, 255, 80, 80, 80, 255, 76, 76, 76, 255, 82, 82, 82, 255, 96, 96, 96, 255, 96, 96, 96, 255, 105, 105, 105, 255, 88, 88, 88, 255, 83, 83, 83, 255, 91, 91, 91, 255, 92, 92, 92, 255, 96, 96, 96, 255, 97, 97, 97, 255, 119, 119, 119, 255, 143, 143, 143, 255, 141, 141, 141, 255, 119, 119, 119, 255, 93, 93, 93, 255, 77, 77, 77, 255, 113, 113, 113, 255, 99, 99, 99, 255, 70, 70, 70, 255, 50, 50, 50, 255, 63, 63, 63, 255, 99, 99, 99, 255, 129, 129, 129, 255, 149, 149, 149, 255, 133, 133, 133, 255, 112, 112, 112, 255, 104, 104, 104, 255, 116, 116, 116, 255, 110, 110, 110, 255, 101, 101, 101, 255, 92, 92, 92, 255, 99, 99, 99, 255, 87, 87, 87, 255, 81, 81, 81, 255, 87, 87, 87, 255, 94, 94, 94, 255, 96, 96, 96, 255, 91, 91, 91, 255, 98, 98, 98, 255, 92, 92, 92, 255, 80, 80, 80, 255, 78, 78, 78, 255, 79, 79, 79, 255, 67, 67, 67, 255, 74, 74, 74, 255, 96, 96, 96, 255, 106, 106, 106, 255, 100, 100, 100, 255, 105, 105, 105, 255, 92, 92, 92, 255, 95, 95, 95, 255, 79, 79, 79, 255, 59, 59, 59, 255, 85, 85, 85, 255, 72, 72, 72, 255, 73, 73, 73, 255, 74, 74, 74, 255, 56, 56, 56, 255, 77, 77, 77, 255, 75, 75, 75, 255, 84, 84, 84, 255, 71, 71, 71, 255, 60, 60, 60, 255, 68, 68, 68, 255, 70, 70, 70, 255, 53, 53, 53, 255, 48, 48, 48, 255, 52, 52, 52, 255, 47, 47, 47, 255, 77, 77, 77, 255, 72, 72, 72, 255, 67, 67, 67, 255, 73, 73, 73, 255, 59, 59, 59, 255, 85, 85, 85, 255, 74, 74, 74, 255, 95, 95, 95, 255, 84, 84, 84, 255, 71, 71, 71, 255, 66, 66, 66, 255, 70, 70, 70, 255, 75, 75, 75, 255, 67, 67, 67, 255, 79, 79, 79, 255, 90, 90, 90, 255, 82, 82, 82, 255, 90, 90, 90, 255, 86, 86, 86, 255, 98, 98, 98, 255, 96, 96, 96, 255, 105, 105, 105, 255, 99, 99, 99, 255, 95, 95, 95, 255, 89, 89, 89, 255, 77, 77, 77, 255, 76, 76, 76, 255, 67, 67, 67, 255, 82, 82, 82, 255, 70, 70, 70, 255, 81, 81, 81, 255, 82, 82, 82, 255, 82, 82, 82, 255, 88, 88, 88, 255, 89, 89, 89, 255, 85, 85, 85, 255, 92, 92, 92, 255, 88, 88, 88, 255, 94, 94, 94, 255, 98, 98, 98, 255, 103, 103, 103, 255, 114, 114, 114, 255, 130, 130, 130, 255, 134, 134, 134, 255, 116, 116, 116, 255, 59, 59, 59, 255, 52, 52, 52, 255, 68, 68, 68, 255, 93, 93, 93, 255, 135, 135, 135, 255, 157, 157, 157, 255, 130, 130, 130, 255, 108, 108, 108, 255, 116, 116, 116, 255, 105, 105, 105, 255, 108, 108, 108, 255, 97, 97, 97, 255, 90, 90, 90, 255, 90, 90, 90, 255, 94, 94, 94, 255, 90, 90, 90, 255, 78, 78, 78, 255, 83, 83, 83, 255, 91, 91, 91, 255, 89, 89, 89, 255, 93, 93, 93, 255, 98, 98, 98, 255, 91, 91, 91, 255, 87, 87, 87, 255, 85, 85, 85, 255, 85, 85, 85, 255, 76, 76, 76, 255, 70, 70, 70, 255, 90, 90, 90, 255, 106, 106, 106, 255, 100, 100, 100, 255, 97, 97, 97, 255, 86, 86, 86, 255, 85, 85, 85, 255, 85, 85, 85, 255, 87, 87, 87, 255, 69, 69, 69, 255, 72, 72, 72, 255, 67, 67, 67, 255, 72, 72, 72, 255, 62, 62, 62, 255, 69, 69, 69, 255, 69, 69, 69, 255, 74, 74, 74, 255, 53, 53, 53, 255, 64, 64, 64, 255, 61, 61, 61, 255, 65, 65, 65, 255, 52, 52, 52, 255, 49, 49, 49, 255, 70, 70, 70, 255, 59, 59, 59, 255, 53, 53, 53, 255, 86, 86, 86, 255, 55, 55, 55, 255, 74, 74, 74, 255, 69, 69, 69, 255, 59, 59, 59, 255, 76, 76, 76, 255, 66, 66, 66, 255, 99, 99, 99, 255, 101, 101, 101, 255, 81, 81, 81, 255, 78, 78, 78, 255, 63, 63, 63, 255, 65, 65, 65, 255, 74, 74, 74, 255, 84, 84, 84, 255, 93, 93, 93, 255, 98, 98, 98, 255, 96, 96, 96, 255, 81, 81, 81, 255, 79, 79, 79, 255, 88, 88, 88, 255, 91, 91, 91, 255, 93, 93, 93, 255, 83, 83, 83, 255, 86, 86, 86, 255, 78, 78, 78, 255, 69, 69, 69, 255, 66, 66, 66, 255, 71, 71, 71, 255, 81, 81, 81, 255, 74, 74, 74, 255, 77, 77, 77, 255, 74, 74, 74, 255, 75, 75, 75, 255, 76, 76, 76, 255, 84, 84, 84, 255, 89, 89, 89, 255, 97, 97, 97, 255, 98, 98, 98, 255, 90, 90, 90, 255, 89, 89, 89, 255, 89, 89, 89, 255, 98, 98, 98, 255, 105, 105, 105, 255, 124, 124, 124, 255, 65, 65, 65, 255, 90, 90, 90, 255, 138, 138, 138, 255, 178, 178, 178, 255, 149, 149, 149, 255, 97, 97, 97, 255, 110, 110, 110, 255, 122, 122, 122, 255, 102, 102, 102, 255, 102, 102, 102, 255, 88, 88, 88, 255, 82, 82, 82, 255, 94, 94, 94, 255, 96, 96, 96, 255, 100, 100, 100, 255, 93, 93, 93, 255, 98, 98, 98, 255, 104, 104, 104, 255, 96, 96, 96, 255, 98, 98, 98, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 98, 98, 98, 255, 96, 96, 96, 255, 98, 98, 98, 255, 90, 90, 90, 255, 86, 86, 86, 255, 89, 89, 89, 255, 67, 67, 67, 255, 79, 79, 79, 255, 80, 80, 80, 255, 82, 82, 82, 255, 87, 87, 87, 255, 89, 89, 89, 255, 86, 86, 86, 255, 66, 66, 66, 255, 72, 72, 72, 255, 62, 62, 62, 255, 66, 66, 66, 255, 60, 60, 60, 255, 56, 56, 56, 255, 63, 63, 63, 255, 46, 46, 46, 255, 52, 52, 52, 255, 66, 66, 66, 255, 50, 50, 50, 255, 48, 48, 48, 255, 70, 70, 70, 255, 67, 67, 67, 255, 85, 85, 85, 255, 70, 70, 70, 255, 74, 74, 74, 255, 65, 65, 65, 255, 58, 58, 58, 255, 75, 75, 75, 255, 65, 65, 65, 255, 71, 71, 71, 255, 71, 71, 71, 255, 85, 85, 85, 255, 103, 103, 103, 255, 103, 103, 103, 255, 86, 86, 86, 255, 88, 88, 88, 255, 72, 72, 72, 255, 75, 75, 75, 255, 66, 66, 66, 255, 83, 83, 83, 255, 95, 95, 95, 255, 102, 102, 102, 255, 91, 91, 91, 255, 95, 95, 95, 255, 96, 96, 96, 255, 104, 104, 104, 255, 97, 97, 97, 255, 93, 93, 93, 255, 92, 92, 92, 255, 83, 83, 83, 255, 72, 72, 72, 255, 67, 67, 67, 255, 76, 76, 76, 255, 77, 77, 77, 255, 78, 78, 78, 255, 83, 83, 83, 255, 77, 77, 77, 255, 74, 74, 74, 255, 78, 78, 78, 255, 73, 73, 73, 255, 81, 81, 81, 255, 85, 85, 85, 255, 88, 88, 88, 255, 99, 99, 99, 255, 100, 100, 100, 255, 97, 97, 97, 255, 89, 89, 89, 255, 87, 87, 87, 255, 91, 91, 91, 255, 90, 90, 90, 255, 131, 131, 131, 255, 174, 174, 174, 255, 162, 162, 162, 255, 115, 115, 115, 255, 99, 99, 99, 255, 114, 114, 114, 255, 111, 111, 111, 255, 94, 94, 94, 255, 95, 95, 95, 255, 88, 88, 88, 255, 83, 83, 83, 255, 97, 97, 97, 255, 96, 96, 96, 255, 103, 103, 103, 255, 104, 104, 104, 255, 103, 103, 103, 255, 107, 107, 107, 255, 98, 98, 98, 255, 99, 99, 99, 255, 90, 90, 90, 255, 91, 91, 91, 255, 100, 100, 100, 255, 84, 84, 84, 255, 87, 87, 87, 255, 100, 100, 100, 255, 95, 95, 95, 255, 91, 91, 91, 255, 92, 92, 92, 255, 87, 87, 87, 255, 89, 89, 89, 255, 89, 89, 89, 255, 85, 85, 85, 255, 86, 86, 86, 255, 73, 73, 73, 255, 94, 94, 94, 255, 82, 82, 82, 255, 77, 77, 77, 255, 80, 80, 80, 255, 71, 71, 71, 255, 73, 73, 73, 255, 66, 66, 66, 255, 60, 60, 60, 255, 60, 60, 60, 255, 52, 52, 52, 255, 56, 56, 56, 255, 48, 48, 48, 255, 58, 58, 58, 255, 59, 59, 59, 255, 63, 63, 63, 255, 61, 61, 61, 255, 81, 81, 81, 255, 73, 73, 73, 255, 85, 85, 85, 255, 60, 60, 60, 255, 74, 74, 74, 255, 92, 92, 92, 255, 74, 74, 74, 255, 75, 75, 75, 255, 81, 81, 81, 255, 67, 67, 67, 255, 62, 62, 62, 255, 75, 75, 75, 255, 76, 76, 76, 255, 90, 90, 90, 255, 75, 75, 75, 255, 78, 78, 78, 255, 86, 86, 86, 255, 93, 93, 93, 255, 77, 77, 77, 255, 106, 106, 106, 255, 86, 86, 86, 255, 104, 104, 104, 255, 96, 96, 96, 255, 105, 105, 105, 255, 104, 104, 104, 255, 99, 99, 99, 255, 92, 92, 92, 255, 84, 84, 84, 255, 80, 80, 80, 255, 80, 80, 80, 255, 75, 75, 75, 255, 72, 72, 72, 255, 78, 78, 78, 255, 83, 83, 83, 255, 87, 87, 87, 255, 75, 75, 75, 255, 76, 76, 76, 255, 85, 85, 85, 255, 88, 88, 88, 255, 92, 92, 92, 255, 93, 93, 93, 255, 91, 91, 91, 255, 90, 90, 90, 255, 92, 92, 92, 255, 88, 88, 88, 255, 83, 83, 83, 255, 84, 84, 84, 255, 88, 88, 88, 255, 167, 167, 167, 255, 122, 122, 122, 255, 104, 104, 104, 255, 117, 117, 117, 255, 117, 117, 117, 255, 106, 106, 106, 255, 90, 90, 90, 255, 92, 92, 92, 255, 95, 95, 95, 255, 90, 90, 90, 255, 102, 102, 102, 255, 102, 102, 102, 255, 99, 99, 99, 255, 100, 100, 100, 255, 102, 102, 102, 255, 107, 107, 107, 255, 95, 95, 95, 255, 89, 89, 89, 255, 71, 71, 71, 255, 76, 76, 76, 255, 84, 84, 84, 255, 69, 69, 69, 255, 72, 72, 72, 255, 88, 88, 88, 255, 92, 92, 92, 255, 77, 77, 77, 255, 85, 85, 85, 255, 86, 86, 86, 255, 79, 79, 79, 255, 104, 104, 104, 255, 89, 89, 89, 255, 96, 96, 96, 255, 78, 78, 78, 255, 85, 85, 85, 255, 78, 78, 78, 255, 89, 89, 89, 255, 81, 81, 81, 255, 70, 70, 70, 255, 70, 70, 70, 255, 66, 66, 66, 255, 69, 69, 69, 255, 70, 70, 70, 255, 66, 66, 66, 255, 53, 53, 53, 255, 54, 54, 54, 255, 58, 58, 58, 255, 73, 73, 73, 255, 59, 59, 59, 255, 65, 65, 65, 255, 71, 71, 71, 255, 67, 67, 67, 255, 82, 82, 82, 255, 76, 76, 76, 255, 82, 82, 82, 255, 102, 102, 102, 255, 87, 87, 87, 255, 87, 87, 87, 255, 79, 79, 79, 255, 90, 90, 90, 255, 69, 69, 69, 255, 59, 59, 59, 255, 70, 70, 70, 255, 83, 83, 83, 255, 71, 71, 71, 255, 69, 69, 69, 255, 96, 96, 96, 255, 78, 78, 78, 255, 88, 88, 88, 255, 96, 96, 96, 255, 92, 92, 92, 255, 91, 91, 91, 255, 83, 83, 83, 255, 78, 78, 78, 255, 83, 83, 83, 255, 114, 114, 114, 255, 101, 101, 101, 255, 107, 107, 107, 255, 99, 99, 99, 255, 79, 79, 79, 255, 77, 77, 77, 255, 84, 84, 84, 255, 78, 78, 78, 255, 77, 77, 77, 255, 80, 80, 80, 255, 79, 79, 79, 255, 81, 81, 81, 255, 76, 76, 76, 255, 82, 82, 82, 255, 95, 95, 95, 255, 100, 100, 100, 255, 104, 104, 104, 255, 101, 101, 101, 255, 92, 92, 92, 255, 90, 90, 90, 255, 94, 94, 94, 255, 89, 89, 89, 255, 88, 88, 88, 255, 89, 89, 89, 255, 108, 108, 108, 255, 124, 124, 124, 255, 121, 121, 121, 255, 105, 105, 105, 255, 103, 103, 103, 255, 97, 97, 97, 255, 95, 95, 95, 255, 93, 93, 93, 255, 93, 93, 93, 255, 106, 106, 106, 255, 111, 111, 111, 255, 93, 93, 93, 255, 93, 93, 93, 255, 106, 106, 106, 255, 105, 105, 105, 255, 92, 92, 92, 255, 84, 84, 84, 255, 66, 66, 66, 255, 79, 79, 79, 255, 79, 79, 79, 255, 71, 71, 71, 255, 69, 69, 69, 255, 83, 83, 83, 255, 78, 78, 78, 255, 81, 81, 81, 255, 76, 76, 76, 255, 85, 85, 85, 255, 89, 89, 89, 255, 95, 95, 95, 255, 81, 81, 81, 255, 79, 79, 79, 255, 60, 60, 60, 255, 83, 83, 83, 255, 78, 78, 78, 255, 65, 65, 65, 255, 79, 79, 79, 255, 61, 61, 61, 255, 71, 71, 71, 255, 82, 82, 82, 255, 64, 64, 64, 255, 72, 72, 72, 255, 88, 88, 88, 255, 70, 70, 70, 255, 71, 71, 71, 255, 68, 68, 68, 255, 58, 58, 58, 255, 89, 89, 89, 255, 62, 62, 62, 255, 85, 85, 85, 255, 79, 79, 79, 255, 64, 64, 64, 255, 78, 78, 78, 255, 75, 75, 75, 255, 85, 85, 85, 255, 74, 74, 74, 255, 72, 72, 72, 255, 78, 78, 78, 255, 84, 84, 84, 255, 72, 72, 72, 255, 58, 58, 58, 255, 63, 63, 63, 255, 70, 70, 70, 255, 66, 66, 66, 255, 77, 77, 77, 255, 81, 81, 81, 255, 86, 86, 86, 255, 76, 76, 76, 255, 82, 82, 82, 255, 86, 86, 86, 255, 72, 72, 72, 255, 98, 98, 98, 255, 83, 83, 83, 255, 91, 91, 91, 255, 97, 97, 97, 255, 109, 109, 109, 255, 103, 103, 103, 255, 84, 84, 84, 255, 98, 98, 98, 255, 84, 84, 84, 255, 85, 85, 85, 255, 76, 76, 76, 255, 81, 81, 81, 255, 77, 77, 77, 255, 76, 76, 76, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 82, 82, 82, 255, 85, 85, 85, 255, 96, 96, 96, 255, 94, 94, 94, 255, 98, 98, 98, 255, 99, 99, 99, 255, 90, 90, 90, 255, 85, 85, 85, 255, 90, 90, 90, 255, 89, 89, 89, 255, 91, 91, 91, 255, 111, 111, 111, 255, 99, 99, 99, 255, 101, 101, 101, 255, 110, 110, 110, 255, 103, 103, 103, 255, 97, 97, 97, 255, 96, 96, 96, 255, 97, 97, 97, 255, 105, 105, 105, 255, 110, 110, 110, 255, 96, 96, 96, 255, 104, 104, 104, 255, 119, 119, 119, 255, 104, 104, 104, 255, 97, 97, 97, 255, 82, 82, 82, 255, 73, 73, 73, 255, 79, 79, 79, 255, 80, 80, 80, 255, 88, 88, 88, 255, 96, 96, 96, 255, 104, 104, 104, 255, 89, 89, 89, 255, 84, 84, 84, 255, 74, 74, 74, 255, 67, 67, 67, 255, 78, 78, 78, 255, 79, 79, 79, 255, 85, 85, 85, 255, 85, 85, 85, 255, 71, 71, 71, 255, 79, 79, 79, 255, 59, 59, 59, 255, 78, 78, 78, 255, 59, 59, 59, 255, 73, 73, 73, 255, 77, 77, 77, 255, 92, 92, 92, 255, 63, 63, 63, 255, 85, 85, 85, 255, 81, 81, 81, 255, 83, 83, 83, 255, 59, 59, 59, 255, 90, 90, 90, 255, 68, 68, 68, 255, 85, 85, 85, 255, 84, 84, 84, 255, 63, 63, 63, 255, 97, 97, 97, 255, 77, 77, 77, 255, 81, 81, 81, 255, 80, 80, 80, 255, 51, 51, 51, 255, 56, 56, 56, 255, 60, 60, 60, 255, 78, 78, 78, 255, 74, 74, 74, 255, 59, 59, 59, 255, 56, 56, 56, 255, 55, 55, 55, 255, 76, 76, 76, 255, 69, 69, 69, 255, 78, 78, 78, 255, 88, 88, 88, 255, 93, 93, 93, 255, 65, 65, 65, 255, 86, 86, 86, 255, 78, 78, 78, 255, 83, 83, 83, 255, 69, 69, 69, 255, 86, 86, 86, 255, 93, 93, 93, 255, 93, 93, 93, 255, 105, 105, 105, 255, 86, 86, 86, 255, 90, 90, 90, 255, 70, 70, 70, 255, 76, 76, 76, 255, 73, 73, 73, 255, 74, 74, 74, 255, 54, 54, 54, 255, 75, 75, 75, 255, 77, 77, 77, 255, 74, 74, 74, 255, 74, 74, 74, 255, 86, 86, 86, 255, 91, 91, 91, 255, 88, 88, 88, 255, 81, 81, 81, 255, 83, 83, 83, 255, 91, 91, 91, 255, 93, 93, 93, 255, 94, 94, 94, 255, 88, 88, 88, 255, 88, 88, 88, 255, 85, 85, 85, 255, 92, 92, 92, 255, 87, 87, 87, 255, 89, 89, 89, 255, 101, 101, 101, 255, 107, 107, 107, 255, 104, 104, 104, 255, 104, 104, 104, 255, 98, 98, 98, 255, 89, 89, 89, 255, 88, 88, 88, 255, 103, 103, 103, 255, 97, 97, 97, 255, 112, 112, 112, 255, 121, 121, 121, 255, 89, 89, 89, 255, 90, 90, 90, 255, 82, 82, 82, 255, 82, 82, 82, 255, 85, 85, 85, 255, 71, 71, 71, 255, 84, 84, 84, 255, 77, 77, 77, 255, 97, 97, 97, 255, 93, 93, 93, 255, 90, 90, 90, 255, 106, 106, 106, 255, 80, 80, 80, 255, 87, 87, 87, 255, 90, 90, 90, 255, 71, 71, 71, 255, 99, 99, 99, 255, 67, 67, 67, 255, 80, 80, 80, 255, 82, 82, 82, 255, 81, 81, 81, 255, 69, 69, 69, 255, 72, 72, 72, 255, 90, 90, 90, 255, 104, 104, 104, 255, 73, 73, 73, 255, 77, 77, 77, 255, 80, 80, 80, 255, 63, 63, 63, 255, 65, 65, 65, 255, 78, 78, 78, 255, 74, 74, 74, 255, 100, 100, 100, 255, 83, 83, 83, 255, 78, 78, 78, 255, 89, 89, 89, 255, 97, 97, 97, 255, 61, 61, 61, 255, 71, 71, 71, 255, 58, 58, 58, 255, 41, 41, 41, 255, 41, 41, 41, 255, 51, 51, 51, 255, 66, 66, 66, 255, 72, 72, 72, 255, 40, 40, 40, 255, 60, 60, 60, 255, 57, 57, 57, 255, 69, 69, 69, 255, 80, 80, 80, 255, 97, 97, 97, 255, 93, 93, 93, 255, 82, 82, 82, 255, 80, 80, 80, 255, 87, 87, 87, 255, 81, 81, 81, 255, 59, 59, 59, 255, 89, 89, 89, 255, 80, 80, 80, 255, 105, 105, 105, 255, 119, 119, 119, 255, 109, 109, 109, 255, 94, 94, 94, 255, 88, 88, 88, 255, 70, 70, 70, 255, 55, 55, 55, 255, 67, 67, 67, 255, 74, 74, 74, 255, 79, 79, 79, 255, 81, 81, 81, 255, 87, 87, 87, 255, 81, 81, 81, 255, 77, 77, 77, 255, 83, 83, 83, 255, 82, 82, 82, 255, 82, 82, 82, 255, 85, 85, 85, 255, 81, 81, 81, 255, 87, 87, 87, 255, 93, 93, 93, 255, 97, 97, 97, 255, 94, 94, 94, 255, 80, 80, 80, 255, 83, 83, 83, 255, 85, 85, 85, 255, 92, 92, 92, 255, 96, 96, 96, 255, 98, 98, 98, 255, 97, 97, 97, 255, 100, 100, 100, 255, 95, 95, 95, 255, 74, 74, 74, 255, 80, 80, 80, 255, 102, 102, 102, 255, 102, 102, 102, 255, 111, 111, 111, 255, 111, 111, 111, 255, 78, 78, 78, 255, 74, 74, 74, 255, 71, 71, 71, 255, 68, 68, 68, 255, 77, 77, 77, 255, 77, 77, 77, 255, 79, 79, 79, 255, 67, 67, 67, 255, 85, 85, 85, 255, 84, 84, 84, 255, 82, 82, 82, 255, 107, 107, 107, 255, 92, 92, 92, 255, 81, 81, 81, 255, 99, 99, 99, 255, 67, 67, 67, 255, 99, 99, 99, 255, 59, 59, 59, 255, 61, 61, 61, 255, 68, 68, 68, 255, 71, 71, 71, 255, 67, 67, 67, 255, 68, 68, 68, 255, 76, 76, 76, 255, 85, 85, 85, 255, 78, 78, 78, 255, 65, 65, 65, 255, 69, 69, 69, 255, 56, 56, 56, 255, 67, 67, 67, 255, 84, 84, 84, 255, 79, 79, 79, 255, 54, 54, 54, 255, 89, 89, 89, 255, 94, 94, 94, 255, 75, 75, 75, 255, 109, 109, 109, 255, 77, 77, 77, 255, 31, 31, 31, 255, 69, 69, 69, 255, 57, 57, 57, 255, 65, 65, 65, 255, 50, 50, 50, 255, 59, 59, 59, 255, 47, 47, 47, 255, 40, 40, 40, 255, 44, 44, 44, 255, 45, 45, 45, 255, 50, 50, 50, 255, 63, 63, 63, 255, 63, 63, 63, 255, 75, 75, 75, 255, 78, 78, 78, 255, 70, 70, 70, 255, 86, 86, 86, 255, 83, 83, 83, 255, 84, 84, 84, 255, 63, 63, 63, 255, 81, 81, 81, 255, 74, 74, 74, 255, 92, 92, 92, 255, 104, 104, 104, 255, 98, 98, 98, 255, 91, 91, 91, 255, 74, 74, 74, 255, 90, 90, 90, 255, 72, 72, 72, 255, 63, 63, 63, 255, 67, 67, 67, 255, 84, 84, 84, 255, 82, 82, 82, 255, 81, 81, 81, 255, 91, 91, 91, 255, 70, 70, 70, 255, 69, 69, 69, 255, 73, 73, 73, 255, 83, 83, 83, 255, 92, 92, 92, 255, 94, 94, 94, 255, 92, 92, 92, 255, 98, 98, 98, 255, 96, 96, 96, 255, 104, 104, 104, 255, 94, 94, 94, 255, 81, 81, 81, 255, 80, 80, 80, 255, 83, 83, 83, 255], "height": 31, "width": 98}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694355910": {"name": "input", "reference_var_id": "16050693467600", "reference_layer_id": "1605069346760", "isDefault": true}}, "outputs": {"16050694355910": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069440499", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069346760", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069440499": {"layerId": "1605069440499", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_2", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 48, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_2(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_2'        \n        self._patch_size = 5\n        self._feature_maps = 36\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 11.333333333333334, "left": 204}, "tutorialId": "", "OutputDim": "14x47x36", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 658, "series": [{"type": "rgba", "x_data": null, "data": [404, 404, 404, 255, 368, 368, 368, 255, 319, 319, 319, 255, 429, 429, 429, 255, 374, 374, 374, 255, 396, 396, 396, 255, 385, 385, 385, 255, 382, 382, 382, 255, 375, 375, 375, 255, 322, 322, 322, 255, 347, 347, 347, 255, 281, 281, 281, 255, 314, 314, 314, 255, 269, 269, 269, 255, 276, 276, 276, 255, 336, 336, 336, 255, 352, 352, 352, 255, 344, 344, 344, 255, 360, 360, 360, 255, 419, 419, 419, 255, 343, 343, 343, 255, 304, 304, 304, 255, 285, 285, 285, 255, 354, 354, 354, 255, 412, 412, 412, 255, 410, 410, 410, 255, 419, 419, 419, 255, 431, 431, 431, 255, 445, 445, 445, 255, 429, 429, 429, 255, 412, 412, 412, 255, 412, 412, 412, 255, 404, 404, 404, 255, 396, 396, 396, 255, 347, 347, 347, 255, 397, 397, 397, 255, 366, 366, 366, 255, 364, 364, 364, 255, 366, 366, 366, 255, 401, 401, 401, 255, 403, 403, 403, 255, 405, 405, 405, 255, 406, 406, 406, 255, 377, 377, 377, 255, 331, 331, 331, 255, 354, 354, 354, 255, 364, 364, 364, 255, 422, 422, 422, 255, 359, 359, 359, 255, 352, 352, 352, 255, 354, 354, 354, 255, 314, 314, 314, 255, 355, 355, 355, 255, 379, 379, 379, 255, 317, 317, 317, 255, 451, 451, 451, 255, 417, 417, 417, 255, 403, 403, 403, 255, 435, 435, 435, 255, 438, 438, 438, 255, 420, 420, 420, 255, 418, 418, 418, 255, 432, 432, 432, 255, 406, 406, 406, 255, 385, 385, 385, 255, 426, 426, 426, 255, 467, 467, 467, 255, 441, 441, 441, 255, 466, 466, 466, 255, 410, 410, 410, 255, 409, 409, 409, 255, 378, 378, 378, 255, 381, 381, 381, 255, 384, 384, 384, 255, 369, 369, 369, 255, 356, 356, 356, 255, 358, 358, 358, 255, 358, 358, 358, 255, 357, 357, 357, 255, 348, 348, 348, 255, 362, 362, 362, 255, 378, 378, 378, 255, 338, 338, 338, 255, 324, 324, 324, 255, 345, 345, 345, 255, 366, 366, 366, 255, 394, 394, 394, 255, 377, 377, 377, 255, 373, 373, 373, 255, 384, 384, 384, 255, 358, 358, 358, 255, 316, 316, 316, 255, 348, 348, 348, 255, 340, 340, 340, 255, 381, 381, 381, 255, 314, 314, 314, 255, 342, 342, 342, 255, 304, 304, 304, 255, 321, 321, 321, 255, 355, 355, 355, 255, 437, 437, 437, 255, 438, 438, 438, 255, 451, 451, 451, 255, 437, 437, 437, 255, 443, 443, 443, 255, 473, 473, 473, 255, 458, 458, 458, 255, 447, 447, 447, 255, 440, 440, 440, 255, 446, 446, 446, 255, 436, 436, 436, 255, 461, 461, 461, 255, 422, 422, 422, 255, 373, 373, 373, 255, 350, 350, 350, 255, 351, 351, 351, 255, 338, 338, 338, 255, 341, 341, 341, 255, 333, 333, 333, 255, 345, 345, 345, 255, 328, 328, 328, 255, 343, 343, 343, 255, 337, 337, 337, 255, 353, 353, 353, 255, 341, 341, 341, 255, 351, 351, 351, 255, 352, 352, 352, 255, 358, 358, 358, 255, 353, 353, 353, 255, 320, 320, 320, 255, 364, 364, 364, 255, 348, 348, 348, 255, 323, 323, 323, 255, 326, 326, 326, 255, 349, 349, 349, 255, 346, 346, 346, 255, 336, 336, 336, 255, 334, 334, 334, 255, 327, 327, 327, 255, 347, 347, 347, 255, 344, 344, 344, 255, 380, 380, 380, 255, 419, 419, 419, 255, 461, 461, 461, 255, 453, 453, 453, 255, 446, 446, 446, 255, 433, 433, 433, 255, 468, 468, 468, 255, 477, 477, 477, 255, 477, 477, 477, 255, 453, 453, 453, 255, 431, 431, 431, 255, 433, 433, 433, 255, 436, 436, 436, 255, 448, 448, 448, 255, 427, 427, 427, 255, 380, 380, 380, 255, 362, 362, 362, 255, 341, 341, 341, 255, 348, 348, 348, 255, 349, 349, 349, 255, 355, 355, 355, 255, 346, 346, 346, 255, 339, 339, 339, 255, 331, 331, 331, 255, 342, 342, 342, 255, 347, 347, 347, 255, 341, 341, 341, 255, 331, 331, 331, 255, 344, 344, 344, 255, 317, 317, 317, 255, 336, 336, 336, 255, 343, 343, 343, 255, 343, 343, 343, 255, 342, 342, 342, 255, 346, 346, 346, 255, 330, 330, 330, 255, 360, 360, 360, 255, 347, 347, 347, 255, 344, 344, 344, 255, 341, 341, 341, 255, 334, 334, 334, 255, 302, 302, 302, 255, 297, 297, 297, 255, 334, 334, 334, 255, 350, 350, 350, 255, 340, 340, 340, 255, 333, 333, 333, 255, 443, 443, 443, 255, 474, 474, 474, 255, 484, 484, 484, 255, 490, 490, 490, 255, 484, 484, 484, 255, 477, 477, 477, 255, 451, 451, 451, 255, 428, 428, 428, 255, 432, 432, 432, 255, 445, 445, 445, 255, 455, 455, 455, 255, 376, 376, 376, 255, 355, 355, 355, 255, 356, 356, 356, 255, 351, 351, 351, 255, 315, 315, 315, 255, 351, 351, 351, 255, 370, 370, 370, 255, 345, 345, 345, 255, 341, 341, 341, 255, 316, 316, 316, 255, 326, 326, 326, 255, 322, 322, 322, 255, 325, 325, 325, 255, 322, 322, 322, 255, 325, 325, 325, 255, 341, 341, 341, 255, 315, 315, 315, 255, 346, 346, 346, 255, 335, 335, 335, 255, 338, 338, 338, 255, 344, 344, 344, 255, 348, 348, 348, 255, 349, 349, 349, 255, 351, 351, 351, 255, 352, 352, 352, 255, 343, 343, 343, 255, 309, 309, 309, 255, 371, 371, 371, 255, 349, 349, 349, 255, 319, 319, 319, 255, 326, 326, 326, 255, 326, 326, 326, 255, 316, 316, 316, 255, 309, 309, 309, 255, 295, 295, 295, 255, 305, 305, 305, 255, 462, 462, 462, 255, 476, 476, 476, 255, 487, 487, 487, 255, 455, 455, 455, 255, 421, 421, 421, 255, 425, 425, 425, 255, 444, 444, 444, 255, 441, 441, 441, 255, 376, 376, 376, 255, 313, 313, 313, 255, 356, 356, 356, 255, 345, 345, 345, 255, 337, 337, 337, 255, 332, 332, 332, 255, 364, 364, 364, 255, 345, 345, 345, 255, 350, 350, 350, 255, 343, 343, 343, 255, 341, 341, 341, 255, 345, 345, 345, 255, 323, 323, 323, 255, 327, 327, 327, 255, 315, 315, 315, 255, 333, 333, 333, 255, 324, 324, 324, 255, 326, 326, 326, 255, 324, 324, 324, 255, 324, 324, 324, 255, 343, 343, 343, 255, 315, 315, 315, 255, 323, 323, 323, 255, 342, 342, 342, 255, 330, 330, 330, 255, 343, 343, 343, 255, 339, 339, 339, 255, 347, 347, 347, 255, 347, 347, 347, 255, 352, 352, 352, 255, 326, 326, 326, 255, 324, 324, 324, 255, 340, 340, 340, 255, 344, 344, 344, 255, 318, 318, 318, 255, 325, 325, 325, 255, 320, 320, 320, 255, 312, 312, 312, 255, 317, 317, 317, 255, 460, 460, 460, 255, 427, 427, 427, 255, 414, 414, 414, 255, 433, 433, 433, 255, 446, 446, 446, 255, 386, 386, 386, 255, 317, 317, 317, 255, 302, 302, 302, 255, 353, 353, 353, 255, 355, 355, 355, 255, 292, 292, 292, 255, 331, 331, 331, 255, 361, 361, 361, 255, 347, 347, 347, 255, 336, 336, 336, 255, 343, 343, 343, 255, 350, 350, 350, 255, 354, 354, 354, 255, 310, 310, 310, 255, 326, 326, 326, 255, 320, 320, 320, 255, 293, 293, 293, 255, 310, 310, 310, 255, 311, 311, 311, 255, 343, 343, 343, 255, 327, 327, 327, 255, 293, 293, 293, 255, 329, 329, 329, 255, 341, 341, 341, 255, 316, 316, 316, 255, 325, 325, 325, 255, 320, 320, 320, 255, 332, 332, 332, 255, 328, 328, 328, 255, 346, 346, 346, 255, 347, 347, 347, 255, 328, 328, 328, 255, 336, 336, 336, 255, 324, 324, 324, 255, 333, 333, 333, 255, 339, 339, 339, 255, 305, 305, 305, 255, 336, 336, 336, 255, 330, 330, 330, 255, 307, 307, 307, 255, 327, 327, 327, 255, 324, 324, 324, 255, 436, 436, 436, 255, 431, 431, 431, 255, 394, 394, 394, 255, 351, 351, 351, 255, 323, 323, 323, 255, 288, 288, 288, 255, 355, 355, 355, 255, 369, 369, 369, 255, 287, 287, 287, 255, 365, 365, 365, 255, 335, 335, 335, 255, 342, 342, 342, 255, 336, 336, 336, 255, 333, 333, 333, 255, 329, 329, 329, 255, 339, 339, 339, 255, 334, 334, 334, 255, 338, 338, 338, 255, 323, 323, 323, 255, 315, 315, 315, 255, 307, 307, 307, 255, 309, 309, 309, 255, 315, 315, 315, 255, 322, 322, 322, 255, 315, 315, 315, 255, 318, 318, 318, 255, 333, 333, 333, 255, 336, 336, 336, 255, 288, 288, 288, 255, 308, 308, 308, 255, 330, 330, 330, 255, 318, 318, 318, 255, 323, 323, 323, 255, 326, 326, 326, 255, 342, 342, 342, 255, 347, 347, 347, 255, 325, 325, 325, 255, 292, 292, 292, 255, 343, 343, 343, 255, 335, 335, 335, 255, 329, 329, 329, 255, 342, 342, 342, 255, 322, 322, 322, 255, 324, 324, 324, 255, 347, 347, 347, 255, 335, 335, 335, 255, 297, 297, 297, 255, 327, 327, 327, 255, 340, 340, 340, 255, 307, 307, 307, 255, 299, 299, 299, 255, 374, 374, 374, 255, 362, 362, 362, 255, 291, 291, 291, 255, 334, 334, 334, 255, 330, 330, 330, 255, 335, 335, 335, 255, 324, 324, 324, 255, 344, 344, 344, 255, 329, 329, 329, 255, 319, 319, 319, 255, 327, 327, 327, 255, 328, 328, 328, 255, 326, 326, 326, 255, 340, 340, 340, 255, 317, 317, 317, 255, 300, 300, 300, 255, 305, 305, 305, 255, 300, 300, 300, 255, 287, 287, 287, 255, 325, 325, 325, 255, 323, 323, 323, 255, 308, 308, 308, 255, 312, 312, 312, 255, 316, 316, 316, 255, 304, 304, 304, 255, 310, 310, 310, 255, 313, 313, 313, 255, 315, 315, 315, 255, 308, 308, 308, 255, 338, 338, 338, 255, 332, 332, 332, 255, 340, 340, 340, 255, 316, 316, 316, 255, 347, 347, 347, 255, 325, 325, 325, 255, 324, 324, 324, 255, 307, 307, 307, 255, 339, 339, 339, 255, 316, 316, 316, 255, 340, 340, 340, 255, 295, 295, 295, 255, 321, 321, 321, 255, 371, 371, 371, 255, 296, 296, 296, 255, 308, 308, 308, 255, 382, 382, 382, 255, 337, 337, 337, 255, 289, 289, 289, 255, 332, 332, 332, 255, 347, 347, 347, 255, 351, 351, 351, 255, 329, 329, 329, 255, 328, 328, 328, 255, 342, 342, 342, 255, 328, 328, 328, 255, 314, 314, 314, 255, 313, 313, 313, 255, 340, 340, 340, 255, 326, 326, 326, 255, 348, 348, 348, 255, 298, 298, 298, 255, 331, 331, 331, 255, 301, 301, 301, 255, 299, 299, 299, 255, 292, 292, 292, 255, 306, 306, 306, 255, 316, 316, 316, 255, 272, 272, 272, 255, 298, 298, 298, 255, 279, 279, 279, 255, 313, 313, 313, 255, 289, 289, 289, 255, 329, 329, 329, 255, 322, 322, 322, 255, 306, 306, 306, 255, 303, 303, 303, 255, 340, 340, 340, 255, 349, 349, 349, 255, 315, 315, 315, 255, 318, 318, 318, 255, 312, 312, 312, 255, 308, 308, 308, 255, 306, 306, 306, 255, 309, 309, 309, 255, 312, 312, 312, 255, 321, 321, 321, 255, 317, 317, 317, 255, 339, 339, 339, 255, 340, 340, 340, 255, 293, 293, 293, 255, 382, 382, 382, 255, 323, 323, 323, 255, 286, 286, 286, 255, 340, 340, 340, 255, 339, 339, 339, 255, 350, 350, 350, 255, 336, 336, 336, 255, 351, 351, 351, 255, 338, 338, 338, 255, 334, 334, 334, 255, 314, 314, 314, 255, 328, 328, 328, 255, 334, 334, 334, 255, 321, 321, 321, 255, 281, 281, 281, 255, 341, 341, 341, 255, 323, 323, 323, 255, 314, 314, 314, 255, 310, 310, 310, 255, 299, 299, 299, 255, 298, 298, 298, 255, 274, 274, 274, 255, 297, 297, 297, 255, 326, 326, 326, 255, 306, 306, 306, 255, 299, 299, 299, 255, 269, 269, 269, 255, 303, 303, 303, 255, 321, 321, 321, 255, 293, 293, 293, 255, 293, 293, 293, 255, 317, 317, 317, 255, 311, 311, 311, 255, 300, 300, 300, 255, 311, 311, 311, 255, 325, 325, 325, 255, 356, 356, 356, 255, 339, 339, 339, 255, 323, 323, 323, 255, 308, 308, 308, 255, 295, 295, 295, 255, 318, 318, 318, 255, 323, 323, 323, 255, 324, 324, 324, 255, 327, 327, 327, 255, 328, 328, 328, 255, 345, 345, 345, 255, 277, 277, 277, 255, 362, 362, 362, 255, 345, 345, 345, 255, 359, 359, 359, 255, 341, 341, 341, 255, 324, 324, 324, 255, 320, 320, 320, 255, 328, 328, 328, 255, 320, 320, 320, 255, 324, 324, 324, 255, 307, 307, 307, 255, 312, 312, 312, 255, 312, 312, 312, 255, 312, 312, 312, 255, 316, 316, 316, 255, 338, 338, 338, 255, 276, 276, 276, 255, 310, 310, 310, 255, 288, 288, 288, 255, 283, 283, 283, 255, 288, 288, 288, 255, 276, 276, 276, 255, 288, 288, 288, 255, 312, 312, 312, 255, 268, 268, 268, 255, 269, 269, 269, 255, 307, 307, 307, 255, 307, 307, 307, 255, 314, 314, 314, 255, 321, 321, 321, 255, 301, 301, 301, 255, 311, 311, 311, 255, 300, 300, 300, 255, 326, 326, 326, 255, 337, 337, 337, 255, 327, 327, 327, 255, 325, 325, 325, 255, 334, 334, 334, 255, 318, 318, 318, 255, 310, 310, 310, 255, 309, 309, 309, 255, 314, 314, 314, 255, 305, 305, 305, 255, 300, 300, 300, 255, 319, 319, 319, 255, 330, 330, 330, 255, 340, 340, 340, 255, 364, 364, 364, 255, 375, 375, 375, 255, 335, 335, 335, 255, 337, 337, 337, 255, 311, 311, 311, 255, 340, 340, 340, 255, 343, 343, 343, 255, 336, 336, 336, 255, 328, 328, 328, 255, 321, 321, 321, 255, 318, 318, 318, 255, 316, 316, 316, 255, 324, 324, 324, 255, 299, 299, 299, 255, 329, 329, 329, 255, 312, 312, 312, 255, 305, 305, 305, 255, 326, 326, 326, 255, 301, 301, 301, 255, 281, 281, 281, 255, 271, 271, 271, 255, 317, 317, 317, 255, 287, 287, 287, 255, 284, 284, 284, 255, 332, 332, 332, 255, 274, 274, 274, 255, 284, 284, 284, 255, 327, 327, 327, 255, 285, 285, 285, 255, 347, 347, 347, 255, 283, 283, 283, 255, 327, 327, 327, 255, 300, 300, 300, 255, 326, 326, 326, 255, 289, 289, 289, 255, 344, 344, 344, 255, 321, 321, 321, 255, 334, 334, 334, 255, 307, 307, 307, 255, 290, 290, 290, 255, 325, 325, 325, 255, 295, 295, 295, 255, 306, 306, 306, 255, 316, 316, 316, 255, 330, 330, 330, 255, 329, 329, 329, 255, 332, 332, 332, 255, 330, 330, 330, 255, 313, 313, 313, 255, 337, 337, 337, 255, 335, 335, 335, 255, 337, 337, 337, 255, 339, 339, 339, 255, 331, 331, 331, 255, 319, 319, 319, 255, 308, 308, 308, 255, 296, 296, 296, 255, 321, 321, 321, 255, 330, 330, 330, 255, 304, 304, 304, 255, 296, 296, 296, 255, 311, 311, 311, 255, 293, 293, 293, 255, 301, 301, 301, 255, 268, 268, 268, 255, 300, 300, 300, 255, 296, 296, 296, 255, 343, 343, 343, 255, 287, 287, 287, 255, 278, 278, 278, 255, 324, 324, 324, 255, 298, 298, 298, 255, 281, 281, 281, 255, 317, 317, 317, 255, 283, 283, 283, 255, 278, 278, 278, 255, 311, 311, 311, 255, 255, 255, 255, 255, 306, 306, 306, 255, 317, 317, 317, 255, 319, 319, 319, 255, 335, 335, 335, 255, 312, 312, 312, 255, 316, 316, 316, 255, 352, 352, 352, 255, 284, 284, 284, 255, 306, 306, 306, 255, 285, 285, 285, 255, 318, 318, 318, 255, 282, 282, 282, 255, 321, 321, 321, 255, 334, 334, 334, 255, 315, 315, 315, 255, 346, 346, 346, 255], "height": 14, "width": 47}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694405000": {"name": "input", "reference_var_id": "16050694355910", "reference_layer_id": "1605069435590", "isDefault": true}}, "outputs": {"16050694405000": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069445064", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069435590", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "W", "b"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069445064": {"layerId": "1605069445064", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_3", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 5, "Feature_maps": 96, "Stride": 2, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_3(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_3'        \n        self._patch_size = 5\n        self._feature_maps = 48\n        self._padding = 'VALID'\n        self._stride = 2\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 11.333333333333334, "left": 294.66666666666663}, "tutorialId": "", "OutputDim": "5x22x48", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 110, "series": [{"type": "rgba", "x_data": null, "data": [207, 207, 207, 255, 255, 255, 255, 255, 190, 190, 190, 255, 155, 155, 155, 255, 159, 159, 159, 255, 119, 119, 119, 255, 101, 101, 101, 255, 107, 107, 107, 255, 119, 119, 119, 255, 99, 99, 99, 255, 135, 135, 135, 255, 109, 109, 109, 255, 133, 133, 133, 255, 144, 144, 144, 255, 152, 152, 152, 255, 150, 150, 150, 255, 158, 158, 158, 255, 152, 152, 152, 255, 138, 138, 138, 255, 146, 146, 146, 255, 142, 142, 142, 255, 172, 172, 172, 255, 130, 130, 130, 255, 125, 125, 125, 255, 107, 107, 107, 255, 100, 100, 100, 255, 142, 142, 142, 255, 136, 136, 136, 255, 178, 178, 178, 255, 167, 167, 167, 255, 145, 145, 145, 255, 164, 164, 164, 255, 148, 148, 148, 255, 154, 154, 154, 255, 162, 162, 162, 255, 161, 161, 161, 255, 152, 152, 152, 255, 149, 149, 149, 255, 137, 137, 137, 255, 151, 151, 151, 255, 159, 159, 159, 255, 137, 137, 137, 255, 149, 149, 149, 255, 142, 142, 142, 255, 121, 121, 121, 255, 149, 149, 149, 255, 162, 162, 162, 255, 163, 163, 163, 255, 140, 140, 140, 255, 168, 168, 168, 255, 147, 147, 147, 255, 151, 151, 151, 255, 146, 146, 146, 255, 145, 145, 145, 255, 161, 161, 161, 255, 151, 151, 151, 255, 150, 150, 150, 255, 135, 135, 135, 255, 151, 151, 151, 255, 142, 142, 142, 255, 148, 148, 148, 255, 154, 154, 154, 255, 140, 140, 140, 255, 161, 161, 161, 255, 156, 156, 156, 255, 145, 145, 145, 255, 177, 177, 177, 255, 153, 153, 153, 255, 147, 147, 147, 255, 160, 160, 160, 255, 160, 160, 160, 255, 128, 128, 128, 255, 162, 162, 162, 255, 145, 145, 145, 255, 145, 145, 145, 255, 151, 151, 151, 255, 147, 147, 147, 255, 145, 145, 145, 255, 164, 164, 164, 255, 158, 158, 158, 255, 155, 155, 155, 255, 134, 134, 134, 255, 139, 139, 139, 255, 161, 161, 161, 255, 141, 141, 141, 255, 148, 148, 148, 255, 137, 137, 137, 255, 175, 175, 175, 255, 154, 154, 154, 255, 133, 133, 133, 255, 174, 174, 174, 255, 133, 133, 133, 255, 155, 155, 155, 255, 151, 151, 151, 255, 155, 155, 155, 255, 142, 142, 142, 255, 151, 151, 151, 255, 157, 157, 157, 255, 164, 164, 164, 255, 162, 162, 162, 255, 166, 166, 166, 255, 150, 150, 150, 255, 155, 155, 155, 255, 156, 156, 156, 255, 148, 148, 148, 255, 169, 169, 169, 255, 156, 156, 156, 255, 166, 166, 166, 255, 143, 143, 143, 255, 143, 143, 143, 255], "height": 5, "width": 22}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694450640": {"name": "input", "reference_var_id": "16050694405000", "reference_layer_id": "1605069440499", "isDefault": true}}, "outputs": {"16050694450640": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069449651", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069440499", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069449651": {"layerId": "1605069449651", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_4", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 3, "Feature_maps": 192, "Stride": 1, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_4(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_4'        \n        self._patch_size = 3\n        self._feature_maps = 64\n        self._padding = 'VALID'\n        self._stride = 1\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 11.333333333333334, "left": 385.3333333333333}, "tutorialId": "", "OutputDim": "3x20x64", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 60, "series": [{"type": "rgba", "x_data": null, "data": [240, 240, 240, 255, 255, 255, 255, 255, 251, 251, 251, 255, 250, 250, 250, 255, 233, 233, 233, 255, 218, 218, 218, 255, 206, 206, 206, 255, 220, 220, 220, 255, 229, 229, 229, 255, 216, 216, 216, 255, 221, 221, 221, 255, 219, 219, 219, 255, 218, 218, 218, 255, 221, 221, 221, 255, 224, 224, 224, 255, 220, 220, 220, 255, 218, 218, 218, 255, 207, 207, 207, 255, 218, 218, 218, 255, 219, 219, 219, 255, 217, 217, 217, 255, 231, 231, 231, 255, 236, 236, 236, 255, 213, 213, 213, 255, 231, 231, 231, 255, 231, 231, 231, 255, 222, 222, 222, 255, 220, 220, 220, 255, 209, 209, 209, 255, 210, 210, 210, 255, 210, 210, 210, 255, 214, 214, 214, 255, 215, 215, 215, 255, 222, 222, 222, 255, 207, 207, 207, 255, 222, 222, 222, 255, 221, 221, 221, 255, 218, 218, 218, 255, 219, 219, 219, 255, 210, 210, 210, 255, 220, 220, 220, 255, 214, 214, 214, 255, 224, 224, 224, 255, 221, 221, 221, 255, 220, 220, 220, 255, 199, 199, 199, 255, 210, 210, 210, 255, 213, 213, 213, 255, 214, 214, 214, 255, 207, 207, 207, 255, 208, 208, 208, 255, 201, 201, 201, 255, 212, 212, 212, 255, 210, 210, 210, 255, 211, 211, 211, 255, 203, 203, 203, 255, 208, 208, 208, 255, 212, 212, 212, 255, 210, 210, 210, 255, 216, 216, 216, 255], "height": 3, "width": 20}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694496510": {"name": "input", "reference_var_id": "16050694450640", "reference_layer_id": "1605069445064", "isDefault": true}}, "outputs": {"16050694496510": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069465134", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069445064", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069465134": {"layerId": "1605069465134", "copyId": null, "copyContainerElement": null, "layerName": "Convolution_5", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": 1, "Batch_norm": false, "Conv_dim": "2D", "Patch_size": 3, "Feature_maps": 384, "Stride": 1, "Padding": "VALID", "Activation_function": "ReLU", "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "layerSettingsTabName": "Settings", "layerCode": "class DeepLearningConv_Convolution_5(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningConv_Convolution_5'        \n        self._patch_size = 3\n        self._feature_maps = 64\n        self._padding = 'VALID'\n        self._stride = 1\n        self._keep_prob = 1.0\n        self._variables = {}\n        \n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a convolutional layer, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = tf.dtypes.cast(inputs['input'], tf.float32)        \n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training            \n            shape = [\n                self._patch_size,\n                self._patch_size,\n                x.get_shape().as_list()[-1],\n                self._feature_maps\n            ]\n\n            W = tf.compat.v1.get_variable('W', shape = shape, initializer=  tf.contrib.layers.xavier_initializer())\n            b = tf.compat.v1.get_variable('b', shape=[self._feature_maps], initializer=tf.zeros_initializer())\n            y = tf.add(tf.nn.conv2d(x, W, strides=[1, self._stride, self._stride, 1], padding=self._padding), b)\n        \n\n            y_before = y            \n            \n\n            y = tf.nn.elu(y)\n        \n        \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables        \n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 11.333333333333334, "left": 476}, "tutorialId": "", "OutputDim": "1x18x64", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 1152, "series": [{"type": "rgba", "x_data": null, "data": [21, 21, 21, 255, -68, -68, -68, 255, -141, -141, -141, 255, 88, 88, 88, 255, -23, -23, -23, 255, -72, -72, -72, 255, -22, -22, -22, 255, -153, -153, -153, 255, 62, 62, 62, 255, 13, 13, 13, 255, 60, 60, 60, 255, -199, -199, -199, 255, -136, -136, -136, 255, -102, -102, -102, 255, 92, 92, 92, 255, 16, 16, 16, 255, -167, -167, -167, 255, 77, 77, 77, 255, 74, 74, 74, 255, -118, -118, -118, 255, 140, 140, 140, 255, -174, -174, -174, 255, 46, 46, 46, 255, 40, 40, 40, 255, 23, 23, 23, 255, 64, 64, 64, 255, 101, 101, 101, 255, 233, 233, 233, 255, -13, -13, -13, 255, -237, -237, -237, 255, -84, -84, -84, 255, 175, 175, 175, 255, -30, -30, -30, 255, 22, 22, 22, 255, 111, 111, 111, 255, 21, 21, 21, 255, -54, -54, -54, 255, 36, 36, 36, 255, 255, 255, 255, 255, 105, 105, 105, 255, -7, -7, -7, 255, -54, -54, -54, 255, 12, 12, 12, 255, -138, -138, -138, 255, 34, 34, 34, 255, -65, -65, -65, 255, -158, -158, -158, 255, -81, -81, -81, 255, -110, -110, -110, 255, -38, -38, -38, 255, 75, 75, 75, 255, -173, -173, -173, 255, 70, 70, 70, 255, 60, 60, 60, 255, -87, -87, -87, 255, -92, -92, -92, 255, 1, 1, 1, 255, 155, 155, 155, 255, -98, -98, -98, 255, -103, -103, -103, 255, 94, 94, 94, 255, -199, -199, -199, 255, 78, 78, 78, 255, -36, -36, -36, 255, 43, 43, 43, 255, -70, -70, -70, 255, -146, -146, -146, 255, 74, 74, 74, 255, -34, -34, -34, 255, -55, -55, -55, 255, 2, 2, 2, 255, -150, -150, -150, 255, 48, 48, 48, 255, 27, 27, 27, 255, 72, 72, 72, 255, -176, -176, -176, 255, -129, -129, -129, 255, -114, -114, -114, 255, 106, 106, 106, 255, -11, -11, -11, 255, -178, -178, -178, 255, 80, 80, 80, 255, 70, 70, 70, 255, -150, -150, -150, 255, 131, 131, 131, 255, -165, -165, -165, 255, 37, 37, 37, 255, 50, 50, 50, 255, 20, 20, 20, 255, 56, 56, 56, 255, 92, 92, 92, 255, 220, 220, 220, 255, -9, -9, -9, 255, -231, -231, -231, 255, -102, -102, -102, 255, 160, 160, 160, 255, -20, -20, -20, 255, 40, 40, 40, 255, 103, 103, 103, 255, 58, 58, 58, 255, -46, -46, -46, 255, 33, 33, 33, 255, 238, 238, 238, 255, 92, 92, 92, 255, 10, 10, 10, 255, -20, -20, -20, 255, 24, 24, 24, 255, -136, -136, -136, 255, 25, 25, 25, 255, -72, -72, -72, 255, -152, -152, -152, 255, -50, -50, -50, 255, -95, -95, -95, 255, -23, -23, -23, 255, 73, 73, 73, 255, -178, -178, -178, 255, 58, 58, 58, 255, 75, 75, 75, 255, -78, -78, -78, 255, -91, -91, -91, 255, 11, 11, 11, 255, 151, 151, 151, 255, -71, -71, -71, 255, -106, -106, -106, 255, 101, 101, 101, 255, -189, -189, -189, 255, 56, 56, 56, 255, -37, -37, -37, 255, 43, 43, 43, 255, -64, -64, -64, 255, -155, -155, -155, 255, 58, 58, 58, 255, -34, -34, -34, 255, -73, -73, -73, 255, 19, 19, 19, 255, -151, -151, -151, 255, 57, 57, 57, 255, 46, 46, 46, 255, 74, 74, 74, 255, -168, -168, -168, 255, -140, -140, -140, 255, -101, -101, -101, 255, 124, 124, 124, 255, -1, -1, -1, 255, -173, -173, -173, 255, 46, 46, 46, 255, 81, 81, 81, 255, -178, -178, -178, 255, 125, 125, 125, 255, -147, -147, -147, 255, 43, 43, 43, 255, 54, 54, 54, 255, -1, -1, -1, 255, 62, 62, 62, 255, 81, 81, 81, 255, 240, 240, 240, 255, -9, -9, -9, 255, -202, -202, -202, 255, -96, -96, -96, 255, 154, 154, 154, 255, -33, -33, -33, 255, 64, 64, 64, 255, 88, 88, 88, 255, 54, 54, 54, 255, -59, -59, -59, 255, 20, 20, 20, 255, 237, 237, 237, 255, 77, 77, 77, 255, -18, -18, -18, 255, -25, -25, -25, 255, 8, 8, 8, 255, -121, -121, -121, 255, 19, 19, 19, 255, -48, -48, -48, 255, -166, -166, -166, 255, -61, -61, -61, 255, -86, -86, -86, 255, -39, -39, -39, 255, 62, 62, 62, 255, -186, -186, -186, 255, 69, 69, 69, 255, 85, 85, 85, 255, -75, -75, -75, 255, -68, -68, -68, 255, 10, 10, 10, 255, 143, 143, 143, 255, -68, -68, -68, 255, -117, -117, -117, 255, 109, 109, 109, 255, -198, -198, -198, 255, 47, 47, 47, 255, -9, -9, -9, 255, 45, 45, 45, 255, -64, -64, -64, 255, -157, -157, -157, 255, 31, 31, 31, 255, -44, -44, -44, 255, -73, -73, -73, 255, 18, 18, 18, 255, -149, -149, -149, 255, 57, 57, 57, 255, 62, 62, 62, 255, 64, 64, 64, 255, -172, -172, -172, 255, -147, -147, -147, 255, -103, -103, -103, 255, 119, 119, 119, 255, 9, 9, 9, 255, -174, -174, -174, 255, 62, 62, 62, 255, 79, 79, 79, 255, -169, -169, -169, 255, 125, 125, 125, 255, -155, -155, -155, 255, 46, 46, 46, 255, 62, 62, 62, 255, 17, 17, 17, 255, 43, 43, 43, 255, 89, 89, 89, 255, 211, 211, 211, 255, -8, -8, -8, 255, -194, -194, -194, 255, -99, -99, -99, 255, 131, 131, 131, 255, -43, -43, -43, 255, 53, 53, 53, 255, 96, 96, 96, 255, 69, 69, 69, 255, -72, -72, -72, 255, 30, 30, 30, 255, 215, 215, 215, 255, 71, 71, 71, 255, -9, -9, -9, 255, -29, -29, -29, 255, 26, 26, 26, 255, -117, -117, -117, 255, -1, -1, -1, 255, -54, -54, -54, 255, -157, -157, -157, 255, -78, -78, -78, 255, -91, -91, -91, 255, -39, -39, -39, 255, 74, 74, 74, 255, -173, -173, -173, 255, 47, 47, 47, 255, 98, 98, 98, 255, -83, -83, -83, 255, -70, -70, -70, 255, 18, 18, 18, 255, 165, 165, 165, 255, -59, -59, -59, 255, -116, -116, -116, 255, 102, 102, 102, 255, -210, -210, -210, 255, 43, 43, 43, 255, 4, 4, 4, 255, 54, 54, 54, 255, -76, -76, -76, 255, -149, -149, -149, 255, 24, 24, 24, 255, -31, -31, -31, 255, -76, -76, -76, 255, 8, 8, 8, 255, -148, -148, -148, 255, 48, 48, 48, 255, 52, 52, 52, 255, 71, 71, 71, 255, -167, -167, -167, 255, -155, -155, -155, 255, -94, -94, -94, 255, 114, 114, 114, 255, 4, 4, 4, 255, -169, -169, -169, 255, 45, 45, 45, 255, 66, 66, 66, 255, -162, -162, -162, 255, 137, 137, 137, 255, -144, -144, -144, 255, 53, 53, 53, 255, 65, 65, 65, 255, 22, 22, 22, 255, 50, 50, 50, 255, 96, 96, 96, 255, 216, 216, 216, 255, -18, -18, -18, 255, -186, -186, -186, 255, -91, -91, -91, 255, 145, 145, 145, 255, -26, -26, -26, 255, 47, 47, 47, 255, 96, 96, 96, 255, 57, 57, 57, 255, -58, -58, -58, 255, 24, 24, 24, 255, 226, 226, 226, 255, 76, 76, 76, 255, -23, -23, -23, 255, -31, -31, -31, 255, 37, 37, 37, 255, -113, -113, -113, 255, -1, -1, -1, 255, -55, -55, -55, 255, -136, -136, -136, 255, -71, -71, -71, 255, -92, -92, -92, 255, -33, -33, -33, 255, 62, 62, 62, 255, -178, -178, -178, 255, 52, 52, 52, 255, 88, 88, 88, 255, -79, -79, -79, 255, -61, -61, -61, 255, 21, 21, 21, 255, 155, 155, 155, 255, -45, -45, -45, 255, -109, -109, -109, 255, 100, 100, 100, 255, -211, -211, -211, 255, 31, 31, 31, 255, -29, -29, -29, 255, 51, 51, 51, 255, -75, -75, -75, 255, -136, -136, -136, 255, 12, 12, 12, 255, -37, -37, -37, 255, -69, -69, -69, 255, 5, 5, 5, 255, -149, -149, -149, 255, 36, 36, 36, 255, 46, 46, 46, 255, 61, 61, 61, 255, -155, -155, -155, 255, -155, -155, -155, 255, -102, -102, -102, 255, 112, 112, 112, 255, 8, 8, 8, 255, -173, -173, -173, 255, 56, 56, 56, 255, 64, 64, 64, 255, -158, -158, -158, 255, 129, 129, 129, 255, -146, -146, -146, 255, 57, 57, 57, 255, 55, 55, 55, 255, 19, 19, 19, 255, 48, 48, 48, 255, 94, 94, 94, 255, 219, 219, 219, 255, -12, -12, -12, 255, -194, -194, -194, 255, -98, -98, -98, 255, 140, 140, 140, 255, -23, -23, -23, 255, 41, 41, 41, 255, 90, 90, 90, 255, 57, 57, 57, 255, -47, -47, -47, 255, 28, 28, 28, 255, 216, 216, 216, 255, 72, 72, 72, 255, -24, -24, -24, 255, -26, -26, -26, 255, 46, 46, 46, 255, -113, -113, -113, 255, -1, -1, -1, 255, -55, -55, -55, 255, -139, -139, -139, 255, -72, -72, -72, 255, -102, -102, -102, 255, -39, -39, -39, 255, 57, 57, 57, 255, -161, -161, -161, 255, 63, 63, 63, 255, 85, 85, 85, 255, -76, -76, -76, 255, -66, -66, -66, 255, 2, 2, 2, 255, 158, 158, 158, 255, -42, -42, -42, 255, -102, -102, -102, 255, 105, 105, 105, 255, -212, -212, -212, 255, 42, 42, 42, 255, -16, -16, -16, 255, 40, 40, 40, 255, -81, -81, -81, 255, -135, -135, -135, 255, 8, 8, 8, 255, -20, -20, -20, 255, -67, -67, -67, 255, -4, -4, -4, 255, -147, -147, -147, 255, 39, 39, 39, 255, 36, 36, 36, 255, 64, 64, 64, 255, -156, -156, -156, 255, -158, -158, -158, 255, -108, -108, -108, 255, 111, 111, 111, 255, 1, 1, 1, 255, -162, -162, -162, 255, 55, 55, 55, 255, 54, 54, 54, 255, -154, -154, -154, 255, 121, 121, 121, 255, -143, -143, -143, 255, 59, 59, 59, 255, 26, 26, 26, 255, 17, 17, 17, 255, 35, 35, 35, 255, 87, 87, 87, 255, 236, 236, 236, 255, -8, -8, -8, 255, -186, -186, -186, 255, -101, -101, -101, 255, 146, 146, 146, 255, -27, -27, -27, 255, 43, 43, 43, 255, 82, 82, 82, 255, 52, 52, 52, 255, -53, -53, -53, 255, 6, 6, 6, 255, 219, 219, 219, 255, 75, 75, 75, 255, -39, -39, -39, 255, -32, -32, -32, 255, 49, 49, 49, 255, -100, -100, -100, 255, -1, -1, -1, 255, -61, -61, -61, 255, -146, -146, -146, 255, -63, -63, -63, 255, -91, -91, -91, 255, -53, -53, -53, 255, 58, 58, 58, 255, -166, -166, -166, 255, 64, 64, 64, 255, 68, 68, 68, 255, -70, -70, -70, 255, -58, -58, -58, 255, 6, 6, 6, 255, 154, 154, 154, 255, -29, -29, -29, 255, -106, -106, -106, 255, 111, 111, 111, 255, -211, -211, -211, 255, 42, 42, 42, 255, -15, -15, -15, 255, 40, 40, 40, 255, -76, -76, -76, 255, -149, -149, -149, 255, 9, 9, 9, 255, -25, -25, -25, 255, -70, -70, -70, 255, -4, -4, -4, 255, -140, -140, -140, 255, 37, 37, 37, 255, 56, 56, 56, 255, 67, 67, 67, 255, -148, -148, -148, 255, -158, -158, -158, 255, -109, -109, -109, 255, 111, 111, 111, 255, 6, 6, 6, 255, -157, -157, -157, 255, 63, 63, 63, 255, 58, 58, 58, 255, -154, -154, -154, 255, 126, 126, 126, 255, -144, -144, -144, 255, 78, 78, 78, 255, 39, 39, 39, 255, 11, 11, 11, 255, 35, 35, 35, 255, 78, 78, 78, 255, 230, 230, 230, 255, -2, -2, -2, 255, -184, -184, -184, 255, -99, -99, -99, 255, 136, 136, 136, 255, -26, -26, -26, 255, 46, 46, 46, 255, 94, 94, 94, 255, 41, 41, 41, 255, -47, -47, -47, 255, -13, -13, -13, 255, 230, 230, 230, 255, 83, 83, 83, 255, -47, -47, -47, 255, -13, -13, -13, 255, 37, 37, 37, 255, -93, -93, -93, 255, -8, -8, -8, 255, -75, -75, -75, 255, -140, -140, -140, 255, -61, -61, -61, 255, -84, -84, -84, 255, -57, -57, -57, 255, 46, 46, 46, 255, -175, -175, -175, 255, 53, 53, 53, 255, 66, 66, 66, 255, -70, -70, -70, 255, -66, -66, -66, 255, 4, 4, 4, 255, 141, 141, 141, 255, -27, -27, -27, 255, -102, -102, -102, 255, 122, 122, 122, 255, -205, -205, -205, 255, 49, 49, 49, 255, -12, -12, -12, 255, 45, 45, 45, 255, -77, -77, -77, 255, -146, -146, -146, 255, 10, 10, 10, 255, -27, -27, -27, 255, -77, -77, -77, 255, -13, -13, -13, 255, -147, -147, -147, 255, 37, 37, 37, 255, 47, 47, 47, 255, 66, 66, 66, 255, -153, -153, -153, 255, -165, -165, -165, 255, -109, -109, -109, 255, 112, 112, 112, 255, 9, 9, 9, 255, -162, -162, -162, 255, 65, 65, 65, 255, 76, 76, 76, 255, -158, -158, -158, 255, 143, 143, 143, 255, -150, -150, -150, 255, 57, 57, 57, 255, 37, 37, 37, 255, 12, 12, 12, 255, 42, 42, 42, 255, 76, 76, 76, 255, 228, 228, 228, 255, -2, -2, -2, 255, -195, -195, -195, 255, -91, -91, -91, 255, 137, 137, 137, 255, -19, -19, -19, 255, 37, 37, 37, 255, 108, 108, 108, 255, 27, 27, 27, 255, -33, -33, -33, 255, -1, -1, -1, 255, 222, 222, 222, 255, 90, 90, 90, 255, -43, -43, -43, 255, -12, -12, -12, 255, 32, 32, 32, 255, -94, -94, -94, 255, -7, -7, -7, 255, -66, -66, -66, 255, -130, -130, -130, 255, -64, -64, -64, 255, -95, -95, -95, 255, -51, -51, -51, 255, 47, 47, 47, 255, -165, -165, -165, 255, 46, 46, 46, 255, 73, 73, 73, 255, -68, -68, -68, 255, -71, -71, -71, 255, 5, 5, 5, 255, 145, 145, 145, 255, -31, -31, -31, 255, -98, -98, -98, 255, 105, 105, 105, 255, -202, -202, -202, 255, 49, 49, 49, 255, -24, -24, -24, 255, 40, 40, 40, 255, -77, -77, -77, 255, -151, -151, -151, 255, 12, 12, 12, 255, -29, -29, -29, 255, -83, -83, -83, 255, -11, -11, -11, 255, -137, -137, -137, 255, 32, 32, 32, 255, 42, 42, 42, 255, 75, 75, 75, 255, -160, -160, -160, 255, -166, -166, -166, 255, -115, -115, -115, 255, 101, 101, 101, 255, 11, 11, 11, 255, -166, -166, -166, 255, 63, 63, 63, 255, 74, 74, 74, 255, -156, -156, -156, 255, 132, 132, 132, 255, -145, -145, -145, 255, 62, 62, 62, 255, 43, 43, 43, 255, 25, 25, 25, 255, 46, 46, 46, 255, 87, 87, 87, 255, 225, 225, 225, 255, 1, 1, 1, 255, -188, -188, -188, 255, -90, -90, -90, 255, 135, 135, 135, 255, -24, -24, -24, 255, 40, 40, 40, 255, 102, 102, 102, 255, 38, 38, 38, 255, -42, -42, -42, 255, 7, 7, 7, 255, 234, 234, 234, 255, 89, 89, 89, 255, -33, -33, -33, 255, -13, -13, -13, 255, 24, 24, 24, 255, -87, -87, -87, 255, -18, -18, -18, 255, -75, -75, -75, 255, -136, -136, -136, 255, -57, -57, -57, 255, -83, -83, -83, 255, -40, -40, -40, 255, 48, 48, 48, 255, -168, -168, -168, 255, 43, 43, 43, 255, 82, 82, 82, 255, -70, -70, -70, 255, -73, -73, -73, 255, 6, 6, 6, 255, 149, 149, 149, 255, -44, -44, -44, 255, -107, -107, -107, 255, 117, 117, 117, 255, -196, -196, -196, 255, 53, 53, 53, 255, -21, -21, -21, 255, 35, 35, 35, 255, -69, -69, -69, 255, -144, -144, -144, 255, 19, 19, 19, 255, -20, -20, -20, 255, -74, -74, -74, 255, -12, -12, -12, 255, -137, -137, -137, 255, 35, 35, 35, 255, 46, 46, 46, 255, 67, 67, 67, 255, -151, -151, -151, 255, -163, -163, -163, 255, -113, -113, -113, 255, 109, 109, 109, 255, 18, 18, 18, 255, -169, -169, -169, 255, 65, 65, 65, 255, 71, 71, 71, 255, -154, -154, -154, 255, 134, 134, 134, 255, -142, -142, -142, 255, 77, 77, 77, 255, 40, 40, 40, 255, 5, 5, 5, 255, 44, 44, 44, 255, 97, 97, 97, 255, 228, 228, 228, 255, -16, -16, -16, 255, -192, -192, -192, 255, -88, -88, -88, 255, 131, 131, 131, 255, -26, -26, -26, 255, 32, 32, 32, 255, 98, 98, 98, 255, 29, 29, 29, 255, -41, -41, -41, 255, 9, 9, 9, 255, 235, 235, 235, 255, 102, 102, 102, 255, -35, -35, -35, 255, -14, -14, -14, 255, 26, 26, 26, 255, -90, -90, -90, 255, -1, -1, -1, 255, -72, -72, -72, 255, -130, -130, -130, 255, -48, -48, -48, 255, -85, -85, -85, 255, -47, -47, -47, 255, 45, 45, 45, 255, -162, -162, -162, 255, 45, 45, 45, 255, 77, 77, 77, 255, -77, -77, -77, 255, -72, -72, -72, 255, 10, 10, 10, 255, 140, 140, 140, 255, -47, -47, -47, 255, -110, -110, -110, 255, 111, 111, 111, 255, -204, -204, -204, 255, 54, 54, 54, 255, -18, -18, -18, 255, 42, 42, 42, 255, -73, -73, -73, 255, -138, -138, -138, 255, 26, 26, 26, 255, -25, -25, -25, 255, -82, -82, -82, 255, -15, -15, -15, 255, -148, -148, -148, 255, 26, 26, 26, 255, 30, 30, 30, 255, 67, 67, 67, 255, -156, -156, -156, 255, -165, -165, -165, 255, -104, -104, -104, 255, 95, 95, 95, 255, 12, 12, 12, 255, -171, -171, -171, 255, 62, 62, 62, 255, 82, 82, 82, 255, -153, -153, -153, 255, 131, 131, 131, 255, -147, -147, -147, 255, 71, 71, 71, 255, 46, 46, 46, 255, 19, 19, 19, 255, 51, 51, 51, 255, 91, 91, 91, 255, 219, 219, 219, 255, -10, -10, -10, 255, -193, -193, -193, 255, -75, -75, -75, 255, 134, 134, 134, 255, -9, -9, -9, 255, 31, 31, 31, 255, 92, 92, 92, 255, 36, 36, 36, 255, -32, -32, -32, 255, 20, 20, 20, 255, 237, 237, 237, 255, 100, 100, 100, 255, -26, -26, -26, 255, -19, -19, -19, 255, 12, 12, 12, 255, -80, -80, -80, 255, -6, -6, -6, 255, -70, -70, -70, 255, -135, -135, -135, 255, -60, -60, -60, 255, -86, -86, -86, 255, -53, -53, -53, 255, 43, 43, 43, 255, -172, -172, -172, 255, 51, 51, 51, 255, 79, 79, 79, 255, -74, -74, -74, 255, -80, -80, -80, 255, 15, 15, 15, 255, 147, 147, 147, 255, -44, -44, -44, 255, -106, -106, -106, 255, 116, 116, 116, 255, -200, -200, -200, 255, 51, 51, 51, 255, -19, -19, -19, 255, 32, 32, 32, 255, -64, -64, -64, 255, -142, -142, -142, 255, 26, 26, 26, 255, -11, -11, -11, 255, -70, -70, -70, 255, -23, -23, -23, 255, -143, -143, -143, 255, 37, 37, 37, 255, 44, 44, 44, 255, 60, 60, 60, 255, -158, -158, -158, 255, -152, -152, -152, 255, -104, -104, -104, 255, 102, 102, 102, 255, 12, 12, 12, 255, -166, -166, -166, 255, 57, 57, 57, 255, 71, 71, 71, 255, -152, -152, -152, 255, 129, 129, 129, 255, -146, -146, -146, 255, 70, 70, 70, 255, 38, 38, 38, 255, 6, 6, 6, 255, 42, 42, 42, 255, 93, 93, 93, 255, 223, 223, 223, 255, -14, -14, -14, 255, -199, -199, -199, 255, -81, -81, -81, 255, 128, 128, 128, 255, -27, -27, -27, 255, 29, 29, 29, 255, 106, 106, 106, 255, 34, 34, 34, 255, -40, -40, -40, 255, 10, 10, 10, 255, 239, 239, 239, 255, 102, 102, 102, 255, -32, -32, -32, 255, -17, -17, -17, 255, 38, 38, 38, 255, -92, -92, -92, 255, 2, 2, 2, 255, -71, -71, -71, 255, -142, -142, -142, 255, -53, -53, -53, 255, -88, -88, -88, 255, -59, -59, -59, 255, 51, 51, 51, 255, -164, -164, -164, 255, 43, 43, 43, 255, 72, 72, 72, 255, -80, -80, -80, 255, -72, -72, -72, 255, 12, 12, 12, 255, 138, 138, 138, 255, -56, -56, -56, 255, -118, -118, -118, 255, 112, 112, 112, 255, -196, -196, -196, 255, 43, 43, 43, 255, -21, -21, -21, 255, 43, 43, 43, 255, -75, -75, -75, 255, -141, -141, -141, 255, 25, 25, 25, 255, -26, -26, -26, 255, -69, -69, -69, 255, -16, -16, -16, 255, -148, -148, -148, 255, 35, 35, 35, 255, 39, 39, 39, 255, 64, 64, 64, 255, -155, -155, -155, 255, -164, -164, -164, 255, -112, -112, -112, 255, 102, 102, 102, 255, 11, 11, 11, 255, -169, -169, -169, 255, 57, 57, 57, 255, 72, 72, 72, 255, -151, -151, -151, 255, 127, 127, 127, 255, -144, -144, -144, 255, 73, 73, 73, 255, 55, 55, 55, 255, 7, 7, 7, 255, 55, 55, 55, 255, 89, 89, 89, 255, 213, 213, 213, 255, -9, -9, -9, 255, -190, -190, -190, 255, -76, -76, -76, 255, 142, 142, 142, 255, -7, -7, -7, 255, 23, 23, 23, 255, 97, 97, 97, 255, 33, 33, 33, 255, -30, -30, -30, 255, 11, 11, 11, 255, 232, 232, 232, 255, 102, 102, 102, 255, -32, -32, -32, 255, -9, -9, -9, 255, 30, 30, 30, 255, -86, -86, -86, 255, -5, -5, -5, 255, -79, -79, -79, 255, -145, -145, -145, 255, -60, -60, -60, 255, -69, -69, -69, 255, -45, -45, -45, 255, 52, 52, 52, 255, -166, -166, -166, 255, 36, 36, 36, 255, 84, 84, 84, 255, -74, -74, -74, 255, -86, -86, -86, 255, 10, 10, 10, 255, 136, 136, 136, 255, -56, -56, -56, 255, -102, -102, -102, 255, 120, 120, 120, 255, -191, -191, -191, 255, 48, 48, 48, 255, -14, -14, -14, 255, 31, 31, 31, 255, -72, -72, -72, 255, -142, -142, -142, 255, 23, 23, 23, 255, -13, -13, -13, 255, -75, -75, -75, 255, -24, -24, -24, 255, -137, -137, -137, 255, 27, 27, 27, 255, 51, 51, 51, 255, 49, 49, 49, 255, -155, -155, -155, 255, -158, -158, -158, 255, -111, -111, -111, 255, 92, 92, 92, 255, 13, 13, 13, 255, -161, -161, -161, 255, 51, 51, 51, 255, 80, 80, 80, 255, -152, -152, -152, 255, 126, 126, 126, 255, -152, -152, -152, 255, 74, 74, 74, 255, 59, 59, 59, 255, 17, 17, 17, 255, 48, 48, 48, 255, 88, 88, 88, 255, 218, 218, 218, 255, -7, -7, -7, 255, -202, -202, -202, 255, -80, -80, -80, 255, 136, 136, 136, 255, -15, -15, -15, 255, 32, 32, 32, 255, 104, 104, 104, 255, 39, 39, 39, 255, -34, -34, -34, 255, 16, 16, 16, 255, 240, 240, 240, 255, 106, 106, 106, 255, -28, -28, -28, 255, -21, -21, -21, 255, 20, 20, 20, 255, -94, -94, -94, 255, 3, 3, 3, 255, -67, -67, -67, 255, -149, -149, -149, 255, -60, -60, -60, 255, -92, -92, -92, 255, -48, -48, -48, 255, 46, 46, 46, 255, -163, -163, -163, 255, 28, 28, 28, 255, 81, 81, 81, 255, -68, -68, -68, 255, -75, -75, -75, 255, -1, -1, -1, 255, 142, 142, 142, 255, -53, -53, -53, 255, -108, -108, -108, 255, 113, 113, 113, 255, -190, -190, -190, 255, 55, 55, 55, 255, -11, -11, -11, 255, 37, 37, 37, 255, -74, -74, -74, 255, -148, -148, -148, 255, 38, 38, 38, 255, -23, -23, -23, 255, -60, -60, -60, 255, -20, -20, -20, 255, -141, -141, -141, 255, 39, 39, 39, 255, 35, 35, 35, 255, 55, 55, 55, 255, -155, -155, -155, 255, -153, -153, -153, 255, -103, -103, -103, 255, 86, 86, 86, 255, 2, 2, 2, 255, -165, -165, -165, 255, 61, 61, 61, 255, 75, 75, 75, 255, -143, -143, -143, 255, 130, 130, 130, 255, -139, -139, -139, 255, 70, 70, 70, 255, 44, 44, 44, 255, 11, 11, 11, 255, 55, 55, 55, 255, 83, 83, 83, 255, 218, 218, 218, 255, -20, -20, -20, 255, -199, -199, -199, 255, -88, -88, -88, 255, 138, 138, 138, 255, -15, -15, -15, 255, 19, 19, 19, 255, 95, 95, 95, 255, 46, 46, 46, 255, -32, -32, -32, 255, 26, 26, 26, 255, 229, 229, 229, 255, 93, 93, 93, 255, -21, -21, -21, 255, -16, -16, -16, 255, 31, 31, 31, 255, -90, -90, -90, 255, 0, 0, 0, 255, -64, -64, -64, 255, -147, -147, -147, 255, -69, -69, -69, 255, -82, -82, -82, 255, -41, -41, -41, 255, 55, 55, 55, 255, -169, -169, -169, 255, 50, 50, 50, 255, 88, 88, 88, 255, -75, -75, -75, 255, -72, -72, -72, 255, 5, 5, 5, 255, 145, 145, 145, 255, -62, -62, -62, 255, -111, -111, -111, 255, 113, 113, 113, 255, -198, -198, -198, 255, 54, 54, 54, 255, -21, -21, -21, 255, 39, 39, 39, 255, -75, -75, -75, 255, -144, -144, -144, 255, 26, 26, 26, 255, -28, -28, -28, 255, -70, -70, -70, 255, 0, 0, 0, 255, -138, -138, -138, 255, 31, 31, 31, 255, 43, 43, 43, 255, 52, 52, 52, 255, -158, -158, -158, 255, -162, -162, -162, 255, -106, -106, -106, 255, 84, 84, 84, 255, 0, 0, 0, 255, -159, -159, -159, 255, 63, 63, 63, 255, 70, 70, 70, 255, -142, -142, -142, 255, 128, 128, 128, 255, -151, -151, -151, 255, 70, 70, 70, 255, 51, 51, 51, 255, 11, 11, 11, 255, 49, 49, 49, 255, 84, 84, 84, 255, 214, 214, 214, 255, -5, -5, -5, 255, -195, -195, -195, 255, -77, -77, -77, 255, 133, 133, 133, 255, -18, -18, -18, 255, 29, 29, 29, 255, 107, 107, 107, 255, 39, 39, 39, 255, -35, -35, -35, 255, 17, 17, 17, 255, 231, 231, 231, 255, 95, 95, 95, 255, -32, -32, -32, 255, -6, -6, -6, 255, 39, 39, 39, 255, -95, -95, -95, 255, 9, 9, 9, 255, -57, -57, -57, 255, -148, -148, -148, 255, -61, -61, -61, 255, -90, -90, -90, 255, -39, -39, -39, 255, 46, 46, 46, 255, -168, -168, -168, 255, 42, 42, 42, 255, 76, 76, 76, 255, -72, -72, -72, 255, -65, -65, -65, 255, 8, 8, 8, 255, 143, 143, 143, 255, -59, -59, -59, 255, -104, -104, -104, 255, 120, 120, 120, 255, -188, -188, -188, 255, 44, 44, 44, 255, -15, -15, -15, 255, 42, 42, 42, 255, -72, -72, -72, 255, -152, -152, -152, 255, 47, 47, 47, 255, -18, -18, -18, 255, -70, -70, -70, 255, -13, -13, -13, 255, -138, -138, -138, 255, 24, 24, 24, 255, 43, 43, 43, 255, 59, 59, 59, 255, -140, -140, -140, 255, -154, -154, -154, 255, -101, -101, -101, 255, 88, 88, 88, 255, 1, 1, 1, 255, -159, -159, -159, 255, 43, 43, 43, 255, 66, 66, 66, 255, -146, -146, -146, 255, 129, 129, 129, 255, -143, -143, -143, 255, 67, 67, 67, 255, 40, 40, 40, 255, 6, 6, 6, 255, 57, 57, 57, 255, 79, 79, 79, 255, 223, 223, 223, 255, -8, -8, -8, 255, -197, -197, -197, 255, -78, -78, -78, 255, 129, 129, 129, 255, -17, -17, -17, 255, 15, 15, 15, 255, 91, 91, 91, 255, 33, 33, 33, 255, -37, -37, -37, 255, 13, 13, 13, 255, 238, 238, 238, 255, 102, 102, 102, 255, -30, -30, -30, 255, -15, -15, -15, 255, 37, 37, 37, 255, -83, -83, -83, 255, 4, 4, 4, 255, -74, -74, -74, 255, -135, -135, -135, 255, -58, -58, -58, 255, -80, -80, -80, 255, -53, -53, -53, 255, 30, 30, 30, 255, -174, -174, -174, 255, 37, 37, 37, 255, 67, 67, 67, 255, -76, -76, -76, 255, -71, -71, -71, 255, 31, 31, 31, 255, 132, 132, 132, 255, -47, -47, -47, 255, -107, -107, -107, 255, 122, 122, 122, 255, -193, -193, -193, 255, 56, 56, 56, 255, -12, -12, -12, 255], "height": 18, "width": 64}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningConv", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": false, "inputs": {"16050694651340": {"name": "input", "reference_var_id": "16050694496510", "reference_layer_id": "1605069449651", "isDefault": true}}, "outputs": {"16050694651340": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069479697", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069449651", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Conv_dim": "2D", "Patch_size": "3", "Stride": "2", "Padding": "SAME", "Feature_maps": "8", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false, "PoolBool": false, "Pooling": "Max", "Pool_area": "2", "Pool_padding": "SAME", "Pool_stride": "2"}, "isSettingsLocked": true}, "1605069479697": {"layerId": "1605069479697", "copyId": null, "copyContainerElement": null, "layerName": "Dense_1", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 100, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_1(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_1'\n        self._n_neurons = 100\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 124.66666666666667, "left": 158.66666666666669}, "tutorialId": "", "OutputDim": "100", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 100, "series": [{"type": "line", "x_data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "data": [-0.11111444234848022, -0.2687795162200928, -0.2665114402770996, -0.3880312442779541, 0.6344204545021057, -0.00652921199798584, 0.1099240779876709, 0.4723779261112213, -0.012358903884887695, -0.3368852138519287, 0.46149927377700806, -0.4193193316459656, -0.436704158782959, -0.3245699405670166, -0.17641806602478027, 0.29352810978889465, -0.25406938791275024, 0.4601658582687378, 0.5688727498054504, -0.07626962661743164, 0.06151874363422394, 0.6892160773277283, -0.2906534671783447, 0.0018752962350845337, -0.08936554193496704, -0.0744355320930481, 0.059811223298311234, -0.28514766693115234, 0.14876112341880798, -0.19496852159500122, -0.21100878715515137, -0.06321102380752563, 0.4359084963798523, 0.07666381448507309, 0.07234866172075272, 0.47521233558654785, 0.13478124141693115, -0.3096517324447632, -0.3083299398422241, 0.08654989302158356, -0.27476823329925537, -0.191552996635437, -0.12029260396957397, 0.6054161787033081, 0.14770463109016418, -0.08326852321624756, 0.02330884337425232, -0.13249599933624268, 0.30717501044273376, -0.5394116640090942, -0.386130154132843, 0.3995603024959564, -0.27427613735198975, 0.11264605820178986, 0.6397473216056824, 0.17215058207511902, 0.3593307435512543, 0.8491337895393372, 0.15751595795154572, -0.01421278715133667, 0.2277679145336151, 0.40546655654907227, 0.09332060813903809, -0.44722193479537964, 0.15632382035255432, -0.20300602912902832, -0.5706562995910645, -0.2898690104484558, 0.20751447975635529, 0.45939719676971436, 0.3124679625034332, 0.27340349555015564, -0.03702181577682495, 0.49828264117240906, -0.07017546892166138, -0.2080533504486084, -0.0653194785118103, 0.09190409630537033, -0.1784735918045044, -0.20082545280456543, -0.2464078664779663, -0.4275211691856384, -0.29294872283935547, -0.23589974641799927, 0.13892465829849243, 0.2452065348625183, 0.35560303926467896, -0.0742802619934082, 0.32699137926101685, -0.1754899024963379, -0.2252882719039917, 0.16158123314380646, 0.053949788212776184, 0.1321849524974823, -0.4421268701553345, -0.15451908111572266, -0.05238640308380127, 0.06477054953575134, -0.21226048469543457, 0.5634804368019104]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050694796970": {"name": "input", "reference_var_id": "16050694651340", "reference_layer_id": "1605069465134", "isDefault": true}}, "outputs": {"16050694796980": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069496107", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069465134", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069496107": {"layerId": "1605069496107", "copyId": null, "copyContainerElement": null, "layerName": "Dense_2", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 50, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_2(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_2'\n        self._n_neurons = 50\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 124.66666666666667, "left": 249.33333333333334}, "tutorialId": "", "OutputDim": "50", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 50, "series": [{"type": "line", "x_data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "data": [0.029284700751304626, 0.3213546872138977, -0.14621448516845703, 0.19280476868152618, 0.34921765327453613, -0.01970994472503662, 0.04166330397129059, -0.08891135454177856, 0.03316839411854744, 0.3395580053329468, -0.40043121576309204, -0.22423923015594482, 0.37375086545944214, -0.036597251892089844, -0.3824193477630615, 0.1606287658214569, -0.07685041427612305, -0.21306705474853516, 0.4331963062286377, 0.039153289049863815, -0.3673751950263977, 0.19118933379650116, -0.11112314462661743, 0.4374607503414154, 0.0007816441357135773, -0.2332308292388916, 0.7771818041801453, -0.18169981241226196, 0.1286238729953766, -0.104225754737854, 0.04814489185810089, -0.08713197708129883, -0.0101853609085083, -0.06466972827911377, 0.10893550515174866, 0.43044400215148926, 0.16170305013656616, -0.06944108009338379, -0.1206357479095459, -0.2414243221282959, 0.3014713525772095, 0.31703299283981323, -0.25984275341033936, -0.28115594387054443, 0.7347080707550049, -0.183832049369812, -0.2150571346282959, -0.2705819606781006, 0.2636556029319763, -0.021128296852111816]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050694961070": {"name": "input", "reference_var_id": "16050694796980", "reference_layer_id": "1605069479697", "isDefault": true}}, "outputs": {"16050694961070": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069502129", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069479697", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "initial", "W", "b", "flat_node"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069502129": {"layerId": "1605069502129", "copyId": null, "copyContainerElement": null, "layerName": "Dense_3", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 10, "Activation_function": "ReLU", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class DeepLearningFC_Dense_3(Tf1xLayer):\n    def __init__(self):\n        self._scope = 'DeepLearningFC_Dense_3'\n        self._n_neurons = 10\n        self._variables = {}\n        self._keep_prob = 1\n\n    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:\n        \"\"\" Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor.\"\"\"\n        \n                            \n                \n        x = inputs['input']\n        n_inputs = np.prod(x.get_shape().as_list()[1:], dtype=np.int32)\n        b_norm = False\n        y_before = None\n        y = None\n\n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            is_training = tf.constant(True) if is_training is None else is_training\n            \n            initial = tf.random.truncated_normal((n_inputs, self._n_neurons), stddev=0.1)\n            W = tf.compat.v1.get_variable('W', initializer=initial)\n\n            initial = tf.constant(0., shape=[self._n_neurons])\n            b = tf.compat.v1.get_variable('b', initializer=initial)\n            flat_node = tf.cast(tf.reshape(x, [-1, n_inputs]), dtype=tf.float32)\n            y = tf.matmul(flat_node, W) + b\n\n            y_before = y\n            \n\n            y = tf.nn.elu(y)\n        \n\n            \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n\n            \n        self._outputs = {            \n            'output': y,\n            'y_before': y_before,\n            'initial': tf.expand_dims(initial, axis=0),            \n            'W': tf.expand_dims(W, axis=0),            \n            'b': tf.expand_dims(b, axis=0),            \n            'flat_node': tf.expand_dims(flat_node, axis=0),            \n        }\n                            \n\n        return self._outputs\n\n    def get_sample(self) -> Dict[str, tf.Tensor]:\n        \"\"\" Returns a dictionary of sample tensors\n\n        Returns:\n            A dictionary of sample tensors\n        \"\"\"\n        return self._outputs\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()\n\n    @property\n    def trainable_variables(self):\n        \"\"\"Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"\n        variables = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self._scope)\n        variables = {v.name: v for v in variables}\n        return variables\n\n    @property\n    def weights(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            w = tf.compat.v1.get_variable('W')\n            return {w.name: w}\n\n    @property\n    def biases(self):\n        \"\"\"Any weight tensors belonging to this layer that should be rendered in the frontend.\n\n        Return:\n            A dictionary with tensor names for keys and tensors for values.\n        \"\"\"        \n        with tf.compat.v1.variable_scope(self._scope, reuse=tf.compat.v1.AUTO_REUSE):\n            b = tf.compat.v1.get_variable('b')\n            return {b.name: b}"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 124.66666666666667, "left": 340.00000000000006}, "tutorialId": "", "OutputDim": "10", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 10, "series": [{"type": "bar", "x_data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "data": [0.37093526124954224, -0.06718140840530396, -0.07986116409301758, 0.04383402690291405, -0.30911529064178467, 0.04518193006515503, -0.0009038448333740234, -0.04953819513320923, 0.2058464139699936, 0.035394225269556046]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050695021290": {"name": "input", "reference_var_id": "16050694961070", "reference_layer_id": "1605069496107", "isDefault": true}}, "outputs": {"16050695021300": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069507514", "dst_var": "input"}], "backward_connections": [{"src_id": "1605069496107", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": ["output", "y_before", "initial", "W", "b", "flat_node"], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}, "isSettingsLocked": true}, "1605069507514": {"layerId": "1605069507514", "copyId": null, "copyContainerElement": null, "layerName": "Dense_4", "layerType": "Other", "layerSettings": {"Dropout": false, "Keep_prob": "1", "Neurons": 1, "Activation_function": "None", "Batch_norm": false}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 124.66666666666667, "left": 430.6666666666667}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 1, "series": [{"type": "bar", "x_data": null, "data": [0.05963980033993721]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DeepLearningFC", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16050695075140": {"name": "input", "reference_var_id": "16050695021300", "reference_layer_id": "1605069502129", "isDefault": true}}, "outputs": {"16050695075140": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069713570", "dst_var": "predictions"}], "backward_connections": [{"src_id": "1605069502129", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Neurons": "10", "Activation_function": "Sigmoid", "Dropout": false, "Keep_prob": "1", "Batch_norm": false}}, "1605069713570": {"layerId": "1605069713570", "copyId": null, "copyContainerElement": null, "layerName": "Regression_1", "layerType": "Training", "layerSettings": {"Learning_rate": 0.001, "Decay_rate": 0.96, "Decay_steps": 100000, "Momentum": 0.9, "Beta_2": 0.999, "Beta_1": 0.9, "Optimizer": "ADAM", "Epochs": 20, "Batch_size": 100, "Labels": "1605069721330", "Class_weights": 1, "Use_CPU": true}, "layerSettingsTabName": "Settings", "layerCode": "################################################### Main #####################################################\n \n\n\n                    \nclass TrainRegression_Regression_1(RegressionLayer):\n    def __init__(self):\n        \n                            \n        \n        self._n_epochs = 10\n        self._batch_size = 100\n\n        self._stopped = False\n        self._paused = False\n        self._headless = False\n        self._status = 'created'\n        \n        self._loss_training = 0.0\n        self._loss_validation = 0.0\n        self._loss_testing = 0.0\n\n        self._squared_error_training = 0.0\n        self._squared_error_validation = 0.0\n        self._squared_error_testing = 0.0\n\n        self._squared_variance_training = 0.0\n        self._squared_variance_validation = 0.0\n        self._squared_variance_testing = 0.0\n\n        self._r_squared_training = 0.0\n        self._r_squared_validation = 0.0               \n        self._r_squared_testing = 0.0\n\n\n        self._variables = {}\n        self._layer_outputs = {}\n        self._layer_weights = {}\n        self._layer_biases = {}        \n        self._layer_gradients = {}\n\n        self._training_iteration = 0\n        self._validation_iteration = 0\n        self._testing_iteration = 0\n\n        self._trn_sz_tot = 0\n        self._val_sz_tot = 0\n        self._tst_sz_tot = 0\n\n        self._checkpoint = None\n            \n    def init_layer(self, graph:Graph, mode = 'initializing'):\n        \"\"\"This is the function that makes the training layer runnable. We take all variable initializations for tensors and initializers and wrap them in dictionaries\n        to be called in run().\n        \"\"\"\n        self._mode = mode\n        self._status = 'initializing'\n\n        output_layer_id = \"DeepLearningFC_Dense_4\"\n        target_layer_id = \"DataData_Local_2\"\n\n        input_data_nodes = graph.get_direct_data_nodes(output_layer_id)\n        label_data_nodes = graph.get_direct_data_nodes(target_layer_id)\n\n        assert len(input_data_nodes) == 1\n        assert len(label_data_nodes) == 1\n        input_data_node = input_data_nodes[0]\n        label_data_node = label_data_nodes[0]\n\n        self._trn_sz_tot = input_data_node.layer.size_training\n        self._val_sz_tot = input_data_node.layer.size_validation\n        self._tst_sz_tot = input_data_node.layer.size_testing\n\n        input_sample = input_data_node.layer_instance.sample\n        label_sample = label_data_node.layer_instance.sample\n\n\n        # Make training set\n        dataset_trn = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_training,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_training,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n\n        # Make validation set\n        dataset_val = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_validation,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_validation,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n\n        # Make testing set\n        dataset_tst = tf.data.Dataset.zip((\n            tf.data.Dataset.from_generator(\n                input_data_node.layer_instance.make_generator_testing,\n                output_shapes={k: v.shape for k, v in input_sample.items()},\n                output_types={k: v.dtype for k, v in input_sample.items()}\n            ),\n            tf.data.Dataset.from_generator(\n                label_data_node.layer_instance.make_generator_testing,\n                output_shapes={k: v.shape for k, v in label_sample.items()},\n                output_types={k: v.dtype for k, v in label_sample.items()}\n            )\n        ))\n        \n        self._export_data_gen = input_data_node.layer_instance.make_generator_training()\n\n        dataset_trn = dataset_trn.batch(self._batch_size)\n        dataset_val = dataset_val.batch(self._batch_size)\n        dataset_tst = dataset_tst.batch(1)                \n\n        # Make initializers\n        with tf.variable_scope('TrainRegression_Regression_1/train', reuse=tf.AUTO_REUSE):\n            is_training = tf.get_variable(name=\"is_train\", dtype=tf.bool, initializer=False)\n        \n        iterator = tf.data.Iterator.from_structure(dataset_trn.output_types, dataset_trn.output_shapes)\n\n        trn_init = iterator.make_initializer(dataset_trn)\n        trn_init = tf.group([trn_init, is_training.assign(True if self._batch_size > 1 else False)])\n        \n        val_init = iterator.make_initializer(dataset_val)\n        val_init = tf.group([val_init, is_training.assign(False)])\n\n        tst_init = iterator.make_initializer(dataset_tst)        \n        tst_init = tf.group([tst_init, is_training.assign(False)])\n\n        input_tensor, label_tensor = iterator.get_next()\n\n        # Build the TensorFlow graph\n\n        def build_graph(input_tensor, label_tensor):\n            layer_output_tensors = {\n                input_data_node.layer_id: input_tensor,\n                label_data_node.layer_id: label_tensor\n            }\n\n            for dst_node in graph.inner_nodes:\n                inputs = {\n                    dst_var: layer_output_tensors[src_node.layer_id][src_var]\n                    for src_node, src_var, dst_var in graph.get_input_connections(dst_node)\n                }\n                y = dst_node.layer_instance(\n                    inputs,\n                    is_training=is_training\n                )\n                layer_output_tensors[dst_node.layer_id] = y\n\n            return layer_output_tensors\n\n        layer_output_tensors = build_graph(input_tensor, label_tensor)\n\n        output_tensor = None\n        target_tensor = None\n\n        for src_node, src_var, dst_var in graph.get_input_connections(graph.active_training_node):\n            if dst_var == 'predictions':\n                output_tensor = layer_output_tensors[output_layer_id][src_var]\n                output_var_name = src_var\n            if dst_var == 'labels':\n                target_tensor = layer_output_tensors[target_layer_id][src_var]\n        # ----\n        update_ops = tf.compat.v1.get_collection(tf.GraphKeys.UPDATE_OPS)\n\n        # Create an exportable version of the TensorFlow graph\n        \n        self._input_tensor_export = {\n            key: tf.placeholder(shape=shape, dtype=type_)\n            for (key, shape), (_, type_) in zip(dataset_trn.output_shapes[0].items(), dataset_trn.output_types[0].items())            \n        }\n\n        self._output_tensor_export = build_graph(\n            self._input_tensor_export,\n            {                                                                                                                                                                       \n                key: tf.placeholder(shape=shape, dtype=type_)\n                for (key, shape), (_, type_) in zip(dataset_trn.output_shapes[1].items(), dataset_trn.output_types[1].items())\n            }             \n        )[output_layer_id]\n\n        # Calculate loss and other important metrics for RegressionLayer\n        # Mean estimation for entire dataset included here\n        #loss_tensor = (tf.reduce_mean(tf.abs(output_tensor - target_tensor)))\n        #loss_tensor = (tf.keras.losses.MSE(target_tensor, output_tensor))\n        loss_tensor = (tf.reduce_mean(tf.keras.losses.MSE(target_tensor, output_tensor)))\n        \n        reg_error_tensor = tf.reduce_sum((output_tensor - target_tensor)) \n        squared_error_tensor = (tf.reduce_sum(tf.square(output_tensor - target_tensor)))\n\n        y_bar_numerator = tf.constant(0.0)\n        y_bar_numerator += tf.reduce_sum(target_tensor)\n\n        y_bar_denominator = tf.constant(0.0)\n        y_bar_denominator += self._batch_size\n\n        y_bar_tensor = y_bar_numerator / y_bar_denominator\n\n\n\n        squared_variance_tensor = tf.reduce_sum(tf.square(target_tensor - y_bar_tensor))\n        r_squared_tensor = 1 - (tf.truediv(squared_variance_tensor,squared_error_tensor))\n\n        global_step = None\n\n        optimizer = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999)\n\n        layer_weight_tensors = {}\n        layer_bias_tensors = {}        \n        layer_gradient_tensors = {}\n        for node in graph.inner_nodes:\n            if not isinstance(node.layer, Tf1xLayer): # In case of pure custom layers...\n                continue\n            \n            layer_weight_tensors[node.layer_id] = node.layer.weights\n            layer_bias_tensors[node.layer_id] = node.layer.biases            \n            \n            if len(node.layer.trainable_variables) > 0:\n                gradients = {}\n                for name, tensor in node.layer.trainable_variables.items():\n                    grad_tensor = tf.gradients(loss_tensor, tensor)\n                    if any(x is None for x in grad_tensor):\n                        grad_tensor = tf.constant(0)\n                    gradients[name] = grad_tensor\n                layer_gradient_tensors[node.layer_id] = gradients\n                # self._internal_layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize\n                # self._layer_gradients = self._internal_layer_gradients.copy()\n\n        # trainable_vars = tf.trainable_variables()\n        # grads = tf.gradients(loss_tensor, trainable_vars)\n        # update_weights = optimizer.apply_gradients(zip(grads, trainable_vars), global_step=global_step)        \n        \n        update_weights = optimizer.minimize(loss_tensor, global_step=global_step)\n        update_weights = tf.group([update_weights, update_ops])\n                \n        sess = None\n         \n        config = tf.ConfigProto(device_count={\"GPU\": 0})\n        sess = tf.Session(config=config)\n     \n        self._sess = sess\n\n        trackable_variables = {}\n        trackable_variables.update({x.name: x for x in tf.trainable_variables() if isinstance(x, Trackable)})\n        trackable_variables.update({k: v for k, v in locals().items() if isinstance(v, Trackable) and not isinstance(v, tf.python.data.ops.iterator_ops.Iterator)})\n        self._checkpoint = tf.train.Checkpoint(**trackable_variables)\n        \n        sess.run(tf.global_variables_initializer())\n        \n        checkpoint_directory = 'C:/Users/ARUNESH/Documents/Perceptilabs/Default/NVIDIA/checkpoint'\n        use_checkpoint = False\n        if use_checkpoint:\n            path = tf.train.latest_checkpoint(checkpoint_directory)\n            if path is not None:\n                status = self._checkpoint.restore(path)\n                status.run_restore_ops(session=self._sess)\n            elif path is None and self._mode == 'testing':\n                log.error('There are no saved checkpoint files for this model.')\n                self._sess.close()\n\n\n        self._trn_init = trn_init\n        self._val_init = val_init\n        self._tst_init = tst_init\n\n        self._weights = update_weights\n        self._loss = loss_tensor\n        self._squared_err = squared_error_tensor\n        self._squared_var = squared_variance_tensor\n        self._r_sq = r_squared_tensor\n        self._layer_output = layer_output_tensors\n        self._layer_weight = layer_weight_tensors\n        self._layer_bias = layer_bias_tensors\n        self._layer_gradient = layer_gradient_tensors\n\n\n        \n    def train(self, graph:Graph):\n        \"\"\"Training is done when this function is called. Once the training ends, checkpoint files are saved.\n        \"\"\"\n    \n        \n        \n        sess = self._sess                 \n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n        self._checkpoint_save_path = 'C:/Users/ARUNESH/Documents/Perceptilabs/Default/NVIDIA/checkpoint'\n\n        def train_step(sess):\n            if not self._headless:\n                _, self._loss_training, self._squared_error_training, \\\n                    self._squared_variance_training, self._r_squared_training,\\\n                    self._layer_outputs, self._layer_weights, self._layer_biases, \\\n                    self._layer_gradients \\\n                    = sess.run([\n                        self._weights, self._loss, self._squared_err,\n                        self._squared_var, self._r_sq, \n                        self._layer_output, self._layer_weight, self._layer_bias, self._layer_gradient\n                    ])\n            else:\n                _, self._loss_training, self._squared_error_training, \\\n                    self._squared_variance_training, self._r_squared_training \\\n                    = sess.run([\n                        self._weights, self._loss, self._squared_err,\n                        self._squared_var, self._r_sq \n                    ])\n    \n        def validation_step(sess):\n            if not self._headless:\n                self._loss_validation, self._squared_error_validation, \\\n                    self._squared_variance_validation, self._r_squared_validation, \\\n                    self._layer_outputs, self._layer_weights, self._layer_biases, \\\n                    self._layer_gradients \\\n                    = sess.run([\n                        self._loss, self._squared_err,\n                        self._squared_var, self._r_sq, \n                        self._layer_output, self._layer_weight, self._layer_bias, self._layer_gradient\n                    ])\n            else:\n                self._loss_validation, self._squared_error_validation, \\\n                    self._squared_variance_validation, self._r_squared_validation \\\n                    = sess.run([\n                        self._loss, self._squared_err,\n                        self._squared_var, self._r_sq \n                    ])\n\n        \n        log.info(\"Entering training loop\")\n\n        # Training loop\n        self._epoch = 0\n        while self._epoch < self._n_epochs and not self._stopped:\n            t0 = time.perf_counter()\n            self._training_iteration = 0\n            self._validation_iteration = 0\n            self._status = 'training'\n            sess.run(self._trn_init)            \n            try:\n                while not self._stopped:\n                    train_step(sess)\n                    yield YieldLevel.SNAPSHOT\n                    self._training_iteration += 1\n            except tf.errors.OutOfRangeError:\n                pass\n\n            self._status = 'validation'\n            sess.run(self._val_init)            \n            try:\n                while not self._stopped:\n                    validation_step(sess)\n                    yield YieldLevel.SNAPSHOT                    \n                    self._validation_iteration += 1\n            except tf.errors.OutOfRangeError:\n                pass\n            log.info(\n                f\"Finished epoch {self._epoch+1}/{self._n_epochs} - \"\n                f\"loss training, validation: {self.loss_training:.6f}, {self.loss_validation:.6f} - \"\n                \n            )\n            log.info(f\"Epoch duration: {round(time.perf_counter() - t0, 3)} s\")            \n            \n            self._epoch += 1\n\n\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}            \n        self._status = 'finished'\n        yield YieldLevel.SNAPSHOT\n        self.on_export(self._checkpoint_save_path, 'checkpoint')   \n        sess.close()\n\n \n\n    def test(self, graph:Graph):\n        \"\"\"Testing is done when this function is called. \n        \"\"\"\n\n                  \n        sess = self._sess\n        self._epoch = 0\n\n        def test_step(sess):\n            self._loss_testing, self._squared_error_testing, \\\n                self._squared_variance_testing, self._r_squared_testing, \\\n                self._layer_outputs, self._layer_weights, self._layer_gradients \\\n                = sess.run([\n                    self._loss, self._squared_err,\n                    self._squared_var, self._r_sq,\n                    self._layer_output, self._layer_weight, self._layer_gradient\n                ])\n        \n        # Test loop\n        log.info(\"Entering testing loop\")\n        self._status = 'testing'\n\n        self._testing_iteration = 0\n        sess.run(self._tst_init)                                \n        while not self._stopped:\n            try:\n                test_step(sess)\n                yield YieldLevel.SNAPSHOT\n                self._testing_iteration += 1\n            except tf.errors.OutOfRangeError:\n                self._testing_iteration = 0\n                sess.run(self._tst_init)\n                test_step(sess)   \n                yield YieldLevel.SNAPSHOT\n        \n        self._status = 'finished'\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}\n        yield YieldLevel.SNAPSHOT\n        sess.close()\n\n \n\n    def run(self, graph: Graph, mode = 'initializing'):\n        \"\"\"Called as the main entry point for training. Responsible for training the model.\n\n        Args:\n            graph: A PerceptiLabs Graph object containing references to all layers objects included in the model produced by this training layer.\n        \"\"\"  \n        self.init_layer(graph, mode)\n        self._variables = {k: v for k, v in locals().items() if can_serialize(v)} \n        \n        if mode == 'training':\n            yield from self.train(graph)\n        elif mode == 'testing':\n            yield from self.test(graph)\n\n\n    def on_export(self, path: str, mode: str) -> None:\n        \"\"\"Called when the export button is clicked in the frontend.\n        It is up to the implementing layer to save the model to disk.\n        \n        Args:\n            path: the directory where the exported model will be stored.\n            mode: how to export the model. Made available to frontend via 'export_modes' property.\"\"\"\n\n        log.debug(f\"Export called. Project path = {path}, mode = {mode}\")\n        \n        if mode in ['TFModel', 'TFLite', 'TFQuantized']:\n            pb_path = os.path.join(path, '1')\n            if os.path.exists(pb_path):\n                shutil.rmtree(pb_path)\n            \n            time.sleep(.0000000000000001) #Force your computer to do a clock cycle to avoid Windows permission exception\n\n            os.makedirs(pb_path, exist_ok=True)\n        \n        # Export non-compressed model\n        if mode in ['TFModel']:\n            tf.compat.v1.saved_model.simple_save(self._sess, pb_path, inputs=self._input_tensor_export, outputs=self._output_tensor_export)\n\n        # Export compressed model\n        if mode in ['TFLite']:\n            frozen_path = os.path.join(pb_path, 'frozen_model.pb')\n            converter = tf.lite.TFLiteConverter.from_session(self._sess, list(self._input_tensor_export.values()), list(self._output_tensor_export.values()))\n            converter.post_training_quantize = True\n            tflite_model = converter.convert()\n            with open(frozen_path, \"wb\") as f:\n                f.write(tflite_model)\n        \n        if mode in ['TFQuantized']:\n            def representative_dataset_gen():\n                for i in range(10):\n                    data = list(next(self._export_data_gen).values())\n                    image = np.expand_dims(data[-1], axis=0)\n                    yield [image]\n\n            tflite_path = os.path.join(pb_path, 'tflite_model.tflite')\n            converter = tf.lite.TFLiteConverter.from_session(self._sess, [self._input_tensor_export['output']], [self._output_tensor_export['output']])\n            converter.optimizations = [tf.lite.Optimize.DEFAULT]\n            converter.representative_dataset = representative_dataset_gen\n            converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8, tf.lite.OpsSet.TFLITE_BUILTINS, tf.lite.OpsSet.SELECT_TF_OPS]\n            converter.inference_input_type = tf.uint8\n            converter.inference_output_type = tf.uint8\n            tflite_model = converter.convert()\n            with open(tflite_path, \"wb\") as f:\n                f.write(tflite_model)\n            \n\n        # Export checkpoint\n        if mode in ['checkpoint']:\n            os.makedirs(path, exist_ok=True)\n            for fname in os.listdir(path):\n                if fname.endswith('.json'):\n                    pass\n                else:\n                    os.remove(os.path.join(path,fname))\n            self._checkpoint.save(file_prefix=os.path.join(path, 'model.ckpt'), session=self._sess)\n                \n    def on_stop(self) -> None:\n        \"\"\"Called when the save model button is clicked in the frontend. \n        It is up to the implementing layer to save the model to disk.\"\"\"\n        self.on_export(self._checkpoint_save_path, 'checkpoint')   \n        self._stopped = True\n\n    def on_headless_activate(self) -> None:\n        \"\"\"\"Called when the statistics shown in statistics window are not needed.\n        Purose is to speed up the iteration speed significantly.\"\"\"\n        self._headless = True\n\n        self._layer_outputs = {} \n        self._layer_weights = {}\n        self._layer_biases = {}\n        self._layer_gradients = {}\n\n    def on_headless_deactivate(self) -> None:\n        \"\"\"\"Called when the statistics shown in statistics window are needed.\n        May slow down the iteration speed of the training.\"\"\"\n        import time\n        log.info(f\"Set to headless_off at time {time.time()}\")\n        self._headless = False\n\n    @property\n    def export_modes(self) -> List[str]:\n        \"\"\"Returns the possible modes of exporting a model.\"\"\"        \n        return [\n            'TFModel',\n            'TFLite'\n            'TFQuantized',\n            'checkpoint'            \n        ]\n        \n    @property\n    def is_paused(self) -> None:\n        \"\"\"Returns true when the training is paused.\"\"\"        \n        return self._paused\n\n    @property\n    def batch_size(self):\n        \"\"\" Size of the current training batch \"\"\"        \n        return self._batch_size\n\n    @property\n    def status(self):\n        \"\"\"Called when the pause button is clicked in the frontend. It is up to the implementing layer to pause its execution.\"\"\"        \n        return self._status\n    \n    @property\n    def epoch(self):\n        \"\"\"The current epoch\"\"\"        \n        return self._epoch\n\n    @property\n    def variables(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return self._variables.copy()        \n\n    @property\n    def sample(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"Returns a single data sample\"\"\"        \n        return {'output': np.array(self._loss_training)}\n\n    @property\n    def columns(self) -> List[str]: \n        \"\"\"Column names. Corresponds to each column in a sample \"\"\"\n        return []\n\n    @property\n    def size_training(self) -> int:\n        \"\"\"Returns the size of the training dataset\"\"\"                                    \n        return self._trn_sz_tot\n\n    @property\n    def size_validation(self) -> int:\n        \"\"\"Returns the size of the validation dataset\"\"\"                                            \n        return self._val_sz_tot\n\n    @property\n    def size_testing(self) -> int:\n        \"\"\"Returns the size of the testing dataset\"\"\"\n        return self._tst_sz_tot\n\n    def make_generator_training(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of training data. In the case of a training layer, this typically yields the model output.\"\"\"        \n        yield from []\n        \n    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of validation data. In the case of a training layer, this typically yields the model output.\"\"\"                \n        yield from []\n        \n    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:\n        \"\"\"Returns a generator yielding single samples of testing data. In the case of a training layer, this typically yields the model output.\"\"\"                        \n        yield from []\n\n    @property\n    def loss_training(self) -> float:\n        \"\"\"Returns the current loss of the training phase\"\"\"                \n        return self._loss_training\n\n    @property\n    def loss_validation(self) -> float:\n        \"\"\"Returns the current loss of the validation phase\"\"\"                        \n        return self._loss_validation        \n\n    @property\n    def loss_testing(self) -> float:\n        \"\"\"Returns the current loss of the testing phase\"\"\"                \n        return self._loss_testing\n\n    @property\n    def squared_error_training(self) -> float:\n        \"\"\"Returns the current squared error of the training phase\"\"\"\n        return self._squared_error_training\n    \n    @property\n    def squared_error_testing(self) -> float:\n        \"\"\"Returns the current squared error of the testing phase\"\"\"\n        return self._squared_error_testing\n    \n    @property\n    def squared_error_validation(self) -> float:\n        \"\"\"Returns the current squared error of the validation phase\"\"\"\n        return self._squared_error_validation\n\n    @property\n    def squared_variance_training(self) -> float:\n        \"\"\"Returns the current squared variance of the training phase\"\"\"\n        return self._squared_variance_training\n\n    @property\n    def squared_variance_testing(self) -> float:\n        \"\"\"Returns the current squared variance of the testing phase\"\"\"\n        return self._squared_variance_testing\n\n    @property\n    def squared_variance_validation(self) -> float:\n        \"\"\"Returns the current squared variance of the validation phase\"\"\"\n        return self._squared_variance_validation\n\n    @property\n    def r_squared_training(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the training phase\n        \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n\n        \"\"\"\n        return self._r_squared_training\n\n    @property\n    def r_squared_testing(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the testing phase \n        \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n        \n        \"\"\"\n        return self._r_squared_testing\n\n    @property\n    def r_squared_validation(self) -> float:\n        \"\"\"\n        Returns the current R^2 estimate of the validation phase\n    \n        ** Note ** \n        The reason this is considered an estimate is because finding the R^2 of a regression \n        model involves comparing the true output values with the mean of the true output values \n        when computing the squared variance. \n\n        The mean of true output values is not precomputed due to potential memory limitations, \n        but is iterated on as we're going through the dataset. As we approach the end of the \n        data, the mean of the true output approaches its actual value.\n\n        \"\"\"\n\n        return self._r_squared_validation\n\n    @property\n    def layer_weights(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The weight values of each layer in the input Graph during the training.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_weights\n\n    @property\n    def layer_biases(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The bias values of each layer in the input Graph during the training.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_biases\n    \n    @property\n    def layer_gradients(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The gradients with respect to the loss of all trainable variables of each layer in the input Graph.\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain gradient name and value pairs. The values must be picklable.\n        \"\"\"        \n        return self._layer_gradients\n    \n    @property\n    def layer_outputs(self) -> Dict[str, Dict[str, Picklable]]:\n        \"\"\"The output values of each layer in the input Graph during the training (e.g., tf.Tensors evaluated for each iteration)\n\n        Returns:\n            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain variable name and value pairs. The values must be picklable.\n        \"\"\"\n        return self._layer_outputs\n\n    @property\n    def training_iteration(self) -> int:\n        \"\"\"The current training iteration\"\"\"\n        return self._training_iteration\n\n    @property\n    def validation_iteration(self) -> int:\n        \"\"\"The current validation iteration\"\"\"        \n        return self._validation_iteration\n\n    @property\n    def testing_iteration(self) -> int:\n        \"\"\"The current testing iteration\"\"\"                \n        return self._testing_iteration\n    \n    @property\n    def progress(self) -> float:\n        \"\"\"A number indicating the overall progress of the training\n        \n        Returns:\n            A floating point number between 0 and 1\n        \"\"\"        \n        n_iterations_per_epoch = np.ceil(self.size_training / self.batch_size) + \\\n                                 np.ceil(self.size_validation / self.batch_size)\n        n_iterations_total = self._n_epochs * n_iterations_per_epoch\n\n        iteration = self.epoch * n_iterations_per_epoch + \\\n                    self.training_iteration + self.validation_iteration\n        \n        progress = min(iteration/(n_iterations_total - 1), 1.0) \n        return progress", "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": true, "position": {"top": 215.33333333333334, "left": 589.3333333333333}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 1, "series": [{"type": "scatter", "x_data": null, "data": [0]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "TrainRegression", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "inputs": {"16050697135710": {"name": "predictions", "reference_var_id": "16050695075140", "reference_layer_id": "1605069507514", "isDefault": true}, "16050697135711": {"name": "labels", "reference_var_id": "16050697213300", "reference_layer_id": "1605069721330", "isDefault": true}}, "outputs": {}, "forward_connections": [], "backward_connections": [{"src_id": "1605069507514", "src_var": "output", "dst_var": "predictions"}, {"src_id": "1605069721330", "src_var": "output", "dst_var": "labels"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Labels": "", "Epochs": "10", "N_class": "1", "Loss": "Regression", "Class_weights": "1", "Learning_rate": "0.001", "Optimizer": "ADAM", "Beta_1": "0.9", "Beta_2": "0.999", "Momentum": "0.9", "Decay_steps": "100000", "Decay_rate": "0.96", "Batch_size": 8, "Training_iters": "20000"}, "isSettingsLocked": true, "visited": false}, "1605069721330": {"layerId": "1605069721330", "copyId": null, "copyContainerElement": null, "layerName": "Local_2", "layerType": "Data", "layerSettings": {"accessProperties": {"Columns": [], "Sources": [{"path": "c:/users/arunesh/anaconda3/envs/env7/lib/site-packages/perceptilabs/tutorial_data/NVIDIA_Y.npy", "type": "file"}], "Partition_list": [[70, 20, 10]], "Shuffle_data": true}, "lazy": false}, "layerSettingsTabName": "Computer", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 226.66666666666669, "left": 22.666666666666668}, "tutorialId": "", "OutputDim": "1", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {"xLength": 1, "series": [{"type": "bar", "x_data": null, "data": [0.15000000596046448]}]}, "checkpoint": [null, "C:\\Users\\ARUNESH\\Documents\\Perceptilabs\\Default/NVIDIA"], "endPoints": [], "componentName": "DataData", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16050697213300": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1605069713570", "dst_var": "labels"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "Data", "testInfoIsInput": true, "accessProperties": {"Columns": [], "Dataset_size": 3000, "Category": "Local", "Type": "Data", "Sources": [], "PathFake": [], "Partition_list": [], "Shuffle_data": true}}}}], "chartDataIsLoading": 0}